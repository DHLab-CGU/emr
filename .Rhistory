DxDataFile <- test
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
# icd9ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) < icd10usingDate,],
#                         select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
# icd10ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) >= icd10usingDate,],
#                          select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
#
# CCS_combine <- left_join(DxDataFile_allShort, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile_allShort))
icd9ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile)) %>% unique
IcdToCCS <- CCS_combine$CCS_CATEGORY
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
IcdToCCS <- CCS_combine$CCS_CATEGORY
# WrongFormat <- IcdDxDecimaltoShort(DxDataFile$ICD)$Error
# error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "Number")
WrongFormat <- Conversion$Error
error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "Number")
if(anyNA(IcdToCCS)){
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
}
if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' IcdDxToCCS(DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
# DxDataFile_allShort <- DxDataFile
# DxDataFile_allShort$ICD <- IcdDxDecimaltoShort(DxDataFile_allShort$ICD)$Short
# icd9ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) < icd10usingDate,],
#                         select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
# icd10ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) >= icd10usingDate,],
#                          select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
#
# CCS_combine <- left_join(DxDataFile_allShort, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile_allShort))
icd9ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
if (isCCSCategoryDescription == T) {
IcdToCCS <- CCS_combine$CCS_CATEGORY_DESCRIPTION
}else {
IcdToCCS <- CCS_combine$CCS_CATEGORY
}
# WrongFormat <- IcdDxDecimaltoShort(DxDataFile$ICD)$Error
# error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "Number")
WrongFormat <- Conversion$Error
error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "Number")
if(anyNA(IcdToCCS)){
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
}
if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
IcdToCCS
}
test$CCS_modify <- IcdDxToCCS(test, MemberID, ICD, DateServiceStarted, "2015-10-01", F)
DxDataFile <- test
names(DxDataFile) <- c("ID", "ICD", "Date")
# DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
# icd9ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) < icd10usingDate,],
#                         select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
# icd10ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) >= icd10usingDate,],
#                          select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
#
# CCS_combine <- left_join(DxDataFile_allShort, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile_allShort))
icd9ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
View(DxDataFile)
DxDataFile <- test[,1:3]
View(DxDataFile)
names(DxDataFile) <- c("ID", "ICD", "Date")
# DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
# icd9ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) < icd10usingDate,],
#                         select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
# icd10ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) >= icd10usingDate,],
#                          select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
#
# CCS_combine <- left_join(DxDataFile_allShort, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile_allShort))
icd9ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
)
DxDataFile$Date <- as.Date(DxDataFile$Date)
# icd9ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) < icd10usingDate,],
#                         select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
# icd10ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) >= icd10usingDate,],
#                          select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
#
# CCS_combine <- left_join(DxDataFile_allShort, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile_allShort))
icd9ToCCS <- inner_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- inner_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
CCS_combine <- inner_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
DxDataFile[is.na(IcdToCCS),]
IcdToCCS <- CCS_combine$CCS_CATEGORY
is.na(IcdToCCS)
DxDataFile[is.na(IcdToCCS),]
IcdToCCS <- CCS_combine$CCS_CATEGORY
anyNA(IcdToCCS)
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
DxDataFile <- test[,1:3]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
# icd9ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) < icd10usingDate,],
#                         select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
# icd10ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) >= icd10usingDate,],
#                          select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
#
# CCS_combine <- left_join(DxDataFile_allShort, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile_allShort))
icd9ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
IcdToCCS <- CCS_combine$CCS_CATEGORY
# WrongFormat <- IcdDxDecimaltoShort(DxDataFile$ICD)$Error
# error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "Number")
WrongFormat <- Conversion$Error
if(anyNA(IcdToCCS)){
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
}
if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' IcdDxToCCS(DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
# DxDataFile_allShort <- DxDataFile
# DxDataFile_allShort$ICD <- IcdDxDecimaltoShort(DxDataFile_allShort$ICD)$Short
# icd9ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) < icd10usingDate,],
#                         select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
# icd10ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) >= icd10usingDate,],
#                          select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
#
# CCS_combine <- left_join(DxDataFile_allShort, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile_allShort))
icd9ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
if (isCCSCategoryDescription == T) {
IcdToCCS <- CCS_combine$CCS_CATEGORY_DESCRIPTION
}else {
IcdToCCS <- CCS_combine$CCS_CATEGORY
}
# WrongFormat <- IcdDxDecimaltoShort(DxDataFile$ICD)$Error
# error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "Number")
WrongFormat <- Conversion$Error
error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "Number")
if(anyNA(IcdToCCS)){
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
}
if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
IcdToCCS
}
test$CCS_modify <- IcdDxToCCS(test, MemberID, ICD, DateServiceStarted, "2015-10-01", F)
View(test)
View(WrongFormat)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' IcdDxToCCS(DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
# DxDataFile_allShort <- DxDataFile
# DxDataFile_allShort$ICD <- IcdDxDecimaltoShort(DxDataFile_allShort$ICD)$Short
# icd9ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) < icd10usingDate,],
#                         select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
# icd10ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) >= icd10usingDate,],
#                          select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
#
# CCS_combine <- left_join(DxDataFile_allShort, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile_allShort))
icd9ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
if (isCCSCategoryDescription == T) {
IcdToCCS <- CCS_combine$CCS_CATEGORY_DESCRIPTION
}else {
IcdToCCS <- CCS_combine$CCS_CATEGORY
}
# WrongFormat <- IcdDxDecimaltoShort(DxDataFile$ICD)$Error
# error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "Number")
WrongFormat <- Conversion$Error
error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "ICD")
if(anyNA(IcdToCCS)){
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
}
if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
IcdToCCS
}
test$CCS_modify_ICD <- IcdDxToCCS(test, MemberID, ICD, DateServiceStarted, "2015-10-01", F)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' IcdDxToCCS(DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
# Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
# DxDataFile$Short <- Conversion$Short
DxDataFile_allShort <- DxDataFile
DxDataFile_allShort$ICD <- IcdDxDecimaltoShort(DxDataFile_allShort$ICD)$Short
icd9ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
icd10ToCCS <- inner_join(DxDataFile_allShort[as.Date(DxDataFile_allShort$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
CCS_combine <- left_join(DxDataFile_allShort, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile_allShort))
# icd9ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
#                         select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
# icd10ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
#                          select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
#
# CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
if (isCCSCategoryDescription == T) {
IcdToCCS <- CCS_combine$CCS_CATEGORY_DESCRIPTION
}else {
IcdToCCS <- CCS_combine$CCS_CATEGORY
}
WrongFormat <- IcdDxDecimaltoShort(DxDataFile$ICD)$Error
error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "Number")
# WrongFormat <- Conversion$Error
# error_ICD <- anti_join(DxDataFile[is.na(IcdToCCS),], WrongFormat, "ICD")
if(anyNA(IcdToCCS)){
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
}
if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
IcdToCCS
}
test$CCS <- IcdDxToCCS(test, MemberID, ICD, DateServiceStarted, "2015-10-01", F)
View(test)
test$CCS_modify == test$CCS_modify_ICD
sum(test$CCS_modify == test$CCS_modify_ICD)
length(test$CCS_modify == test$CCS_modify_ICD)
length(test$CCS_modify == test$CCS)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' IcdDxToCCS(DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
icd9ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- inner_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- left_join(DxDataFile, rbind(icd9ToCCS, icd10ToCCS), by = names(DxDataFile))
if (isCCSCategoryDescription == T) {
IcdToCCS <- CCS_combine$CCS_CATEGORY_DESCRIPTION
}else {
IcdToCCS <- CCS_combine$CCS_CATEGORY
}
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCS)],stringsAsFactors = F), WrongFormat, "ICD")
if(anyNA(IcdToCCS)){
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
}
if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
IcdToCCS
}
test$CCS_test <- IcdDxToCCS(test, MemberID, ICD, DateServiceStarted, "2015-10-01", F)
length(test$CCS_test == test$CCS)
setwd("~/emr")
devtools::document()
pkgdown::build_site()
devtools::check()
test<-rbind(icd9ToCCS, icd10ToCCS)
str(test)
str(DxDataFile)
test %>% group_by(ID,ICD,Date,Number,Short) %>% summarise(Count=n()) %>% arrange(desc(Count))
DxDataFile %>% group_by(ID,ICD,Date,Number,Short) %>% summarise(Count=n()) %>% arrange(desc(Count))
test %>% group_by(ID,ICD,Date,Short) %>% summarise(Count=n()) %>% arrange(desc(Count))
DxDataFile %>% group_by(ID,ICD,Date,Short) %>% summarise(Count=n()) %>% arrange(desc(Count))
View(db)
pkgdown::build_site()
## create a new database connection to a temporary file
db <- database(tempfile(fileext = ".sqlite"))
View(db)
db
str(db)
db[1]
head(db, table =  "Clinical")
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
ehr_path
head(db, table =  "Clinical")
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
##### load clinical events files (clinical, referral, drugs etc.) ----
## Use simulated ehr files supplied with the package to build database
ehr_path <- dirname(system.file("ehr_data", "ehr_Clinical.txt", package = "rEHR"))
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
##### load clinical events files (clinical, referral, drugs etc.) ----
## Use simulated ehr files supplied with the package to build database
ehr_path <- dirname(system.file("ehr_data", "ehr_Clinical1.txt", package = "rEHR"))
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
devtools::install_github("rOpenHealth/rEHR")
devtools::install_github("rOpenHealth/rEHR")
##### load clinical events files (clinical, referral, drugs etc.) ----
## Use simulated ehr files supplied with the package to build database
ehr_path <- dirname(system.file("ehr_data", "ehr_Clinical1.txt", package = "rEHR"))
## create a new database connection to a temporary file
db <- database(tempfile(fileext = ".sqlite"))
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
## create a new database connection to a temporary file
db <- database(tempfile(fileext = ".sqlite"))
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
##### load clinical events files (clinical, referral, drugs etc.) ----
## Use simulated ehr files supplied with the package to build database
ehr_path <- dirname(system.file("ehr_data", "ehr_Clinical1.txt", package = "rEHR"))
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("ehr_Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
db
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
##### load clinical events files (clinical, referral, drugs etc.) ----
## Use simulated ehr files supplied with the package to build database
ehr_path <- dirname(system.file("ehr_data", "ehr_Clinical1.txt", package = "rEHR"))
library(rEHR)
##### load clinical events files (clinical, referral, drugs etc.) ----
## Use simulated ehr files supplied with the package to build database
ehr_path <- dirname(system.file("ehr_data", "ehr_Clinical1.txt", package = "rEHR"))
## create a new database connection to a temporary file
db <- database(tempfile(fileext = ".sqlite"))
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
## Individual files can also be added:
add_to_database(db, files = system.file("ehr_data", "ehr_Therapy.txt", package ="rEHR"),
table_name ="Therapy", dateformat ="%Y‐%m‐%d")
ehr_path
##### load clinical events files (clinical, referral, drugs etc.) ----
## Use simulated ehr files supplied with the package to build database
ehr_path <- dirname(system.file("ehr_data", "ehr_Clinical.txt", package = "rEHR"))
## Import multiple data files into the database
import_CPRD_data(db, data_dir = ehr_path,
filetypes =  c("Clinical","Consultation","Patient","Practice","Referral"),
dateformat ="%Y‐%m‐%d",
yob_origin = 1800, regex = "ehr", recursive = TRUE)
head(db, table =  "Clinical")
"2003-08-25"
as.Date("2003-08-25","%Y-%m-%d")
View(ccsDxICD9)
library("rEHR", lib.loc="~/R/win-library/3.4")
load_all("~/rOpenHealth//rEHR")
devtools::load_all("~/rOpenHealth//rEHR")
