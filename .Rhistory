selectedCaseFile
is.null(nrow(selectedCaseFile))
is.null((selectedCaseFile))
selectedCaseFile <- selectCases("^785", sampleDxFile, ID, ICD, Date, 2)
View(sampleDxFile)
exists((selectedCaseFile))
exists(selectedCaseFile)
selectedCaseFile <- selectCases("^785", sampleDxFile, ID, ICD, Date, 2)
sampleDxFile
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases("^785", sampleDxFile, ID, ICD, Date, 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs,N)
#'
names(sampleDxFile)<- c("A","B","C")
sampleDxFile
groupedDataLongToWide(sampleDxFile, A, B, C, "2015-10-01", ccs,N)
#' @param icd10usingDate Icd 10 using date
#' @param groupDataType  Four grouping method can be chosen: CCS (\code{'ccs'}), CCS levels (\code{'ccslvl1'}, \code{'ccslvl2'}, \code{'ccslvl3'}, \code{'ccslvl4'}), phecode (\code{'phecode'}), comorbidities (\code{'ahrq'},\code{'charlson'}, \code{'elix'}),
#'  grepICD or customICD (\code{'customGrepIcdGroup'}, \code{'customIcdGroup'}). Change it to any of the other possible variables.
#' @param groupDataType  Four Stratified methods can be chosen: CCS (\code{'ccs'}), CCS levels (\code{'ccslvl1'}, \code{'ccslvl2'}, \code{'ccslvl3'}, \code{'ccslvl4'}), phecode (\code{'phecode'}), comorbidities (\code{'ahrq'},\code{'charlson'}, \code{'elix'}), grepICD or customICD (\code{'customGrepIcdGroup'}, \code{'customIcdGroup'}). Change it to any of the other possible variables, default it is set to \code{"ccs"}.
#' @param isDescription  CCS/Phecode categories or description for ICD-CM codes, default is \code{'TRUE'}.
#' @param CustomGroupingTable Table is for groupDataType
#' @param numericOrBinary  Members have same diagnostic categories, type `N` or `B`, default is Binary \code{'B'}.
#' @param selectedCases  Select cases based on ICD code and the number of ICD codes, default is \code{'FALSE'}.
#' @param selectedCaseFile Table is for selectedCases.
#'
groupMethodSelect <- function(DxDataFile,idColName, icdColName, dateColName, icd10usingDate, groupMethod, CustomGroupingTable, isDescription){
# DxDataFile <- as.data.table(DxDataFile)
# DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
# DxDataFile <- DxDataFile[,DataCol,with = FALSE]
# names(DxDataFile) <- c("ID", "ICD", "Date")
if(groupMethod == "ccs"){
groupedData <- IcdDxToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isDescription)
}else if(grepl("ccslvl" ,groupMethod)){
CCSLevel <- as.numeric(sub("[A-Za-z]+","",groupMethod))
groupedData <- IcdDxToCCSLvl(DxDataFile, ID, ICD, Date, icd10usingDate, CCSLevel, isDescription)
}else if(groupMethod == "phecode"){
groupedData <- IcdDxToPhecode(DxDataFile, ID, ICD, Date, icd10usingDate, isDescription)
}else if(groupMethod == "ahrq"){
groupedData <- IcdDxToComorbid(DxDataFile, ID, ICD, Date, icd10usingDate, ahrq)
}else if(groupMethod == "charlson"){
groupedData <- IcdDxToComorbid(DxDataFile, ID, ICD, Date, icd10usingDate, charlson)
}else if(groupMethod == "elix"){
groupedData <- IcdDxToComorbid(DxDataFile, ID, ICD, Date, icd10usingDate, elix)
}else if(groupMethod == "customgrepicdgroup"){
groupedData <- IcdDxToCustomGrep(DxDataFile, ID, ICD, Date, CustomGroupingTable)
}else if(groupMethod == "customicdgroup"){
groupedData <- IcdDxToCustom(DxDataFile, ID, ICD, Date, CustomGroupingTable)
}else if(groupMethod == "icd"){
groupedData <- DxDataFile[, Short :=IcdDxDecimalToShort(DxDataFile, ICD, Date, icd10usingDate)$ICD]
}else{
stop("'please enter `ccs`,`ccslvl`, `phecode`, `ahrq`, `charlson`, `elix` `customgrepicdgroup`, `customicdgroup` for 'groupMethod'", call. = FALSE)
}
groupedData
}
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = N){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
if(selectedCases == T){
if(numericOrBinary == "B"){
wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}else{
wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
return(wideDt_selected)
}else{
if(numericOrBinary == "B"){
return(wideDt_N)
}else{
return(wideDt)
}
}
}
groupedDataLongToWide(sampleDxFile, A, B, C, "2015-10-01", ccs,N)
selectCases <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ICD, CustomGroupingTable, isDescription = TRUE, caseCondition, ICDNumber, INRofDayRange = c(30, 365), selectCaseType = "Selected"){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile[,"Date"] <- as.Date(DxDataFile[,Date])
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedDf
groupDataType <- names(groupedData)[ncol(groupedData)]
}
Case <- groupedData[grepl(caseCondition, groupedData[,eval(parse(text = paste(groupDataType)))]),][order(ID,Date)]
Case <- Case[!duplicated(Case)][,NextDate := c(Date[-1],NA),by = "ID"][is.na(NextDate),NextDate := Date][,diffDay := NextDate-Date][,Out := FALSE][diffDay > INRofDayRange[2],Out := TRUE][,OutCount:=cumsum(Out),by = "ID"][!Out == TRUE,]
if(nrow(Case) > 0){
CaseCount <- Case[,Gap := cumsum(as.integer(diffDay)),by = c("ID","OutCount")][,InTimeINR := Gap >= INRofDayRange[1] & Gap < INRofDayRange[2],][is.na(InTimeINR),InTimeINR := FALSE][,list(count = cumsum(InTimeINR), firstCaseDate = min(Date), endCaseDate = max(NextDate),period = Gap),by = c("ID","OutCount")][order(ID, count, decreasing = T)][!duplicated(ID),][count >= ICDNumber,][,selectedCase := "selected"][,-"OutCount"]
CaseMostICDCount <- Case[InTimeINR ==TRUE,list(MostCommonICDCount = .N),by = list(ID,ICD)][order(MostCommonICDCount,decreasing = T),]
selectedCase <- merge(CaseCount,CaseMostICDCount,"ID")[!duplicated(ID),]
setnames(selectedCase,"ICD","MostCommonICD")
}else{
nonSelectedCase <- DxDataFile[,list(ID)][,selectedCase := "nonSelected"][!duplicated(ID),][order(ID),]
return(nonSelectedCase)
# stop(paste0("This dataset does not have the relative caseCondition: ",caseCondition), call. = FALSE)
}
nonSelectedCase <- DxDataFile[!Case, on = "ID", list(ID)][,selectedCase := "nonSelected"][!duplicated(ID),]
if(length(unique(Case$ID))>length(unique(selectedCase$ID))){
semiCase <- Case[!selectedCase, on = "ID", list(ID)][,selectedCase := "selected*"]
nonSelectedCase <- rbind(nonSelectedCase,semiCase)
}
allData <- merge(selectedCase,nonSelectedCase,by = names(nonSelectedCase),all=T)[order(MostCommonICDCount,decreasing = T),]
allData
}
selectCases(sampleDxFile, ID, ICD, Date,
groupDataType = ccslvl2,
icd10usingDate = "2015/10/01"
caseCondition = "Diseases of the heart",
ICDNumber = 2)
selectCases(sampleDxFile, ID, ICD, Date,
groupDataType = ccslvl2,
icd10usingDate = "2015/10/01",
caseCondition = "Diseases of the heart",
ICDNumber = 2)
load("~/emr/data/sampleDxFile.rda")
selectCases(sampleDxFile, ID, ICD, Date,
groupDataType = ccslvl2,
icd10usingDate = "2015/10/01",
caseCondition = "Diseases of the heart",
ICDNumber = 2)
selectedCaseFile <- selectCases("^785", sampleDxFile, ID, ICD, Date,groupDataType = ccslvl2, icd10usingDate = "2015/10/01",2)
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,"^785",2)
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,"^785",ICDNumber = 2)
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = N){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
if(exist(selectedCaseFile)){
if(numericOrBinary == "B"){
wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}else{
wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
return(wideDt_selected)
}else{
if(numericOrBinary == "B"){
return(wideDt_N)
}else{
return(wideDt)
}
}
}
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = N){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
if(exists(selectedCaseFile)){
if(numericOrBinary == "B"){
wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}else{
wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
return(wideDt_selected)
}else{
if(numericOrBinary == "B"){
return(wideDt_N)
}else{
return(wideDt)
}
}
}
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
selectedCaseFile
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
#'
exists
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
#'
exists(selectedCaseFile)
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
#'
is.null(selectedCaseFile)
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
#'
is.null(selectedFile)
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
#'
is.object(selectedFile)
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
#'
is.object(selectedCaseFile)
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
#'
!is.object(selectedFile)
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
#'
exists(selectedFile)
#' @examples
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01",
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date, icd10usingDate = "2015/10/01", groupDataType = ccslvl2, ,caseCondition = "^785",ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
#'
is.null(selectedCaseFile)
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = N,selectedCaseFile = NULL){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
if(!is.null(selectedCaseFile)){
if(numericOrBinary == "B"){
wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}else{
wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
return(wideDt_selected)
}else{
if(numericOrBinary == "B"){
return(wideDt_N)
}else{
return(wideDt)
}
}
}
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
selectedCaseFile
selectedCaseFile[,list(ID, selectedCase)]
wideDt_N
DxDataFile
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, "ccs", CustomGroupingTable, isDescription)
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = N,selectedCaseFile = NULL){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
# if(!is.null(selectedCaseFile)){
#   if(numericOrBinary == "B"){
#     wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
#   }else{
#     wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
#   }
#   return(wideDt_selected)
# }else{
if(numericOrBinary == "B"){
return(wideDt_N)
}else{
return(wideDt)
# }
}
}
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, )#selectedCaseFile)
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N)#, selectedCaseFile)
wideDt_N <- groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N)#, selectedCaseFile)
merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = N,selectedCaseFile = NULL){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
if(!is.null(selectedCaseFile)){
print(numericOrBinary)
if(numericOrBinary == "B"){
wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}else{
wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
return(wideDt_selected)
}else{
if(numericOrBinary == "B"){
print("hi")
return(wideDt_N)
}else{
return(wideDt)
}
}
}
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N,selectedCaseFile =  selectedCaseFile)
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = N,selectedCaseFile = NULL){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
if(!is.null(selectedCaseFile)){
if(numericOrBinary == "B"){
wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}else{
wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
return(wideDt_selected)
}else{
if(numericOrBinary == "B"){
return(wideDt_N)
}else{
return(wideDt)
}
}
}
groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
stringsAsFactors = FALSE)
setwd("~/emr")
pkgdown::build_site()
library("data.table", lib.loc="~/R/win-library/3.4")
pkgdown::build_site()
devtools::document()
