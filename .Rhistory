group_by(ID,Comorbidity) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
IcdDxToComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
comorbidMethod <- tolower(deparse(substitute(comorbidMethod)))
if (grepl("ahrq", comorbidMethod)){
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
}else if(grepl("charlson", comorbidMethod)){
comorbidMap9 <- `icd9_charlson`
comorbidMap10 <- `icd10_charlson`
}else if(grepl("elix", comorbidMethod)){
comorbidMap9 <- `icd9_elix`
comorbidMap10 <- `icd10_elix`
}
comorbidDf_combine <- rbind(left_join(data.frame(DxDataFile[DxDataFile$Date < icd10usingDate,]), comorbidMap9,by = c("Short"="ICD")),
left_join(data.frame(DxDataFile[DxDataFile$Date  >= icd10usingDate,]), comorbidMap10, by = c("Short"="ICD")))
comorbidDf_combine <- comorbidDf_combine[!is.na(comorbidDf_combine$Comorbidity),]
comorbidDf_combine <- comorbidDf_combine %>%
group_by(ID,Comorbidity) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
comorbidDf_combine
}
names(test)
testComorbid <- IcdDxToComorbid(test,MemberID,ICD,DateServiceStarted,"2015/10/01",ahrq)
View(comorbidDf_combine)
View(testComorbid)
View(comorbidDf_combine)
pkgdown::build_site()
setwd("~/emr")
pkgdown::build_site()
devtools::document()
devtools::check()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
DxDataFile <- test
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
CCS_combine <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")))
CCS_combine <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")))
View(CCS_combine)
CCS_combine <- CCS_combine[!is.na(CCS_combine$CCS_CATEGORY),]
CCS_combine <- CCS_combine %>%
group_by(ID,CCS_CATEGORY) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
CCS_combine1 <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")))
View(CCS_combine1)
CCS_combine <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY), by = c("Short"="ICD")))
CCS_combine <- CCS_combine[!is.na(CCS_combine$CCS_CATEGORY),]
CCS_combine <- CCS_combine %>%
group_by(ID,CCS_CATEGORY) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
IcdToCCS <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY), by = c("Short"="ICD")))
IcdToCCS <- IcdToCCS[!is.na(IcdToCCS$CCS_CATEGORY),]
IcdToCCS <- IcdToCCS %>%
group_by(ID,CCS_CATEGORY) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
# if (isCCSCategoryDescription == T) {
#   IcdToCCS <- IcdToCCS$CCS_CATEGORY_DESCRIPTION
# }else {
#   IcdToCCS <- IcdToCCS$CCS_CATEGORY
# }
# WrongFormat <- Conversion$Error
# error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCS)],stringsAsFactors = F), WrongFormat, "ICD")
#
# if(anyNA(IcdToCCS)){
#   if(nrow(WrongFormat) > 0){
#     message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
#   }
#   if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
#     message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
#     message("\n")
#   }
#   warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
#   warning('"wrong Format" means the ICD has wrong format', call. = F)
#   warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
# }
return(IcdToCCS)
}
testCCS <- IcdDxToCCS(test,MemberID,ICD,DateServiceStarted,"2015/10/01")
View(CCS_combine)
IcdToCCS <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY,CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY,CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")))
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = T){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
IcdToCCS <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY,CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY,CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD")))
IcdToCCS <- IcdToCCS[!is.na(IcdToCCS$CCS_CATEGORY),]
if (isCCSCategoryDescription == T) {
ccs_col <- "CCS_CATEGORY_DESCRIPTION"
}else {
ccs_col <- "CCS_CATEGORY"
}
IcdToCCS <- IcdToCCS %>%
group_by_("ID",ccs_col) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
# if (isCCSCategoryDescription == T) {
#   IcdToCCS <- IcdToCCS$CCS_CATEGORY_DESCRIPTION
# }else {
#   IcdToCCS <- IcdToCCS$CCS_CATEGORY
# }
# WrongFormat <- Conversion$Error
# error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCS)],stringsAsFactors = F), WrongFormat, "ICD")
#
# if(anyNA(IcdToCCS)){
#   if(nrow(WrongFormat) > 0){
#     message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
#   }
#   if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
#     message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
#     message("\n")
#   }
#   warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
#   warning('"wrong Format" means the ICD has wrong format', call. = F)
#   warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
# }
return(IcdToCCS)
}
testCCS <- IcdDxToCCS(test,MemberID,ICD,DateServiceStarted,"2015/10/01",F)
testCCS <- IcdDxToCCS(test,MemberID,ICD,DateServiceStarted,"2015/10/01",T)
View(testCCS)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' IcdDxToCCSLvl(DxDataFile, ID, ICD, Date, "2016-01-01", 2, TRUE)
#'
names(test)
IcdDxToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, CCSLvlLabel = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
if(CCSLvlLabel == T){
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
}else{
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
}
if(CCSLevel <= 2){
icd9ToCCSLvl <- inner_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLevelcol), by = c("Short"="ICD"))
icd10ToCCSLvl <- inner_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLevelcol), by = c("Short"="ICD"))
IcdToCCSLevel <- left_join(DxDataFile, rbind(icd9ToCCSLvl, icd10ToCCSLvl), by = names(DxDataFile))
}else{
icd9ToCCSLvl <- inner_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLevelcol), by = c("Short"="ICD"))
IcdToCCSLevel <- left_join(DxDataFile, icd9ToCCSLvl, by = names(DxDataFile))
}
IcdToCCSLevel <- IcdToCCSLevel %>%
group_by_("ID",CCSLevelcol) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
# IcdToCCSLevel <- IcdToCCSLevel[, CCSLevelcol]
WrongFormat <- Conversion$Error
# error_ICD <- anti_join(data.frame(ICD = IcdToCCSLevel$ICD[is.na(IcdToCCSLevel)],stringsAsFactors = F), WrongFormat, "ICD")
# if(anyNA(IcdToCCSLevel)){
#   if(nrow(WrongFormat) > 0){
#     message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
#   }
#   if(sum(is.na(IcdToCCSLevel)) > nrow(WrongFormat)){
#     message(paste0("wrong ICD version: ",unique(error_ICD$ICD), sep = "\t\n"))
#     message("\n")
#   }
#   warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
#   warning('"wrong Format" means the ICD has wrong format', call. = F)
#   warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate"), ICD-10  CCS multiple levels are 1~2 or other issues', call. = F)
# }
return(list(IcdToCCSLevel,
WrongFormat))
}
IcdDxToCCSLvl(DxDataFile, MemberID, ICD, DateServiceStarted, "2015-10-01", 2, TRUE)
IcdDxToCCSLvl(test, MemberID, ICD, DateServiceStarted, "2015-10-01", 2, TRUE)
CCSlvl <- IcdDxToCCSLvl(test, MemberID, ICD, DateServiceStarted, "2015-10-01", 2, TRUE)$IcdToCCSLevel
CCSlvl <- IcdDxToCCSLvl(test, MemberID, ICD, DateServiceStarted, "2015-10-01", 2, TRUE)
View(CCSlvl)
IcdDxToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, CCSLvlLabel = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
if(CCSLvlLabel == T){
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
}else{
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
}
if(CCSLevel <= 2){
icd9ToCCSLvl <- inner_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLevelcol), by = c("Short"="ICD"))
icd10ToCCSLvl <- inner_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLevelcol), by = c("Short"="ICD"))
IcdToCCSLevel <- left_join(DxDataFile, rbind(icd9ToCCSLvl, icd10ToCCSLvl), by = names(DxDataFile))
}else{
icd9ToCCSLvl <- inner_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLevelcol), by = c("Short"="ICD"))
IcdToCCSLevel <- left_join(DxDataFile, icd9ToCCSLvl, by = names(DxDataFile))
}
IcdToCCSLevel <- IcdToCCSLevel %>%
group_by_("ID",CCSLevelcol) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
# IcdToCCSLevel <- IcdToCCSLevel[, CCSLevelcol]
WrongFormat <- Conversion$Error
# error_ICD <- anti_join(data.frame(ICD = IcdToCCSLevel$ICD[is.na(IcdToCCSLevel)],stringsAsFactors = F), WrongFormat, "ICD")
# if(anyNA(IcdToCCSLevel)){
#   if(nrow(WrongFormat) > 0){
#     message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
#   }
#   if(sum(is.na(IcdToCCSLevel)) > nrow(WrongFormat)){
#     message(paste0("wrong ICD version: ",unique(error_ICD$ICD), sep = "\t\n"))
#     message("\n")
#   }
#   warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
#   warning('"wrong Format" means the ICD has wrong format', call. = F)
#   warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate"), ICD-10  CCS multiple levels are 1~2 or other issues', call. = F)
# }
return(list(CCSlvl = IcdToCCSLevel,
WrongICD = WrongFormat))
}
CCSlvl <- IcdDxToCCSLvl(test, MemberID, ICD, DateServiceStarted, "2015-10-01", 2, TRUE)$CCSlvl
View(CCSlvl)
CCSlvl <- IcdDxToCCSLvl(test, MemberID, ICD, DateServiceStarted, "2015-10-01", 2, F)$CCSlvl
CCSlvl %>% unique %>% nrow
names(CCSlvl)
CCSlvl[,c("ID","CCS_LVL_2")] %>% unique %>% nrow
#' @source ICD-9-Phecode (version 1.2, 2015)
#' @source \url{https://phewascatalog.org/phecodes}
#' @export
#' @examples
#' DxDataFile <- data.frame(ID = c("A", "A", "A"),
#'                          ICD = c("6929", "V433", "I350"),
#'                          Date = as.Date(c("2013-03-31", "2013-01-29", "2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' IcdDxToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
#'
IcdDxToPhecode <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isPhecodeDescription = TRUE){
DxDataFile <- DxDataFile[ ,c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
Conversion <- IcdDxShortToDecimal(icd9$ICD)
icd9$ICDD <- Conversion$Decimal
if(isPhecodeDescription == T){
phecodeCol <- "PheCodeDescription"
}else{
phecodeCol <- "PheCode"
}
IcdToPhecode <- left_join(DxDataFile, left_join(icd9, select_(phecode_icd9_2, "ICDD", phecodeCol), "ICDD"),
by = names(DxDataFile))
IcdToPhecode <- IcdToPhecode[!is.na(IcdToPhecode[,phecodeCol]),]
IcdToPhecode <- IcdToPhecode %>%
group_by_("ID",phecodeCol) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
# if(isPhecodeDescription == T){
#   IcdToPhecode <- Phecode_combine$PheCodeDescription
# }else{
#   IcdToPhecode <- Phecode_combine$PheCode
# }
#
WrongFormat <- Conversion$Error
# error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToPhecode)], stringsAsFactors= FALSE), WrongFormat, "ICD")
# if(anyNA(IcdToPhecode)){
#   if(nrow(WrongFormat) > 0){
#     message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
#   }
#   if(sum(is.na(IcdToPhecode)) > nrow(WrongFormat)){
#     message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
#     message("\n")
#   }
#   warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
#   warning('"wrong Format" means the ICD has wrong format', call. = F)
#   warning('"wrong ICD version" means the ICD classify to wrong ICD version (phecode does not have icd10), or the icd does not have phecode ', call. = F)
# }
return(list(phecode = IcdToPhecode,
wrongICD = WrongFormat))
}
#' @source ICD-9-Phecode (version 1.2, 2015)
#' @source \url{https://phewascatalog.org/phecodes}
#' @export
#' @examples
#' DxDataFile <- data.frame(ID = c("A", "A", "A"),
#'                          ICD = c("6929", "V433", "I350"),
#'                          Date = as.Date(c("2013-03-31", "2013-01-29", "2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' IcdDxToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
#'
phecode <- IcdDxToPhecode(test,MemberID,ICD,DateServiceStarted,"2015/10/01",F)
IcdDxToPhecode <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isPhecodeDescription = TRUE){
DxDataFile <- DxDataFile[ ,c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
Conversion <- IcdDxShortToDecimal(icd9$ICD)
icd9$ICDD <- Conversion$Decimal
if(isPhecodeDescription == T){
phecodeCol <- "PheCodeDescription"
}else{
phecodeCol <- "PheCode"
}
IcdToPhecode <- left_join(DxDataFile, inner_join(icd9, select_(phecode_icd9_2, "ICDD", phecodeCol), "ICDD"),
by = names(DxDataFile))
IcdToPhecode <- IcdToPhecode[!is.na(IcdToPhecode[,phecodeCol]),]
IcdToPhecode <- IcdToPhecode %>%
group_by_("ID",phecodeCol) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
# if(isPhecodeDescription == T){
#   IcdToPhecode <- Phecode_combine$PheCodeDescription
# }else{
#   IcdToPhecode <- Phecode_combine$PheCode
# }
#
WrongFormat <- Conversion$Error
# error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToPhecode)], stringsAsFactors= FALSE), WrongFormat, "ICD")
# if(anyNA(IcdToPhecode)){
#   if(nrow(WrongFormat) > 0){
#     message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
#   }
#   if(sum(is.na(IcdToPhecode)) > nrow(WrongFormat)){
#     message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
#     message("\n")
#   }
#   warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
#   warning('"wrong Format" means the ICD has wrong format', call. = F)
#   warning('"wrong ICD version" means the ICD classify to wrong ICD version (phecode does not have icd10), or the icd does not have phecode ', call. = F)
# }
return(list(phecode = IcdToPhecode,
wrongICD = WrongFormat))
}
#' @source ICD-9-Phecode (version 1.2, 2015)
#' @source \url{https://phewascatalog.org/phecodes}
#' @export
#' @examples
#' DxDataFile <- data.frame(ID = c("A", "A", "A"),
#'                          ICD = c("6929", "V433", "I350"),
#'                          Date = as.Date(c("2013-03-31", "2013-01-29", "2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' IcdDxToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
#'
phecode <- IcdDxToPhecode(test,MemberID,ICD,DateServiceStarted,"2015/10/01",F)$phecode
View(phecode)
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = T){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimaltoShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
if (isCCSCategoryDescription == T) {
ccs_col <- "CCS_CATEGORY_DESCRIPTION"
}else {
ccs_col <- "CCS_CATEGORY"
}
IcdToCCS <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", ccs_col), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD",ccs_col), by = c("Short"="ICD")))
IcdToCCS <- IcdToCCS[!is.na(IcdToCCS[,ccs_col]),]
IcdToCCS <- IcdToCCS %>%
group_by_("ID",ccs_col) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
# if (isCCSCategoryDescription == T) {
#   IcdToCCS <- IcdToCCS$CCS_CATEGORY_DESCRIPTION
# }else {
#   IcdToCCS <- IcdToCCS$CCS_CATEGORY
# }
WrongFormat <- Conversion$Error
# error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCS)],stringsAsFactors = F), WrongFormat, "ICD")
#
# if(anyNA(IcdToCCS)){
#   if(nrow(WrongFormat) > 0){
#     message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
#   }
#   if(sum(is.na(IcdToCCS)) > nrow(WrongFormat)){
#     message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
#     message("\n")
#   }
#   warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
#   warning('"wrong Format" means the ICD has wrong format', call. = F)
#   warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
# }
return(list(ccs = IcdToCCS,
wrongICD = WrongFormat))
}
testCCS <- IcdDxToCCS(test,MemberID,ICD,DateServiceStarted,"2015/10/01",T)$ccs
CCS <- testCCS
View(CCS)
CCS <- IcdDxToCCS(test,MemberID,ICD,DateServiceStarted,"2015/10/01",F)$ccs
GroupedIcd <- CCS
View(GroupedIcd)
wideDf <- dcast(GroupedIcd, ID~period, value.var = c("Count"), sum)
library("reshape2", lib.loc="~/R/win-library/3.4")
wideDf <- dcast(GroupedIcd, ID~period, value.var = c("Count"))
wideDf <- dcast(GroupedIcd, ID~period, value.var = c("Count"),sum)
View(wideDf)
GroupedIcd$period %>% unique %>% length
wideDf <- dcast(GroupedIcd, ID~CCS_CATEGORY, value.var = c("Count"),sum)
GroupedIcd$CCS_CATEGORY %>% unique %>% length
wideDf[1,]
wideDf[2,]
wideDf[2095,]
start_time <- Sys.time()
wideDf <- dcast(GroupedIcd, ID~CCS_CATEGORY, value.var = c("Count"),sum)
end_time <- Sys.time()
end_time - start_time
GroupedIcd <- as.data.table(GroupedIcd)
start_time <- Sys.time()
wideDt <- dcast.data.table(GroupedIcd, ID~CCS_CATEGORY, value.var = c("Count"))
end_time <- Sys.time()
end_time - start_time
View(wideDt)
wideDt[2095,]
is.na(wideDt)
wideDt[is.na(wideDt)] <- 0L
wideDt[2095,]
wideBinaryDt <-as.data.frame(wideDf >= 1L)
View(wideBinaryDt)
wideBinaryDt$ID <- unique(DxDataFile$ID)
wideBinaryDt$ID <- unique(wideNumericDt$ID)
wideNumericDt <- dcast.data.table(GroupedIcd, ID~CCS_CATEGORY, value.var = c("Count"))
wideNumericDt[is.na(wideNumericDt)] <- 0L
wideBinaryDt <-as.data.frame(wideNumericDt >= 1L)
wideBinaryDt$ID <- unique(wideNumericDt$ID)
View(wideNumericDt)
wideNumericDt[2075,]
wideNumericDt[2095,]
View(wideBinaryDt)
wideBinaryDt <-wideNumericDt >= 1L
View(wideBinaryDt)
wideBinaryDt <-data.table(wideNumericDt >= 1L)
wideBinaryDt <-data.table(wideNumericDt[,-1] >= 1L)
View(wideBinaryDt)
View(wideBinaryDt)
wideBinaryDt <-data.table(wideNumericDt >= 1L)
wideBinaryDt$ID <- wideNumericDt$ID
start_time <- Sys.time()
wideBinaryDt <-data.table(wideNumericDt >= 1L)
wideBinaryDt$ID <- wideNumericDt$ID
end_time <- Sys.time()
end_time - start_time
