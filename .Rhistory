icd9ToPhecode
#' @param isPhecodeDescription Phecode/ description for icd9, default is True
#' @source \url{https://phewascatalog.org/phecodes}
#' @export
#' @examples
#' DxDataFile <- data.frame(ID = c("A", "A", "A"),
#'                          ICD = c("6929", "V433", "I350"),
#'                          Date = as.Date(c("2013-03-31", "2013-01-29", "2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
#'
groupIcdToPhecode <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isPhecodeDescription = TRUE){
DxDataFile <- DxDataFile[ ,c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10$ICDD <- convertIcdShortToDecimal(icd10$ICD, icd10)
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9$ICDD <- convertIcdShortToDecimal(icd9$ICD, icd9)
if(nrow(icd10) <= 0){
icd9ToPhecode <- left_join(icd9, select(phecode_icd9_2, ICDD, PheCode, PheCodeDescription),by="ICDD") %>% unique()
DxDataFile_combine <- icd9ToPhecode
}else if(nrow(icd9) <= 0){
icd10ToPhecode <- left_join(icd10, select(phecode_icd9_2, ICDD, PheCode, PheCodeDescription),by="ICDD") %>% unique()
DxDataFile_combine <- icd10ToPhecode
}else{
icd9ToPhecode <- left_join(icd9, select(phecode_icd9_2, ICDD, PheCode, PheCodeDescription),by="ICDD") %>% unique()
icd10ToPhecode <- left_join(icd10, select(phecode_icd9_2, ICDD, PheCode, PheCodeDescription),by="ICDD") %>% unique()
DxDataFile_combine <- full_join(icd9ToPhecode, icd10ToPhecode, by = c("ID", "ICD", "ICDD", "Date", "PheCode", "PheCodeDescription"))
}
DxDataFile_combine_with_originalFile <- left_join(DxDataFile, DxDataFile_combine, by = c("ID", "ICD", "Date"))
if(isPhecodeDescription == T){
IcdToPhecode <- DxDataFile_combine_with_originalFile$PheCodeDescription
}else{
IcdToPhecode <- DxDataFile_combine_with_originalFile$PheCode
}
if(anyNA(IcdToPhecode)){
message(paste0("warning ICD: ", unique(DxDataFile_combine_with_originalFile$ICD[is.na(IcdToPhecode)]), sep = "\t\n"))
warning("'NA' means phecode does not have icd10 or the data does not match the format", call. = F)
}
IcdToPhecode
}
DxDataFile
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2015-10-01", FALSE)
#' @param isCCSDescription  Clinical Classifications Software (CCS) single level categories (False) and description (True) for ICD-9 or ICD-10, default is False.
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' getConditionEra(DxDataFile, ID, ICD, Date, "2016-01-01", 30, ccs, FALSE)
#' getConditionEra(DxDataFile, ID, ICD, Date, "2016-01-01", 30, ICD, FALSE)
#'
getConditionEra <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, gapDate = 30, icdorCCS = CCS, isCCSDescription = FALSE){
DxDataFile <- DxDataFile[ ,c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
if(nrow(icd9) <= 0){
DxDataFile <- icd10
}else if(nrow(icd10) <= 0){
DxDataFile <- icd9
}else{
DxDataFile <- full_join(icd9, icd10, by = c("ID", "ICD", "Date"))
}
icdorCCS <- toupper(deparse(substitute(icdorCCS)))
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
mutate(CCS = groupIcdToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isCCSDescription)) %>%
arrange(ID, CCS, Date) %>%
group_by(ID, CCS) %>%
mutate(Gap = Date - lag(Date))
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
arrange(ID, ICD, Date) %>%
group_by(ID, ICD) %>%
mutate(Gap = Date - lag(Date))
}else{
stop("'please enter icd or ccs for 'icdorCCS'", call. = FALSE)
}
DxDataFile$episode <- DxDataFile$Gap > gapDate
DxDataFile$episode[is.na(DxDataFile$episode)] <- TRUE
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
group_by(ID, CCS) %>%
mutate(Era = cumsum(episode))
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
group_by(ID, ICD) %>%
mutate(Era = cumsum(episode))
}
DxDataFile <- select(DxDataFile, c(-"Gap", -"episode"))
DxDataFile
}
DxDataFile
getConditionEra(DxDataFile, ID, ICD, Date, "2015-10-01", 30, ccs, FALSE)
getConditionEra(DxDataFile, ID, ICD, Date, "2015-10-01", 30, icd, FALSE)
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","B","B"),
#'                          ICD=c("40201","42577","I350","K289"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#'
#' groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, TRUE)
#' groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", charlson, B, TRUE)
#' groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", elix, N, TRUE)
#'
groupIcdToComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B, groupByDate = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
comorbidMethod <- tolower(deparse(substitute(comorbidMethod)))
if (grepl("ahrq", comorbidMethod)){
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
}else if(grepl("charlson", comorbidMethod)){
comorbidMap9 <- `icd9_charlson`
comorbidMap10 <- `icd10_charlson`
}else if(grepl("elix", comorbidMethod)){
comorbidMap9 <- `icd9_elix`
comorbidMap10 <- `icd10_elix`
}
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate,])
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
icd10 <- data.frame(DxDataFile[DxDataFile$Date >= icd10usingDate,])
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
comorbidDf10 <- left_join(icd10, comorbidMap10, by = "ICD")
comorbidDf_combine <- full_join(comorbidDf9, comorbidDf10, by = c(names(comorbidMap10), "ID", "ICD", "Date", "Comorbidity", "Value"))
comorbidDf_combine$ICD <- NULL
if(groupByDate ==T){
comorbidDf_combine <- comorbidDf_combine %>% group_by(ID, Date, Comorbidity) %>% unique()
}
comorbidDf_combine_wide <- dcast(comorbidDf_combine, ID~Comorbidity, value.var = c("Value"), sum)
all_comorbidity_measures <- data.frame(matrix(nrow = length(comorbidDf_combine_wide$ID), ncol = length(unique(comorbidMap9$Comorbidity))))
names(all_comorbidity_measures) <- unique(comorbidMap9$Comorbidity)
all_comorbidity_measures <- mutate(all_comorbidity_measures, ID = comorbidDf_combine_wide$ID)
JoiningBycol <- names(comorbidDf_combine_wide[ names(comorbidDf_combine_wide) != "NA"])
combine <- right_join(all_comorbidity_measures, comorbidDf_combine_wide,by = JoiningBycol)
combine <- combine[, names(combine) != "NA"]
combine_Numeric <- combine[, c(ncol(combine), 1:(ncol(combine)-1))]
combine_Numeric[is.na(combine_Numeric)] <- 0L
if(toupper(deparse(substitute(NumericOrBinary))) == "B"){
combine_Binary <-as.data.frame(combine_Numeric >= 1L)
combine_Binary$ID <- unique(DxDataFile$ID)
return(combine_Binary)
}else if(toupper(deparse(substitute(NumericOrBinary))) == "N"){
return(combine_Numeric)
}else{
stop("'please enter N or B for 'comorbidMethod'", call. = FALSE)
}
}
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, TRUE)
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate,])
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
icd10 <- data.frame(DxDataFile[DxDataFile$Date >= icd10usingDate,])
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
icd10
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
comorbidDf9
load("~/emr/data/icd9_ahrq.rda")
View(icd9_ahrq)
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate,])
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
comorbidDf9
any(grepl("[.]",DxDataFile$ICD))
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate,])
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
icd9
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
comorbidDf9
icd10ToCCS
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
icd10ToCCS <- left_join(icd10, select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
icd9ToCCS <- left_join(icd9, select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
icd9ToCCS
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","B","B"),
#'                          ICD=c("40201","42577","I350","K289"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#'
#' groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, TRUE)
#' groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", charlson, B, TRUE)
#' groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", elix, N, TRUE)
#'
groupIcdToComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B, groupByDate = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
comorbidMethod <- tolower(deparse(substitute(comorbidMethod)))
if (grepl("ahrq", comorbidMethod)){
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
}else if(grepl("charlson", comorbidMethod)){
comorbidMap9 <- `icd9_charlson`
comorbidMap10 <- `icd10_charlson`
}else if(grepl("elix", comorbidMethod)){
comorbidMap9 <- `icd9_elix`
comorbidMap10 <- `icd10_elix`
}
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate,])
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
icd10 <- data.frame(DxDataFile[DxDataFile$Date >= icd10usingDate,])
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
if(nrow(icd9) <= 0){
comorbidDf10 <- left_join(icd10, comorbidMap10, by = "ICD")
if(any(grepl("[.]",DxDataFile$ICD))){
comorbidDf10$ICD <- convertIcdShortToDecimal(comorbidDf10$ICD, icd10)
}
comorbidDf_combine <- comorbidDf10
}else if(nrow(icd10) <= 0){
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
if(any(grepl("[.]",DxDataFile$ICD))){
comorbidDf9$ICD <- convertIcdShortToDecimal(comorbidDf9$ICD, icd9)
}
comorbidDf_combine <- comorbidDf9
}else if(nrow(icd9) > 0 & nrow(icd10) > 0){
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
comorbidDf10 <- left_join(icd10, comorbidMap10, by = "ICD")
if(any(grepl("[.]",DxDataFile$ICD))){
comorbidDf9$ICD <- convertIcdShortToDecimal(comorbidDf9$ICD, icd9)
comorbidDf10$ICD <- convertIcdShortToDecimal(comorbidDf10$ICD, icd10)
}
comorbidDf_combine <- full_join(comorbidDf9, comorbidDf10, by = c(names(comorbidMap10), "ID", "ICD", "Date", "Comorbidity", "Value"))
}
comorbidDf_combine$ICD <- NULL
if(groupByDate ==T){
comorbidDf_combine <- comorbidDf_combine %>% group_by(ID, Date, Comorbidity) %>% unique()
}
comorbidDf_combine_wide <- dcast(comorbidDf_combine, ID~Comorbidity, value.var = c("Value"), sum)
all_comorbidity_measures <- data.frame(matrix(nrow = length(comorbidDf_combine_wide$ID), ncol = length(unique(comorbidMap9$Comorbidity))))
names(all_comorbidity_measures) <- unique(comorbidMap9$Comorbidity)
all_comorbidity_measures <- mutate(all_comorbidity_measures, ID = comorbidDf_combine_wide$ID)
JoiningBycol <- names(comorbidDf_combine_wide[ names(comorbidDf_combine_wide) != "NA"])
combine <- right_join(all_comorbidity_measures, comorbidDf_combine_wide,by = JoiningBycol)
combine <- combine[, names(combine) != "NA"]
combine_Numeric <- combine[, c(ncol(combine), 1:(ncol(combine)-1))]
combine_Numeric[is.na(combine_Numeric)] <- 0L
if(toupper(deparse(substitute(NumericOrBinary))) == "B"){
combine_Binary <-as.data.frame(combine_Numeric >= 1L)
combine_Binary$ID <- unique(DxDataFile$ID)
return(combine_Binary)
}else if(toupper(deparse(substitute(NumericOrBinary))) == "N"){
return(combine_Numeric)
}else{
stop("'please enter N or B for 'comorbidMethod'", call. = FALSE)
}
}
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2015-10-01", ahrq, N, TRUE)
library("reshape2", lib.loc="~/R/win-library/3.4")
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2015-10-01", ahrq, N, TRUE)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2015-10-01", charlson, B, TRUE)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2015-10-01", elix, N, TRUE)
#' @param CCSLevel Clinical Classifications Software (CCS) multiple level
#' @param CCSLvlLabel Clinical Classifications Software (CCS) multiple level categories/ description for icd9/ 10, default is True
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToCCSLvl(DxDataFile, ID, ICD, Date, "2016-01-01", 2, TRUE)
#'
groupIcdToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, CCSLvlLabel = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
icd9ToCCSLvl <- left_join(icd9, select(ccsDxICD9, ICD, CCS_LVL_1, CCS_LVL_1_LABEL, CCS_LVL_2, CCS_LVL_2_LABEL,
CCS_LVL_3, CCS_LVL_3_LABEL, CCS_LVL_4, CCS_LVL_4_LABEL), by = "ICD") %>% unique()
if(CCSLevel < 3){
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
icd10ToCCSLvl <- left_join(icd10, select(ccsDxICD10, ICD, CCS_LVL_1, CCS_LVL_1_LABEL, CCS_LVL_2, CCS_LVL_2_LABEL),
by = "ICD") %>% unique()
DxDataFile_combine <- full_join(icd9ToCCSLvl, icd10ToCCSLvl, by = c("ID", "ICD", "Date", "CCS_LVL_1", "CCS_LVL_1_LABEL", "CCS_LVL_2", "CCS_LVL_2_LABEL"))
}else{
DxDataFile_combine <- icd9ToCCSLvl
}
DxDataFile_combine_with_originalFile <- left_join(DxDataFile,DxDataFile_combine, by = c("ID", "ICD", "Date"))
if(CCSLvlLabel == T){
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
}else{
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
}
IcdToCCSLevel <- DxDataFile_combine_with_originalFile[, CCSLevelcol]
if(anyNA(IcdToCCSLevel)){
message(paste0("warning ICD: ", unique(DxDataFile_combine_with_originalFile$ICD[is.na(IcdToCCSLevel)]), sep = "\t\n"))
warning("'NA' means icd10 CCS multiple levels are 1~2 or the data does not match the format", call. = F)
}
IcdToCCSLevel
}
groupIcdToCCSLvl(DxDataFile, ID, ICD, Date, "2010-10-01", 2, TRUE)
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
icd9ToCCSLvl <- left_join(icd9, select(ccsDxICD9, ICD, CCS_LVL_1, CCS_LVL_1_LABEL, CCS_LVL_2, CCS_LVL_2_LABEL,
CCS_LVL_3, CCS_LVL_3_LABEL, CCS_LVL_4, CCS_LVL_4_LABEL), by = "ICD") %>% unique()
icd9ToCCSLvl
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10
#' @param CCSLevel Clinical Classifications Software (CCS) multiple level
#' @param CCSLvlLabel Clinical Classifications Software (CCS) multiple level categories/ description for icd9/ 10, default is True
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToCCSLvl(DxDataFile, ID, ICD, Date, "2016-01-01", 2, TRUE)
#'
groupIcdToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, CCSLvlLabel = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
if(nrow(icd9) >= 0){
icd9ToCCSLvl <- left_join(icd9, select(ccsDxICD9, ICD, CCS_LVL_1, CCS_LVL_1_LABEL, CCS_LVL_2, CCS_LVL_2_LABEL,
CCS_LVL_3, CCS_LVL_3_LABEL, CCS_LVL_4, CCS_LVL_4_LABEL), by = "ICD") %>% unique()
DxDataFile_combine <- icd9ToCCSLvl
}else if(nrow(icd10) >= 0 & CCSLevel < 3){
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
icd10ToCCSLvl <- left_join(icd10, select(ccsDxICD10, ICD, CCS_LVL_1, CCS_LVL_1_LABEL, CCS_LVL_2, CCS_LVL_2_LABEL),
by = "ICD") %>% unique()
DxDataFile_combine <- icd10ToCCSLvl
}else{
DxDataFile_combine <- full_join(icd9ToCCSLvl, icd10ToCCSLvl, by = c("ID", "ICD", "Date",
"CCS_LVL_1", "CCS_LVL_1_LABEL", "CCS_LVL_2", "CCS_LVL_2_LABEL"))
}
DxDataFile_combine_with_originalFile <- left_join(DxDataFile,DxDataFile_combine, by = c("ID", "ICD", "Date"))
if(CCSLvlLabel == T){
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
}else{
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
}
IcdToCCSLevel <- DxDataFile_combine_with_originalFile[, CCSLevelcol]
if(anyNA(IcdToCCSLevel)){
message(paste0("warning ICD: ", unique(DxDataFile_combine_with_originalFile$ICD[is.na(IcdToCCSLevel)]), sep = "\t\n"))
warning("'NA' means icd10 CCS multiple levels are 1~2 or the data does not match the format", call. = F)
}
IcdToCCSLevel
}
groupIcdToCCSLvl(DxDataFile, ID, ICD, Date, "2010-10-01", 2, TRUE)
#' @param CCSLevel Clinical Classifications Software (CCS) multiple level
#' @param CCSLvlLabel Clinical Classifications Software (CCS) multiple level categories/ description for icd9/ 10, default is True
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToCCSLvl(DxDataFile, ID, ICD, Date, "2016-01-01", 2, TRUE)
#'
groupIcdToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, CCSLvlLabel = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
if(nrow(icd9) >= 0){
icd9ToCCSLvl <- left_join(icd9, select(ccsDxICD9, ICD, CCS_LVL_1, CCS_LVL_1_LABEL, CCS_LVL_2, CCS_LVL_2_LABEL,
CCS_LVL_3, CCS_LVL_3_LABEL, CCS_LVL_4, CCS_LVL_4_LABEL), by = "ICD") %>% unique()
if(any(grepl("[.]",DxDataFile$ICD))){
icd9ToCCSLvl$ICD <- convertIcdShortToDecimal(icd9ToCCSLvl$ICD, icd9)
}
DxDataFile_combine <- icd9ToCCSLvl
}else if(nrow(icd10) >= 0 & CCSLevel < 3){
icd10ToCCSLvl <- left_join(icd10, select(ccsDxICD10, ICD, CCS_LVL_1, CCS_LVL_1_LABEL, CCS_LVL_2, CCS_LVL_2_LABEL),
by = "ICD") %>% unique()
if(any(grepl("[.]",DxDataFile$ICD))){
icd10ToCCSLvl$ICD <- convertIcdShortToDecimal(icd10ToCCSLvl$ICD, icd10)
}
DxDataFile_combine <- icd10ToCCSLvl
}else{
if(any(grepl("[.]",DxDataFile$ICD))){
icd9ToCCSLvl$ICD <- convertIcdShortToDecimal(icd9ToCCSLvl$ICD, icd9)
icd10ToCCSLvl$ICD <- convertIcdShortToDecimal(icd10ToCCSLvl$ICD, icd10)
}
DxDataFile_combine <- full_join(icd9ToCCSLvl, icd10ToCCSLvl, by = c("ID", "ICD", "Date",
"CCS_LVL_1", "CCS_LVL_1_LABEL", "CCS_LVL_2", "CCS_LVL_2_LABEL"))
}
DxDataFile_combine_with_originalFile <- left_join(DxDataFile,DxDataFile_combine, by = c("ID", "ICD", "Date"))
if(CCSLvlLabel == T){
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
}else{
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
}
IcdToCCSLevel <- DxDataFile_combine_with_originalFile[, CCSLevelcol]
if(anyNA(IcdToCCSLevel)){
message(paste0("warning ICD: ", unique(DxDataFile_combine_with_originalFile$ICD[is.na(IcdToCCSLevel)]), sep = "\t\n"))
warning("'NA' means icd10 CCS multiple levels are 1~2 or the data does not match the format", call. = F)
}
IcdToCCSLevel
}
groupIcdToCCSLvl(DxDataFile, ID, ICD, Date, "2010-10-01", 2, TRUE)
DeliveryCCSDataLong
names(DeliveryCCSDataLong)
groupIcdToCCS (DeliveryCCSDataLong, FinalID, ICD, DateServiceStarted, "2015-10-01", TRUE)
DeliveryCCSDataLong$CCS <- groupIcdToCCS (DeliveryCCSDataLong, FinalID, ICD, DateServiceStarted, "2015-10-01", TRUE)
#' @param icd10usingDate ICD-10 using date
#' @param isCCSCategoryDescription  Clinical Classifications Software (CCS) single level categories/ description for ICD-9 or ICD-10, default is True
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
groupIcdToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
if(nrow(icd9) <= 0){
icd10ToCCS <- left_join(icd10, select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
if(any(grepl("[.]",DxDataFile$ICD))){
icd10ToCCS$ICD <- convertIcdShortToDecimal(icd10ToCCS$ICD, icd10)
}
DxDataFile_combine <- icd10ToCCS
}else if(nrow(icd10) <= 0){
icd9ToCCS <- left_join(icd9, select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
if(any(grepl("[.]",DxDataFile$ICD))){
icd9ToCCS$ICD <- convertIcdShortToDecimal(icd9ToCCS$ICD, icd9)
}
DxDataFile_combine <- icd9ToCCS
}else if(nrow(icd9) > 0 & nrow(icd10) > 0){
icd9ToCCS <- left_join(icd9, select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
icd10ToCCS <- left_join(icd10, select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
if(any(grepl("[.]",DxDataFile$ICD))){
icd9ToCCS$ICD <- convertIcdShortToDecimal(icd9ToCCS$ICD, icd9)
icd10ToCCS$ICD <- convertIcdShortToDecimal(icd10ToCCS$ICD, icd10)
}
DxDataFile_combine <- full_join(icd9ToCCS, icd10ToCCS, by = c("ID", "ICD", "Date", "CCS_CATEGORY", "CCS_CATEGORY_DESCRIPTION"))
}
DxDataFile_combine_with_originalFile <- left_join(DxDataFile, DxDataFile_combine, by = c("ID", "ICD", "Date"))
if (isCCSCategoryDescription == T) {
IcdToCCS <- DxDataFile_combine_with_originalFile$CCS_CATEGORY_DESCRIPTION
} else {
IcdToCCS <- DxDataFile_combine_with_originalFile$CCS_CATEGORY
}
if(anyNA(IcdToCCS)){
message(paste0("warning ICD: ", unique(DxDataFile_combine_with_originalFile$ICD[is.na(IcdToCCS)]), sep = "\t\n"))
warning('The ICD mentioned above matches to "NA" due to the format or other issues.',call. = F)
}
IcdToCCS
}
DeliveryCCSDataLong$CCS <- groupIcdToCCS (DeliveryCCSDataLong, FinalID, ICD, DateServiceStarted, "2015-10-01", TRUE)
load("~/emr/data/ccsDxICD9.rda")
load("~/emr/data/icd9withTwoFormat.rda")
View(icd9withTwoFormat)
View(ccsDxICD9)
DxDataFile <- DeliveryCCSDataLong
names(DeliveryCCSDataLong)
DxDataFile <- DxDataFile[,c(1,5,2)]
DxDataFile
names(DxDataFile) <- c("ID", "ICD", "Date")
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
icd10usingDate <- "2015-10-01"
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10$ICD <- convertIcdDecimaltoShort(icd10$ICD, icd10)
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9$ICD <- convertIcdDecimaltoShort(icd9$ICD, icd9)
if(nrow(icd9) <= 0){
icd10ToCCS <- left_join(icd10, select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
if(any(grepl("[.]",DxDataFile$ICD))){
icd10ToCCS$ICD <- convertIcdShortToDecimal(icd10ToCCS$ICD, icd10)
}
DxDataFile_combine <- icd10ToCCS
}else if(nrow(icd10) <= 0){
icd9ToCCS <- left_join(icd9, select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
if(any(grepl("[.]",DxDataFile$ICD))){
icd9ToCCS$ICD <- convertIcdShortToDecimal(icd9ToCCS$ICD, icd9)
}
DxDataFile_combine <- icd9ToCCS
}else if(nrow(icd9) > 0 & nrow(icd10) > 0){
icd9ToCCS <- left_join(icd9, select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
icd10ToCCS <- left_join(icd10, select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>% unique()
if(any(grepl("[.]",DxDataFile$ICD))){
icd9ToCCS$ICD <- convertIcdShortToDecimal(icd9ToCCS$ICD, icd9)
icd10ToCCS$ICD <- convertIcdShortToDecimal(icd10ToCCS$ICD, icd10)
}
DxDataFile_combine <- full_join(icd9ToCCS, icd10ToCCS, by = c("ID", "ICD", "Date", "CCS_CATEGORY", "CCS_CATEGORY_DESCRIPTION"))
}
DxDataFile_combine
View(ccsDxICD9)
DxDataFile_combine_with_originalFile <- left_join(DxDataFile, DxDataFile_combine, by = c("ID", "ICD", "Date"))
View(DxDataFile_combine)
View(DxDataFile_combine_with_originalFile)
View(DxDataFile_combine_with_originalFile)
View(DxDataFile_combine)
View(DxDataFile)
View(icd9withTwoFormat)
View(icd9ToCCS)
View(icd10ToCCS)
View(icd9)
