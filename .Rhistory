combine_with_error <- combine_with_error$Decimal
return(list(Decimal = combine_with_error, Error = error$Decimal))
}
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
load("~/emr/data/icd9withTwoFormat.rda")
load("~/emr/data/icd9withTwoFormat.rda")
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
load("~/emr/data/icd10withTwoFormat.rda")
load("~/emr/data/icd10withTwoFormat.rda")
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
DxDataFile <- data.frame(ID = c("A", "A", "A", "A" ,"A"),
ICD = c("194.4","194.9","V10.08","194.6","194.3"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-03-31", "2013-01-29")),
stringsAsFactors = FALSE)
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
DxDataFile <- data.frame(ID = c("A", "A", "A", "A" ,"A"),
ICD = c("194.4","194.9","V10.88","194.6","194.3"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-03-31", "2013-01-29")),
stringsAsFactors = FALSE)
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
DxDataFile <- data.frame(ID = c("A", "A", "A", "A" ,"A"),
ICD = c("194.4","194.9","V10.88","194.6","194.3"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-03-31", "2013-01-29")),
count = c(8,2,2,7,3),
stringsAsFactors = FALSE)
DxDataFile$Phecode <- groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
DxDataFile
DxDataFile <- data.frame(ID = c("A", "A", "A", "A" ,"A"),
ICD = c("194.4","194.9","V10.88","194.6","008"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-03-31", "2013-01-29")),
count = c(8,2,2,7,3),
stringsAsFactors = FALSE)
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
Format <- ifelse(any(grepl("[.]", DxDataFile$ICD)), "Decimal", "Short")
DxDataFile$ICDD <- convertIcdShortToDecimal(DxDataFile$ICD)$Decimal
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,] %>% unique()
icd9ToPhecode <- left_join(icd9, select(phecode_icd9_2, ICDD, PheCode, PheCodeDescription), by = "ICDD")
icd10usingDate <- "2016-01-01"
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,] %>% unique()
icd9ToPhecode <- left_join(icd9, select(phecode_icd9_2, ICDD, PheCode, PheCodeDescription), by = "ICDD")
Phecode_combine_with_originalFile <- left_join(DxDataFile, icd9ToPhecode, by =names(DxDataFile))
WrongFormat <- convertIcdShortToDecimal(DxDataFile$ICD)$Error
WrongFormat
error_ICD <- anti_join(data.frame(ICD = Phecode_combine_with_originalFile$ICD[is.na(IcdToPhecode)], stringsAsFactors= FALSE),
data.frame(ICD = WrongFormat, stringsAsFactors= FALSE), "ICD") %>% unique
IcdToPhecode
IcdToPhecode <- Phecode_combine_with_originalFile$PheCode
IcdToPhecode
Phecode_combine_with_originalFile
length(WrongFormat) > 0
View(ccsDxICD9)
DxDataFile
DxDataFile$Phecode <- groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
DxDataFile
DxDataFile <- data.frame(ID = c("A", "A", "A", "A" ,"A"),
ICD = c("194.4","194.9","V10.88","194.6","008"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-03-31", "2013-01-29")),
count = c(8,2,2,7,3),
stringsAsFactors = FALSE)
DxDataFile$Phecode <- groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
DxDataFile
mapPhecodesToExclusions(DxDataFile$Phecode,DxDataFile$ID)
mapPhecodesToExclusions(DxDataFile$Phecode[1],DxDataFile$ID[1])
pheinfo$phecode == c("227","226","193","227.2","227.3","227.1")
pheinfo$phecode == c("227")
pheinfo[pheinfo$phecode == c("227"),]
pheinfo[pheinfo$phecode == c("227","226"),]
table <- c("227","226","193","227.2","227.3","227.1")
for (phe in 1:length(table)){
pheinfo[pheinfo$phecode == phe,]
}
test <- pheinfo[pheinfo$phecode == table(1),]
pheinfo[pheinfo$phecode == table(1),]
test <- pheinfo[pheinfo$phecode == table[1],]
table <- c("227","226","193","227.2","227.3","227.1")
test <- pheinfo[pheinfo$phecode == table[1],]
for (phe in 2:length(table)){
test <- rbind(test, pheinfo[pheinfo$phecode == table[2],])
}
test
test <- pheinfo[pheinfo$phecode == table[1],]
for (phe in 2:length(table)){
test <- rbind(test, pheinfo[pheinfo$phecode == table[phe],])
}
test
table <- c("194","227","226","193","227.2","227.3","227.1")
test <- pheinfo[pheinfo$phecode == table[1],]
for (phe in 2:length(table)){
test <- rbind(test, pheinfo[pheinfo$phecode == table[phe],])
}
test
View(test)
mapPhecodesToExclusions(DxDataFile$Phecode,DxDataFile$ID)
DxDataFile <- data.frame(ID = c("A", "A", "A", "A" ,"A"),
ICD = c("194.4","194.9","V10.88","194.6","194.3"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-03-31", "2013-01-29")),
count = c(8,2,2,7,3),
stringsAsFactors = FALSE)
DxDataFile$Phecode <- groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
mapPhecodesToExclusions(DxDataFile$Phecode,DxDataFile$ID)
phecode_exclude
phecode_exclude <- phecode_exclude
View(phecode_exclude)
View(mydata)
View(genotypes)
#Plot the results
# plot_B <- phewasManhattan(results_B, annotate.angle=0,title="My Example PheWAS Manhattan Plot")
phewasManhattan(results_B)
#Plot the results
# plot_B <-
phewasManhattan(results_B, annotate.angle=0)#,title="My Example PheWAS Manhattan Plot")
#Plot the results
# plot_B <-
phewasManhattan(results_B, annotate.angle=0,title="My Example PheWAS Manhattan Plot")
#Run the PheWAS
results_B <- phewas(phenotypes,genotypes,cores=1,significance.threshold=c("bonferroni"))
phewasManhattan(results_B)
#Plot the results
# plot_B <-
phewasManhattan(results, annotate.angle=0,title="My Example PheWAS Manhattan Plot")
phewasManhattan(results)
#Plot the results
# plot_B <-
phewasManhattan(results, annotate.angle=0,title="My Example PheWAS Manhattan Plot")
#Run the PheWAS
results_B <- phewas(phenotypes,genotypes,cores=1,significance.threshold=c("bonferroni"))
results <- phewas(phenotypes,genotypes,cores=4)
mydata=merge(phenotypes,genotypes)
phewas(phenotypes=names(phenotypes)[-1],genotypes=c("rs1234","rs5678"), data=mydata)
names(phenotypes)
names(phenotypes)[-1]
names(results)
#Plot the results
# plot_B <-
phewasManhattan(results, annotate.angle=0,title="My Example PheWAS Manhattan Plot")
#Run the PheWAS
results_B <- phewas(phenotypes,genotypes,cores=1,significance.threshold=c("bonferroni"))
results_B
# #Load the PheWAS package
# library(PheWAS)
# #Set the random seed so it is replicable
# set.seed(1)
# #Generate some example data
ex <- generateExample()
# #Extract the two parts from the returned list
id.icd9.count <- ex$id.icd9.count
id.icd9.count <- id.icd9.count %>% arrange(id)
# #Load the PheWAS package
# library(PheWAS)
# #Set the random seed so it is replicable
# set.seed(1)
# #Generate some example data
ex <- generateExample()
# #Extract the two parts from the returned list
id.icd9.count <- ex$id.icd9.count
id.icd9.count <- id.icd9.count %>% arrange(id)
genotypes <- ex$genotypes
phenotypes <- createPhewasTable(id.icd9.count[1:50,],min.code.count = 5, add.exclusions = F,translate = T,aggregate.fun = sum)
#Run the PheWAS
results_B <- phewas(phenotypes,genotypes,cores=1,significance.threshold=c("bonferroni"))
results <- phewas(phenotypes,genotypes,cores=4)
#Plot the results
plot_B <- phewasManhattan(results, annotate.angle=0,title="My Example PheWAS Manhattan Plot")
plot <- phewasManhattan(results)
#Plot the results
phewasManhattan(results, annotate.angle=0,title="My Example PheWAS Manhattan Plot")
View(results)
View(results_B)
#Set the random seed so it is replicable
set.seed(1)
#Generate some example data
ex=generateExample()
#Extract the two parts from the returned list
id.icd9.count=ex$id.icd9.count
genotypes=ex$genotypes
#Create the phecode table- translates the icd9s, adds
#exclusions, and reshapes to a wide format
phenotypes=createPhewasTable(id.icd9.count)
#Run the PheWAS
results=phewas(phenotypes,genotypes,cores=1,
significance.threshold=c("bonferroni"))
View(results)
load("~/emr/data/phecode_icd9_2.rda")
phecode_icd9_2$PheCode %>% nchar<=3
phecode_icd9_2$PheCode %>% nchar<=3 %>% unique
phecode_icd9_2$PheCode[phecode_icd9_2$PheCode %>% nchar<=3 %>% unique]
phecode_icd9_2$PheCode %>% nchar<=3 %>% unique %>% length
phecode_icd9_2$PheCode[nchar(phecode_icd9_2$PheCode)<=3]
phecode_icd9_2$PheCode[nchar(phecode_icd9_2$PheCode)<=3] %>% unique
phecode_icd9_2$PheCode[nchar(phecode_icd9_2$PheCode)<=3] %>% unique %>% length
phecode_icd9_2[phecode_icd9_2$PheCode)=="008",] %>% unique %>% length
phecode_icd9_2[phecode_icd9_2$PheCode=="008",] %>% unique %>% length
phecode_icd9_2[phecode_icd9_2$PheCode=="008",] %>% unique
phecode_icd9_2[phecode_icd9_2$PheCode=="008",c("ICDD","ICDString")] %>% unique %:% arrange(ICDString)
phecode_icd9_2[phecode_icd9_2$PheCode=="008",c("ICDD","ICDString")] %>% unique %>% arrange(ICDString)
View(id.icd9.count)
View(phecode_icd9_2)
load("~/emr/data/icd10withTwoFormat.rda")
load("~/emr/data/icd9withTwoFormat.rda")
#' Convert ICD Codes From Short To Decimal Forms
#'
#' Convert codes between short and decimal forms
#'
#' @import dplyr
#'
#' @param icdList ICD codes
#'
convertIcdShortToDecimal<-function(icdList){
icdDf <- data.frame(ICD = icdList, Number = 1:length(icdList),stringsAsFactors = FALSE)
icd_Short <- data.frame(Short = icdDf$ICD[!grepl("[.]",icdDf$ICD)], Number = icdDf$Number[!grepl("[.]",icdDf$ICD)],stringsAsFactors = FALSE)
icd_Decimal <- data.frame(Decimal = icdDf$ICD[grepl("[.]",icdDf$ICD)], Number = icdDf$Number[grepl("[.]",icdDf$ICD)],stringsAsFactors = FALSE)
icd9_D <- left_join(icd_Decimal, icd9withTwoFormat, by = "Decimal")
icd10_D <- left_join(icd_Decimal, icd10withTwoFormat, by = "Decimal")
combine_D <- rbind(icd9_D[!is.na(icd9_D$Short),], icd10_D[!is.na(icd10_D$Short),])
icd9_S <- left_join(icd_Short, icd9withTwoFormat, by = "Short")
icd10_S <- left_join(icd_Short, icd10withTwoFormat, by = "Short")
combine_S <- rbind(icd9_S[!is.na(icd9_S$Decimal),], icd10_S[!is.na(icd10_S$Decimal),])
combine <- rbind(combine_D,combine_S) %>% arrange(Number)
error <- anti_join(data.frame(Decimal = icdDf$ICD, Number = icdDf$Number, stringsAsFactors = FALSE),
select(combine, Decimal, Number),
c("Number")) %>% mutate(Short = NA)
combine_with_error <- rbind(error, combine) %>% arrange(Number)
combine_with_error <- combine_with_error$Decimal
return(list(Decimal = combine_with_error, Error = error$Decimal))
}
#' @param isPhecodeDescription Phecode/ description for icd9, default is True
#' @source \url{https://phewascatalog.org/phecodes}
#' @export
#' @examples
#' DxDataFile <- data.frame(ID = c("A", "A", "A"),
#'                          ICD = c("6929", "V433", "I350"),
#'                          Date = as.Date(c("2013-03-31", "2013-01-29", "2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
#'
groupIcdToPhecode <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isPhecodeDescription = TRUE){
DxDataFile <- DxDataFile[ ,c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
Format <- ifelse(any(grepl("[.]", DxDataFile$ICD)), "Decimal", "Short")
DxDataFile$ICDD <- convertIcdShortToDecimal(DxDataFile$ICD)$Decimal
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,] %>% unique()
icd9ToPhecode <- left_join(icd9, select(phecode_icd9_2, ICDD, PheCode, PheCodeDescription), by = "ICDD")
Phecode_combine_with_originalFile <- left_join(DxDataFile, icd9ToPhecode, by =names(DxDataFile))
if(isPhecodeDescription == T){
IcdToPhecode <- Phecode_combine_with_originalFile$PheCodeDescription
}else{
IcdToPhecode <- Phecode_combine_with_originalFile$PheCode
}
WrongFormat <- convertIcdShortToDecimal(DxDataFile$ICD)$Error
error_ICD <- anti_join(data.frame(ICD = Phecode_combine_with_originalFile$ICD[is.na(IcdToPhecode)], stringsAsFactors= FALSE),
data.frame(ICD = WrongFormat, stringsAsFactors= FALSE), "ICD") %>% unique
if(anyNA(IcdToPhecode)){
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
}
if(sum(is.na(IcdToPhecode)) > length(WrongFormat)){
if(Format == "Short"){
message(paste0("warning ICD: ", convertIcdDecimaltoShort(error_ICD$ICD)$Short, sep = "\t\n"))
}else{
message(paste0("warning ICD: ", error_ICD, sep = "\t\n"))
}
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"warning ICD" means the ICD classify to wrong ICD version (phecode does not have icd10) ', call. = F)
}
IcdToPhecode
}
DxDataFile <- data.frame(ID = c("A", "A", "A","A","A"),
ICD = c("194.4", "194.9", "V10.88","194.6","194.3"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-01-29", "2013-03-10")),
stringsAsFactors = FALSE)
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
DxDataFile$Phecode<- groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
DxDataFile$PheDescriptoin<- groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", T)
DxDataFile
DxDataFile$Date <- NULL
DxDataFile
#' @param minimumINRofDays Minimum interval of Days, defaults is 30 days (one month)
#' @param maximumINRofDays Maximum interval of Days, defaults is 365 days (one year)
#' @export
#' @examples
#' DxDataFile <- data.frame(ID = c("A", "A", "A", "A"),
#'                          ICD = c("I072","I071", "I072", "I071"),
#'                          Date = as.Date(c("2016-03-31", "2016-01-29", "2016-02-10", "2018-03-10")),
#'                          stringsAsFactors = FALSE)
#' selectCases("^I0", DxDataFile, ID, ICD, Date, 2)
#'
selectCases <- function(greplICD, DxDataFile, idColName, icdColName, dateColName, ICDNumber, minimumINRofDays = 30, maximumINRofDays = 365){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
Format <- ifelse(any(grepl("[.]", DxDataFile$ICD)), "Decimal", "Short")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)$Short
CaseCount <- DxDataFile %>% filter(grepl(greplICD, ICD)) %>%
arrange(ID, ICD, Date) %>%
group_by(ID,ICD) %>%
mutate(Gap = Date - lag(Date)) %>%
mutate(InTimeINR = Gap >= minimumINRofDays & Gap < maximumINRofDays)
CaseCount$InTimeINR[is.na(CaseCount$InTimeINR)] <- TRUE
CaseCountInTimeINR <- CaseCount %>% filter(InTimeINR == T) %>%
group_by(ID, ICD) %>%
mutate(CaseNum = cumsum(InTimeINR)) %>%
filter(CaseNum >= ICDNumber) %>%
select(ID,ICD,Date)
WrongFormat <- convertIcdDecimaltoShort(DxDataFile$ICD)$Error
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
warning('"wrong Format" means the ICD has wrong format', call. = F)
}
CaseCountInTimeINR
}
selectCases("^I0", DxDataFile, ID, ICD, Date, 2)
DxDataFile <- data.frame(ID = c("A", "A", "A","A","A"),
ICD = c("194.4", "194.9", "V10.88","194.6","194.3"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-01-29", "2013-03-10")),
stringsAsFactors = FALSE)
DxDataFile$PheDescriptoin<- groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", T)
selectCases("^I0", DxDataFile, ID, ICD, Date, 2)
#' Convert ICD Codes From Decimal To Short Forms
#'
#' Convert codes between short and decimal forms
#'
#' @import dplyr
#'
#' @param icdList ICD codes
#'
convertIcdDecimaltoShort<-function(icdList){
icdDf <- data.frame(ICD = icdList, Number = 1:length(icdList),stringsAsFactors = FALSE)
icd_Short <- data.frame(Short = icdDf$ICD[!grepl("[.]",icdDf$ICD)], Number = icdDf$Number[!grepl("[.]",icdDf$ICD)],stringsAsFactors = FALSE)
icd_Decimal <- data.frame(Decimal = icdDf$ICD[grepl("[.]",icdDf$ICD)], Number = icdDf$Number[grepl("[.]",icdDf$ICD)],stringsAsFactors = FALSE)
icd9_D <- left_join(icd_Decimal, icd9withTwoFormat, by = "Decimal")
icd10_D <- left_join(icd_Decimal, icd10withTwoFormat, by = "Decimal")
combine_D <- rbind(icd9_D[!is.na(icd9_D$Short),], icd10_D[!is.na(icd10_D$Short),])
icd9_S <- left_join(icd_Short, icd9withTwoFormat, by = "Short")
icd10_S <- left_join(icd_Short, icd10withTwoFormat, by = "Short")
combine_S <- rbind(icd9_S[!is.na(icd9_S$Decimal),], icd10_S[!is.na(icd10_S$Decimal),])
combine <- rbind(combine_D,combine_S) %>% arrange(Number)
error <- anti_join(data.frame(Short = icdDf$ICD, Number = icdDf$Number, stringsAsFactors = FALSE),
select(combine, Short, Number),
c("Number")) %>% mutate(Decimal = NA)
combine_with_error <- rbind(error, combine) %>% arrange(Number)
combine_with_error <- combine_with_error$Short
return(list(Short = combine_with_error, Error = error$Short))
}
selectCases("^I0", DxDataFile, ID, ICD, Date, 2)
DxDataFile <- data.frame(ID = c("A", "A", "A","A","A"),
ICD = c("194.4", "194.9", "V10.88","194.9","194.3"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-04-29", "2013-03-10")),
stringsAsFactors = FALSE)
selectCases("^I0", DxDataFile, ID, ICD, Date, 2)
DxDataFile <- data.frame(ID = c("A", "A", "A","A","A"),
ICD = c("194.4", "194.9", "V10.88","194.9","194.3"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2013-03-10","2013-04-29", "2013-03-10")),
stringsAsFactors = FALSE)
selectCases("^I0", DxDataFile, ID, ICD, Date, 2)
selectCases("^194", DxDataFile, ID, ICD, Date, 2)
DxDataFile <- data.frame(ID = c("A", "A", "B", "B"),
ICD = c("40201", "42577", "I350", "K289"),
Date = as.Date(c("2013-03-31", "2013-01-29", "2016-03-10", "2016-03-10")),
stringsAsFactors = FALSE)
#' Convert ICD Codes From Decimal To Short Forms
#'
#' Convert codes between short and decimal forms
#'
#' @import dplyr
#'
#' @param icdList ICD codes
#'
convertIcdDecimaltoShort<-function(icdList){
icdDf <- data.frame(ICD = icdList, Number = 1:length(icdList),stringsAsFactors = FALSE)
icd_Short <- data.frame(Short = icdDf$ICD[!grepl("[.]",icdDf$ICD)], Number = icdDf$Number[!grepl("[.]",icdDf$ICD)],stringsAsFactors = FALSE)
icd_Decimal <- data.frame(Decimal = icdDf$ICD[grepl("[.]",icdDf$ICD)], Number = icdDf$Number[grepl("[.]",icdDf$ICD)],stringsAsFactors = FALSE)
icd9_D <- left_join(icd_Decimal, icd9withTwoFormat, by = "Decimal")
icd10_D <- left_join(icd_Decimal, icd10withTwoFormat, by = "Decimal")
combine_D <- rbind(icd9_D[!is.na(icd9_D$Short),], icd10_D[!is.na(icd10_D$Short),])
icd9_S <- left_join(icd_Short, icd9withTwoFormat, by = "Short")
icd10_S <- left_join(icd_Short, icd10withTwoFormat, by = "Short")
combine_S <- rbind(icd9_S[!is.na(icd9_S$Decimal),], icd10_S[!is.na(icd10_S$Decimal),])
combine <- rbind(combine_D,combine_S) %>% arrange(Number)
error <- anti_join(data.frame(Short = icdDf$ICD, Number = icdDf$Number, stringsAsFactors = FALSE),
select(combine, Short, Number),
c("Number")) %>% mutate(Decimal = NA)
combine_with_error <- rbind(error, combine) %>% arrange(Number)
combine_with_error <- combine_with_error$Short
return(list(Short = combine_with_error, Error = error$Short))
}
#' @param icd10usingDate ICD-10 using date
#' @param isCCSCategoryDescription  Clinical Classifications Software (CCS) single level categories/ description for ICD-9 or ICD-10, default is True
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
groupIcdToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
Format <- ifelse(any(grepl("[.]", DxDataFile$ICD)), "Decimal", "Short")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)$Short
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,] %>% unique()
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,] %>% unique()
icd9ToCCS <- left_join(icd9, select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
icd10ToCCS <- left_join(icd10, select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD")
CCS_combine <- rbind(icd9ToCCS, icd10ToCCS)
CCS_combine_with_originalFile <- left_join(DxDataFile, CCS_combine, by = c("ID", "ICD", "Date"))
if (isCCSCategoryDescription == T) {
IcdToCCS <- CCS_combine_with_originalFile$CCS_CATEGORY_DESCRIPTION
} else {
IcdToCCS <- CCS_combine_with_originalFile$CCS_CATEGORY
}
WrongFormat <- convertIcdDecimaltoShort(DxDataFile$ICD)$Error
error_ICD <- anti_join(data.frame(ICD = CCS_combine_with_originalFile$ICD[is.na(IcdToCCS)], stringsAsFactors= FALSE),
data.frame(ICD = WrongFormat, stringsAsFactors= FALSE), "ICD") %>% unique
if(anyNA(IcdToCCS)){
if(length(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat), sep = "\t\n"))
}
if(sum(is.na(IcdToCCS)) > length(WrongFormat)){
if(Format == "Decimal"){
message(paste0("warning ICD: ", convertIcdShortToDecimal(error_ICD$ICD)$Decimal, sep = "\t\n"))
}else{
message(paste0("warning ICD: ", error_ICD, sep = "\t\n"))
}
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"warning ICD" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
IcdToCCS
}
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
library("dplyr", lib.loc="~/R/win-library/3.4")
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
load("~/emr/data/ccsDxICD10.rda")
load("~/emr/data/ccsDxICD9.rda")
load("~/emr/data/icd10withTwoFormat.rda")
load("~/emr/data/icd9withTwoFormat.rda")
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
load("~/emr/data/ccsDxICD10.rda")
load("~/emr/data/ccsDxICD9.rda")
load("~/emr/data/icd9withTwoFormat.rda")
load("~/emr/data/icd10withTwoFormat.rda")
setwd("~/emr")
devtools::document()
devtools::check()
pkgdown::build_site()
load("~/emr/data/ccsDxICD10.rda")
load("~/emr/data/ccsPrICD10.rda")
View(ccsDxICD10)
View(ccsPrICD10)
View(ccsPrICD10)
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::check()
load("C:/Users/makiz/Documents/P-Dx/PheWAS/ccsICD9_pr.rda")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::check()
pkgdown::build_site()
load("~/emr/data/ccsPrICD9.rda")
View(ccsPrICD9)
read_csv("~/P-Pr/data/csv/CCS ICD10/pr_icd10.csv")
library(readr)
library(dplyr)
library(stringr)
ccsPrSingleICD9<-read_csv("~/P-Pr/data/csv/S_pr_ICD9_2015.csv",col_names=T,skip=1)
PrICD10_pc <- read_csv("~/P-Pr/data/csv/pc_icd10pcs_2018_1/pc_icd10pcs_2018.csv")
View(PrICD10_pc)
PrICD10_pc <- read_csv("~/P-Pr/data/csv/pc_icd10pcs_2018_1/pc_icd10pcs.csv",col_names=T)
View(PrICD10_pc)
PrICD10_pc <- read_csv("~/P-Pr/data/csv/pc_icd10pcs_2018_1/pc_icd10pcs.csv",col_names = F)
PrICD10_pc <- read_csv("~/P-Pr/data/csv/pc_icd10pcs_2018_1/pc_icd10pcs.csv",col_names=T,skip=1)
ccsPrSingleICD9<-read_csv("~/P-Pr/data/csv/S_pr_ICD9_2015.csv",col_names=T,skip=1)
View(ccsPrSingleICD9)
removeRedundantChar<-function(csvfile){
csvfile %>% mutate_all(funs(gsub("^'|'$|\\ '$|\\ $|\\ $","",.)))
}
# 20180417 missingValue
imputeMissingValue<-function(csvfile,missingValueCol,imputeValueCol,missingDescCol,imputeDescCol){
for (i in 1:nrow(csvfile)){
if(csvfile[i,missingValueCol]==""){
csvfile[i,missingValueCol]<-csvfile[i,imputeValueCol]
csvfile[i,missingDescCol]<-csvfile[i,imputeDescCol]
}
}
csvfile
}
View(ccsPrICD10)
colnames(PrICD10_pc)<-gsub("-| ","_",colnames(PrICD10_pc))
colnames(PrICD10_pc)<-gsub("'$|^'","",colnames(PrICD10_pc))
colnames(PrICD10_pc)<-gsub("_10_PCS_CODE|MULTI_","",colnames(PrICD10_pc))
PrICD10_pc$ICD_10_CM_CODE %>% unique
PrICD10_pc<-removeRedundantChar(PrICD10_pc)
PrICD10_pc$ICD_10_CM_CODE %>% unique %>% length
PrICD10_pc$ICD_10_CM_CODE_DESCRIPTION %>% unique %>% length
PrICD10_pc$ICD_10_CM_CODE_DESCRIPTION %>% unique
procedureClassPrICD10 <- PrICD10_pc
save(procedureClassPrICD10,file="procedureClassPrICD10.rda",compress='xz')
PC_PrICD10 <- procedureClassPrICD10
save(PC_PrICD10,file="PC_PrICD10.rda",compress='xz')
PcPrICD10 <- PC_PrICD10
save(PcPrICD10,file="PcPrICD10.rda",compress='xz')
pkgdown::build_site()
