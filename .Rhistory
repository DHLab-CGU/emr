allWrongVersion <- rbind(wrongVersion_D, wrongVersion_S)
allWrongVersionMsg<- rbind(wrongVersionMsg_D, wrongVersionMsg_S)
}else if(exists("wrongVersion_D")){
allWrongVersion <- wrongVersion_D
allWrongVersionMsg <- wrongVersionMsg_D
}else if(exists("wrongVersion_S")){
allWrongVersion <- wrongVersion_S
allWrongVersionMsg<- wrongVersionMsg_S
}
if(exists("allWrongVersion") && exists("allWrongFormat")){
allWrongICD <- rbind(allWrongFormat, allWrongVersion)
allWrongICDMsg <- rbind(allWrongFormatMsg[,WrongType:="Wrong format"],
allWrongVersionMsg[,WrongType:="Wrong version"])
}else if(exists("allWrongVersion")){
allWrongICD <- allWrongVersion
allWrongICDMsg <- allWrongVersionMsg[,WrongType:="Wrong version"]
}else if(exists("allWrongFormat")){
allWrongICD <- allWrongFormat
allWrongICDMsg <- allWrongFormatMsg[,WrongType:="Wrong format"]
}
if(exists("allWrongFormatMsg") && length(grepl("9", allWrongFormatMsg$IcdVersionInFile))>0){
ICD9wrongFormatMsg <- allWrongFormatMsg[grepl("9", allWrongFormatMsg$IcdVersionInFile),]
ICD9wrongFormatMsg <- ICD9wrongFormatMsg[, Suggestion :=paste0(ICD9wrongFormatMsg[,ICD], "9")]
ICD9wrongFormatSuggested <- rbind(merge(ICD9wrongFormatMsg[grepl("[.]", ICD9wrongFormatMsg$Suggestion),],
ICD9DxwithTwoFormat, by.x = "Suggestion", by.y = "Decimal", nomatch = T)[,-"Short"],
merge(ICD9wrongFormatMsg[!grepl("[.]", ICD9wrongFormatMsg$Suggestion),],
ICD9DxwithTwoFormat, by.x = "Suggestion", by.y = "Short", nomatch = T)[,-"Decimal"])
noSuggestedWrongFormat <- allWrongICDMsg[!ICD9wrongFormatSuggested, on = c("ICD","IcdVersionInFile")][, Suggestion :=""]
allWrongICDMsg <- rbind(noSuggestedWrongFormat, ICD9wrongFormatSuggested)
}
allShortFormat <- rbind(StoS, DtoS)
if(nrow(allShortFormat) < nrow(DxDataFile)){
if(exists("allWrongFormat")){
message(paste0("Wrong ICD format: total ",nrow(allWrongFormatMsg)," ICD codes (the number of occurrences is in brackets)"))
allWrongFormatMsg <- allWrongFormatMsg[order(count,decreasing = T),]
message(head(allWrongFormatMsg[,list(wrongFormat= paste0(ICD," (",count,")","")),],10))
message(("\t"))
}
if(exists("allWrongVersion")){
message(paste0("Wrong ICD version: total ",nrow(allWrongVersionMsg)," ICD codes (the number of occurrences is in brackets)"))
allWrongVersionMsg <- allWrongVersionMsg[order(count,decreasing = T),]
message(head(allWrongVersionMsg[,list(wrongFormat= paste0(ICD," (",count,")","")),], 10))
message(("\t"))
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"Wrong ICD format" means the ICD has wrong format', call. = F)
warning('"Wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
combine_with_error <- rbind(allWrongICD, allShortFormat)[order(Number),"ICD"]
return(list(ICD = combine_with_error,
Error = allWrongICDMsg[order(count,decreasing = T),]))
}else{
return(list(ICD = allShortFormat[order(Number),"ICD"]))
}
}
library("data.table", lib.loc="~/R/win-library/3.4")
groupingTable <- data.frame(group = rep("Heart failure",6),
ICD = c("428.0","428.1","428.2","428.3","428.4","428.9"),
stringsAsFactors = FALSE)
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
sampleDxFile
View(sampleDxFile)
groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
stringsAsFactors = FALSE)
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
CustomGroup
groupingTable <- data.frame(group = rep("Heart failure",6),
ICD = c("428.0","428.1","428.2","428.3","428.4","428.9"),
stringsAsFactors = FALSE)
DxDataFile
DxDataFile = sampleDxFile
CustomGroupingTable = groupingTable
customICD <- as.data.table(DxDataFile)
customICD
customICD[,c("Date", "Number") := list(as.Date(Date), 1:nrow(customICD))]
customICD
groupedICD <- merge(customICD, CustomGroupingTable, by = "ICD", all.x = T)
groupedICD
groupedICD <- groupedICD[order(Number),-"Number"]
groupedICD
groupedICDLong <- groupedICD[!is.na(group),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = list(ID, group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
groupedICDLong <- groupedICD[!is.na(group),]
groupedICDLong
groupedICDLong
sum(groupedICD$group)
groupedICD$group
anyNA(groupedICD)
!anyNA(groupedICD)
!anyNA(groupedICD$group)
test <- c(NA,NA,NA)
!anyNA(test)
test <- c(NA,NA,NA,0)
!anyNA(test)
anyNA(test)
is.na(test)
!is.na(test)
sum(!is.na(test))
groupedICD
sum(!is.na(groupedICD$group)) > 0
#' @param CustomGroupingTable Grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group" and "ICD"
#' @export
#' @examples
#' head(sampleDxFile)
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' IcdDxToCustom(sampleDxFile, ID, ICD, Date,
#'               CustomGroupingTable = groupingTable)
#'
IcdDxToCustom <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
customICD <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
customICD <- customICD[,DataCol,with = FALSE]
names(customICD) <- c("ID", "ICD", "Date")
customICD[,c("Date", "Number") := list(as.Date(Date), 1:nrow(customICD))]
groupedICD <- merge(customICD, CustomGroupingTable, by = "ICD", all.x = T)
groupedICD <- groupedICD[order(Number),-"Number"]
if(sum(!is.na(groupedICD$group)) > 0){
groupedICDLong <- groupedICD[!is.na(group),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = list(ID, group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = groupedICD,
summarised_groupedDT = groupedICDLong))
}else{
return("There is no match diagnostic code with the groupingTable")
}
}
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
CustomGroup
IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
#' @param CustomGroupingTable Grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group" and "ICD"
#' @export
#' @examples
#' head(sampleDxFile)
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' IcdDxToCustom(sampleDxFile, ID, ICD, Date,
#'               CustomGroupingTable = groupingTable)
#'
IcdDxToCustom <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
customICD <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
customICD <- customICD[,DataCol,with = FALSE]
names(customICD) <- c("ID", "ICD", "Date")
customICD[,c("Date", "Number") := list(as.Date(Date), 1:nrow(customICD))]
groupedICD <- merge(customICD, CustomGroupingTable, by = "ICD", all.x = T)
groupedICD <- groupedICD[order(Number),-"Number"]
if(sum(!is.na(groupedICD$group)) > 0){
groupedICDLong <- groupedICD[!is.na(group),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = list(ID, group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = groupedICD,
summarised_groupedDT = groupedICDLong))
}else{
return(warning("There is no match diagnostic code with the groupingTable"))
}
}
IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
CustomGroup
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
#' @param CustomGroupingTable Grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group" and "ICD"
#' @export
#' @examples
#' head(sampleDxFile)
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' IcdDxToCustom(sampleDxFile, ID, ICD, Date,
#'               CustomGroupingTable = groupingTable)
#'
IcdDxToCustom <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
customICD <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
customICD <- customICD[,DataCol,with = FALSE]
names(customICD) <- c("ID", "ICD", "Date")
customICD[,c("Date", "Number") := list(as.Date(Date), 1:nrow(customICD))]
groupedICD <- merge(customICD, CustomGroupingTable, by = "ICD", all.x = T)
groupedICD <- groupedICD[order(Number),-"Number"]
if(sum(!is.na(groupedICD$group)) > 0){
groupedICDLong <- groupedICD[!is.na(group),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = list(ID, group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = groupedICD,
summarised_groupedDT = groupedICDLong))
}else{
warning("There is no match diagnostic code with the groupingTable")
}
}
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
#' @param CustomGroupingTable Grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group" and "ICD"
#' @export
#' @examples
#' head(sampleDxFile)
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' IcdDxToCustom(sampleDxFile, ID, ICD, Date,
#'               CustomGroupingTable = groupingTable)
#'
IcdDxToCustom <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
customICD <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
customICD <- customICD[,DataCol,with = FALSE]
names(customICD) <- c("ID", "ICD", "Date")
customICD[,c("Date", "Number") := list(as.Date(Date), 1:nrow(customICD))]
groupedICD <- merge(customICD, CustomGroupingTable, by = "ICD", all.x = T)
groupedICD <- groupedICD[order(Number),-"Number"]
if(sum(!is.na(groupedICD$group)) > 0){
groupedICDLong <- groupedICD[!is.na(group),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = list(ID, group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = groupedICD,
summarised_groupedDT = groupedICDLong))
}else{
warning("There is no match diagnostic code with the groupingTable")
return(groupedICD)
}
}
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
View(CustomGroup)
grepTable <- data.frame(group = "Heart failure",
grepIcd  = "^428",
stringsAsFactors = FALSE)
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = grepTable)
DxDataFile
GrepedIcd <- as.data.table(DxDataFile)
CustomGroupingTable = grepTable
CustomGroupingTable <- as.data.table(CustomGroupingTable)
GrepedIcd[,c("Date", "Number", "group") := list(as.Date(Date), 1:nrow(GrepedIcd), "")]
GrepedIcd
for (rule in 1:nrow(CustomGroupingTable)){
GrepedIcd$group<-ifelse(grepl(CustomGroupingTable[rule,"grepIcd"],GrepedIcd[,ICD]), CustomGroupingTable[rule,group], GrepedIcd[,group])
}
GrepedIcd
GrepedIcd <- GrepedIcd[order(Number),-"Number"]
GrepedIcd
GrepedIcd$group
nchar(GrepedIcd$group)
nchar(GrepedIcd$group) > 0
sum(nchar(GrepedIcd$group) > 0)>0
#' @param CustomGroupingTable grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group", "grepIcd"
#' @export
#' @examples
#' head(sampleDxFile)
#' grepTable <- data.frame(group = "Cardiac dysrhythmias",
#'                         grepIcd = "^427|^I48",
#'                         stringsAsFactors = FALSE)
#' IcdDxToCustomGrep(sampleDxFile, ID, ICD, Date,
#'                   CustomGroupingTable = grepTable)
#'
IcdDxToCustomGrep <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
GrepedIcd <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol  <-c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
GrepedIcd <- GrepedIcd[,DataCol,with = FALSE]
names(GrepedIcd) <- c("ID", "ICD", "Date")
GrepedIcd[,c("Date", "Number", "group") := list(as.Date(Date), 1:nrow(GrepedIcd), "")]
for (rule in 1:nrow(CustomGroupingTable)){
GrepedIcd$group<-ifelse(grepl(CustomGroupingTable[rule,"grepIcd"],GrepedIcd[,ICD]), CustomGroupingTable[rule,group], GrepedIcd[,group])
}
if(sum(nchar(GrepedIcd$group) > 0) > 0){
GrepedIcdLong <- GrepedIcd[nchar(group)>0,
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = list(ID,group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = GrepedIcd[order(Number),-"Number"],
summarised_groupedDT = GrepedIcdLong))
}else{
warning("There is no match diagnostic code with the grepTable")
return(GrepedIcd[order(Number),-"Number"])
}
}
#' @param CustomGroupingTable grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group", "grepIcd"
#' @export
#' @examples
#' head(sampleDxFile)
#' grepTable <- data.frame(group = "Cardiac dysrhythmias",
#'                         grepIcd = "^427|^I48",
#'                         stringsAsFactors = FALSE)
#' IcdDxToCustomGrep(sampleDxFile, ID, ICD, Date,
#'                   CustomGroupingTable = grepTable)
#'
IcdDxToCustomGrep <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
GrepedIcd <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol  <-c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
GrepedIcd <- GrepedIcd[,DataCol,with = FALSE]
names(GrepedIcd) <- c("ID", "ICD", "Date")
GrepedIcd[,c("Date", "Number", "group") := list(as.Date(Date), 1:nrow(GrepedIcd), "")]
for (rule in 1:nrow(CustomGroupingTable)){
GrepedIcd$group<-ifelse(grepl(CustomGroupingTable[rule,"grepIcd"],GrepedIcd[,ICD]), CustomGroupingTable[rule,group], GrepedIcd[,group])
}
if(sum(nchar(GrepedIcd$group) > 0) > 0){
GrepedIcdLong <- GrepedIcd[nchar(group)>0,
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = list(ID,group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = GrepedIcd[order(Number),-"Number"],
summarised_groupedDT = GrepedIcdLong))
}else{
warning("There is no match diagnostic code with the grepTable")
return(GrepedIcd[order(Number),-"Number"])
}
}
CustomGroup <- IcdDxToCustomGrep(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = grepTable)
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = grepTable)
load("~/emr/data/dxICD10.rda")
View(dxICD10)
load("~/emr/data/ccsDxICD10.rda")
View(ccsDxICD10)
install.packages("digest")
devtools::install_github("DHLab-CGU/emr")
install.packages("ggplot2")
devtools::install_github("DHLab-CGU/emr")
install.packages("pkgload")
devtools::install_github("DHLab-CGU/emr")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("DHLab-CGU/emr")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("DHLab-CGU/emr")
library("emr", lib.loc="~/R/win-library/3.4")
selectedCaseFile <- selectCases(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl2,
caseCondition = "Diseases of the urinary system",
caseCount = 1)
groupedDataWide <- groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015-10-01",
groupDataType = elix,
numericOrBinary = B,
selectedCaseFile = selectedCaseFile)
plot3 <- plot_groupedData(groupedDataWide = groupedDataWide,
TopN = 10,
limitPercentage = 0.01,
pvalue = 0.05)
plot3
devtools::check()
install.packages("purrr")
library(purrr)
devtools::install_github("BenGlicksberg/ROMOP")
splitedData
indexDateTable <- data.frame(ID = c("A0","B0","C0","D0"),
indexDate = c("2023-08-12", "2015-12-26",
"2015-12-05", "2017-01-29"),
stringsAsFactors = FALSE)
sampleDxFile <- sampleDxFile[grepl("A0|B0|C0|D0",ID),]
splitedData <- splitDataByDate(sampleDxFile, ID, ICD, Date,
indexDateFile = indexDateTable,
Gap = 30)
devtools::check()
setwd("~/emr")
devtools::check()
splitedData
splitedData <- splitDataByDate(sampleDxFile, ID, ICD, Date,
indexDateFile = indexDateTable,
Gap = 30)
splitedData[6:11,]
splitedData
sampleDxFile <- sampleDxFile[grepl("A0|B0|C0|D0",ID),]
splitedData <- splitDataByDate(sampleDxFile, ID, ICD, Date,
indexDateFile = indexDateTable,
Gap = 30)
splitedData[6:11,]
pkgdown::build_site()
Era <- getConditionEra(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015/10/01",
groupDataType = CCS,
gapDate = 30)
head(Era)
Era <- getConditionEra(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015/10/01",
isDescription = F,
groupDataType = CCS,
gapDate = 30)
head(Era)
groupedData_Wide <- groupedDataLongToWide(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015-10-01",
groupDataType = charlson,
numericOrBinary = B)
head(groupedData_Wide, 5)
groupedData_Wide <- groupedDataLongToWide(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015-10-01",
groupDataType = charlson,
isDescription = FALSE,
numericOrBinary = B)
head(groupedData_Wide, 5)
head(groupedData_Wide)
groupedData_Wide <- groupedDataLongToWide(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015-10-01",
groupDataType = elix,
isDescription = FALSE,
numericOrBinary = B)
head(groupedData_Wide)
sampleDxFile
load("~/emr/data/sampleDxFile.rda")
groupedData_Wide <- groupedDataLongToWide(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015-10-01",
groupDataType = charlson,
isDescription = FALSE,
numericOrBinary = B)
head(groupedData_Wide)
groupedData_Wide <- groupedDataLongToWide(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015-10-01",
groupDataType = charlson,
isDescription = FALSE,
numericOrBinary = N)
head(groupedData_Wide)
Era <- getConditionEra(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015/10/01",
groupDataType = CCS,
isDescription = FALSE,
gapDate = 30)
head(Era)
library(ROMOP)
library("ROMOP", lib.loc="~/R/win-library/3.4")
ptDemo <- getDemographics(patient_list=NULL,declare=TRUE)
makeDataOntology(declare = FALSE, store_ontology = FALSE)
