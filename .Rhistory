groupDataType <- names(groupedData)[ncol(groupedData)]
groupByCol <- c("ID",groupDataType)
count <- groupedData[nchar(eval(parse(text = paste(groupDataType)))) > 0  & !is.na(eval(parse(text = paste(groupDataType))))][order(eval(parse(text = paste(groupByCol))),Date)][,NextDate := c(Date[-1],NA),by = groupByCol][is.na(NextDate),NextDate := Date][,Gap := NextDate- Date]
conditionEra <- count[,episode := Gap > gapDate][is.na(episode),episode :=TRUE][,list(episodeCount = cumsum(episode)+1,
firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = groupByCol][,era := max(episodeCount),by = groupByCol][,period := endCaseDate - firstCaseDate,][,-"episodeCount"]
conditionEra <- unique(conditionEra)
if(!is.null(selectedCaseFile)){
conditionEra <- merge(conditionEra, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
conditionEra<- conditionEra[order(eval(parse(text = paste(groupByCol)))),]
conditionEra
}
getConditionEra(sampleDxFile, ID, ICD, Date, "2015-10-01",
groupDataType = CCSlvl2,
selectedCaseFile = selectedCaseFile)
gapDate
selectedCaseFile
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl2,
caseCondition = "Diseases of the heart",
ICDNumber = 5)
groupDataType
groupDataType <- "ccslvl2"
DxDataFile
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile[,"Date"] <- as.Date(DxDataFile[,Date])
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType != "icd"){
groupedData <- groupedData$groupedDT
}
groupedData
groupDataType
groupDataType <- names(groupedData)[ncol(groupedData)]
groupByCol <- c("ID",groupDataType)
groupByCol
count <- groupedData[nchar(eval(parse(text = paste(groupDataType)))) > 0  & !is.na(eval(parse(text = paste(groupDataType))))][order(eval(parse(text = paste(groupByCol))),Date)][,NextDate := c(Date[-1],NA),by = groupByCol][is.na(NextDate),NextDate := Date][,Gap := NextDate- Date]
count
count
conditionEra <- count[,episode := Gap > gapDate][is.na(episode),episode :=TRUE][,list(episodeCount = cumsum(episode)+1,
firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = groupByCol][,era := max(episodeCount),by = groupByCol][,period := endCaseDate - firstCaseDate,][,-"episodeCount"]
count
View(conditionEra)
View(count)
conditionEra
conditionEra <- unique(conditionEra)
conditionEra
merge(conditionEra, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
conditionEra <- merge(conditionEra, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
conditionEra
conditionEra<- conditionEra[order(eval(parse(text = paste(groupByCol)))),]
conditionEra
getConditionEra(sampleDxFile, ID, ICD, Date, "2015-10-01",
groupDataType = CCSlvl3,
selectedCaseFile = selectedCaseFile)
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl3,
caseCondition = "Shock",
ICDNumber = 2)
selectedCaseFile
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl3,
caseCondition = "Diaphragmatic hernia",
ICDNumber = 2)
selectedCaseFile
getConditionEra(sampleDxFile, ID, ICD, Date, "2015-10-01",
groupDataType = CCSlvl3,
selectedCaseFile = selectedCaseFile)
selectedCaseFile
getConditionEra(sampleDxFile, ID, ICD, Date, "2015-10-01",
groupDataType = CCSlvl3,
selectedCaseFile = selectedCaseFile)
function (x, y, by = NULL, by.x = NULL, by.y = NULL, all = FALSE,
all.x = all, all.y = all, sort = TRUE, suffixes = c(".x",
".y"), no.dups = TRUE, allow.cartesian = getOption("datatable.allow.cartesian"),
...)
selectedCaseFile
groupDataType = "CCSlvl3"
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile[,"Date"] <- as.Date(DxDataFile[,Date])
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupDataType = "CCSlvl3"
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
groupDataType
groupMethod
groupDataType = "ccslvl3"
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType != "icd"){
groupedData <- groupedData$groupedDT
}
groupedData
groupDataType <- names(groupedData)[ncol(groupedData)]
groupByCol <- c("ID",groupDataType)
groupByCol
count <- groupedData[nchar(eval(parse(text = paste(groupDataType)))) > 0  & !is.na(eval(parse(text = paste(groupDataType))))][order(eval(parse(text = paste(groupByCol))),Date)][,NextDate := c(Date[-1],NA),by = groupByCol][is.na(NextDate),NextDate := Date][,Gap := NextDate- Date]
count
count
conditionEra <- count[,episode := Gap > gapDate][is.na(episode),episode :=TRUE][,list(episodeCount = cumsum(episode)+1,
firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = groupByCol][,era := max(episodeCount),by = groupByCol][,period := endCaseDate - firstCaseDate,][,-"episodeCount"]
conditionEra <- unique(conditionEra)
if(!is.null(selectedCaseFile)){
conditionEra <- merge(conditionEra, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
conditionEra<- conditionEra[order(eval(parse(text = paste(groupByCol)))),]
selectedCaseFile
conditionEra
selectedCase
selectedCaseFile
selectedCaseFile[,list(ID, selectedCase)]
merge(conditionEra, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
conditionEra <- merge(conditionEra, selectedCaseFile[,list(ID, selectedCase)])#, all.x = T)
conditionEra
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl3,
caseCondition = "Shock",
ICDNumber = 2)
getConditionEra(sampleDxFile, ID, ICD, Date, "2015-10-01",
groupDataType = CCSlvl3,
selectedCaseFile = selectedCaseFile)
selectedCaseFile
groupedData
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
groupDataType = "ccslvl3"
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
groupedData
groupDataType
groupedData
if(groupDataType != "icd"){
groupedData <- groupedData$groupedDT
}
groupedData
groupDataType <- names(groupedData)[ncol(groupedData)]
groupDataType
groupByCol <- c("ID",groupDataType)
count <- groupedData[nchar(eval(parse(text = paste(groupDataType)))) > 0  & !is.na(eval(parse(text = paste(groupDataType))))][order(eval(parse(text = paste(groupByCol))),Date)][,NextDate := c(Date[-1],NA),by = groupByCol][is.na(NextDate),NextDate := Date][,Gap := NextDate- Date]
count
count
conditionEra <- count[,episode := Gap > gapDate][is.na(episode),episode :=TRUE][,list(episodeCount = cumsum(episode)+1,
firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = groupByCol][,era := max(episodeCount),by = groupByCol][,period := endCaseDate - firstCaseDate,][,-"episodeCount"]
conditionEra
conditionEra <- unique(conditionEra)
conditionEra
!is.null(selectedCaseFile)
merge(conditionEra, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
conditionEra<- conditionEra[order(eval(parse(text = paste(groupByCol)))),]
conditionEra
if(!is.null(selectedCaseFile)){
conditionEra <- merge(conditionEra, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
conditionEra <- conditionEra[order(eval(parse(text = paste(groupByCol)))),]
conditionEra
groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl3,
numericOrBinary = N,
selectedCaseFile = selectedCaseFile)
barplot
barplot()
bar <- barplot(m <- rowMeans(y) * 10, ylim=c(0, 10))
bar <- graphics::barplot(m <- rowMeans(y) * 10, ylim=c(0, 10))
set.seed(1410)
y <- matrix(runif(30), ncol=3, dimnames=list(letters[1:10], LETTERS[1:3]))
plot(y[,1], y[,2])
bar <- graphics::barplot(m <- rowMeans(y) * 10, ylim=c(0, 10))
y
load("~/emr/data/ccsDxICD10.rda")
load("~/emr/data/ccsDxICD9.rda")
load("~/emr/data/ICD10DxwithTwoFormat.rda")
load("~/emr/data/ICD9DxwithTwoFormat.rda")
load("~/emr/data/sampleDxFile.rda")
#' @param icd10usingDate icd 10 using date
#' @source \url{https://www.findacode.com/search/search.php}
#' @source \url{https://www.cms.gov/Medicare/Quality-Initiatives-Patient-Assessment-Instruments/HospitalQualityInits/Downloads/HospitalAppendix_F.pdf}
#' @source \url{https://www.cms.gov/Medicare/Coding/ICD9ProviderDiagnosticCodes/codes.html}
#' @source \url{https://www.cms.gov/Medicare/Coding/ICD10/2019-ICD-10-CM.html}
#' @export
#' @examples
#' head(sampleDxFile)
#' IcdDxDecimalToShort(sampleDxFile,ICD,Date, "2015/10/01")
#'
IcdDxDecimalToShort<-function(DxDataFile, icdColName, dateColName, icd10usingDate){
DataCol <- c(deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ICD", "Date")
DxDataFile[,"Date"] <- as.Date(DxDataFile[,Date])
DxDataFile[,Number:=1:nrow(DxDataFile)]
icd_Decimal <- DxDataFile[grepl("[.]",DxDataFile$ICD),]
icd9D <- merge(icd_Decimal[Date < icd10usingDate], ICD9DxwithTwoFormat, by.x = "ICD", by.y = "Decimal", all.x = T)
icd10D <- merge(icd_Decimal[Date >= icd10usingDate], ICD10DxwithTwoFormat, by.x = "ICD", by.y = "Decimal", all.x = T)
if(nrow(icd9D[is.na(Short),-"Short"]) > 0 | nrow(icd10D[is.na(Short),-"Short"])>0){
icd9DNA <- merge(icd9D[is.na(Short),-"Short"],ICD10DxwithTwoFormat,by.x = "ICD",by.y = "Decimal",all.x = T)
icd10DNA <- merge(icd10D[is.na(Short),-"Short"],ICD9DxwithTwoFormat,by.x = "ICD",by.y = "Decimal",all.x = T)
icd9DwrongFormat <- icd9DNA[is.na(Short), list(count = .N),by = ICD]
icd10DwrongFormat <- icd10DNA[is.na(Short), list(count = .N),by = ICD]
icd9DWrongVer <- icd9DNA[!is.na(Short), list(count = .N),by = ICD]
icd10DWrongVer <- icd10DNA[!is.na(Short), list(count = .N),by = ICD]
if(nrow(icd9DwrongFormat) > 0){
wrongFormatMsg_D <- icd9DwrongFormat[,IcdVersionInFile:="ICD 9"]
wrongFormat_D <- icd9DNA[is.na(Short),-"Short"]
if(nrow(icd10DwrongFormat) > 0){
icd10DwrongFormat <- icd10DwrongFormat[,IcdVersionInFile:="ICD 10"]
wrongFormatMsg_D <- rbind(wrongFormatMsg_D,icd10DwrongFormat)
wrongFormat_D <- rbind(wrongFormat_D, icd10DNA[is.na(Short),-"Short"])
}
}else if(nrow(icd10DwrongFormat) > 0){
wrongFormatMsg_D <- icd10DwrongFormat[,IcdVersionInFile:="ICD 10"]
wrongFormat_D <- icd10DNA[is.na(Short),-"Short"]
}else{
wrongFormatMsg_D <- NA
wrongFormat_D <- NA
}
if(nrow(icd9DWrongVer) > 0){
wrongVersionMsg_D <- icd9DWrongVer[,IcdVersionInFile:="ICD 9"]
wrongVersion_D <- icd9DNA[!is.na(Short),-"Short"]
if(nrow(icd10DWrongVer) > 0){
icd10DWrongVer <- icd10DWrongVer[,IcdVersionInFile:="ICD 10"]
wrongVersionMsg_D <- rbind(wrongVersionMsg_D,icd10DWrongVer)
wrongVersion_D <- rbind(wrongVersion_D,icd10DNA[!is.na(Short),-"Short"])
}
}else if(nrow(icd10DWrongVer) > 0){
wrongVersionMsg_D <- icd10DWrongVer[,IcdVersionInFile:="ICD 10"]
wrongVersion_D <- icd10DNA[!is.na(Short),-"Short"]
}else{
wrongVersionMsg_D <-NA
wrongVersion_D <- NA
}
}else{
wrongFormatMsg_D <- NA
wrongFormat_D <- NA
wrongVersionMsg_D <-NA
wrongVersion_D <- NA
}
icd_Short <- DxDataFile[!icd_Decimal, on = "Number"]
icd9S <- merge(icd_Short[Date < icd10usingDate], ICD9DxwithTwoFormat, by.x = "ICD", by.y = "Short", all.x = T)
icd10S <- merge(icd_Short[Date >= icd10usingDate], ICD10DxwithTwoFormat, by.x = "ICD", by.y = "Short", all.x = T)
if(nrow(icd9S[is.na(Decimal),-"Decimal"]) > 0 | nrow(icd10S[is.na(Decimal),-"Decimal"]) > 0){
icd9SNA <- merge(icd9S[is.na(Decimal),-"Decimal"], ICD10DxwithTwoFormat,by.x = "ICD",by.y = "Short",all.x = T)
icd10SNA <- merge(icd10S[is.na(Decimal),-"Decimal"], ICD9DxwithTwoFormat,by.x = "ICD",by.y = "Short",all.x = T)
icd9SwrongFormat <- icd9SNA[is.na(Decimal), list(count = .N),by = ICD]
icd10SwrongFormat <- icd10SNA[is.na(Decimal), list(count = .N),by = ICD]
icd9SWrongVer <- icd9SNA[!is.na(Decimal), list(count = .N),by = ICD]
icd10SWrongVer <- icd10SNA[!is.na(Decimal), list(count = .N),by = ICD]
if(nrow(icd9SwrongFormat) > 0){
wrongFormatMsg_S <- icd9SwrongFormat[,IcdVersionInFile:="ICD 9"]
wrongFormat_S <- icd9SNA[is.na(Decimal),-"Decimal"]
if(nrow(icd10SwrongFormat) > 0){
icd10SwrongFormat<- icd10SwrongFormat[,IcdVersionInFile:="ICD 10"]
wrongFormatMsg_S<- rbind(wrongFormatMsg_S,icd10SwrongFormat)
wrongFormat_S <- rbind(wrongFormat_S,icd10SNA[is.na(Decimal),-"Decimal"])
}
}else if(nrow(icd10SwrongFormat) > 0){
wrongFormatMsg_S<- icd10SwrongFormat[,IcdVersionInFile:="ICD 10"]
wrongFormat_S <- icd10SNA[is.na(Decimal),-"Decimal"]
}else{
wrongFormatMsg_S<-NA
wrongFormat_S <- NA
}
if(nrow(icd9SWrongVer) > 0){
wrongVersionMsg_S <-icd9SWrongVer[,IcdVersionInFile:="ICD 9"]
wrongVersion_S <- icd9SNA[!is.na(Decimal),-"Decimal"]
if(nrow(icd10SWrongVer) > 0){
icd10SWrongVer <- icd10SWrongVer[,IcdVersionInFile:="ICD 10"]
wrongVersionMsg_S <- rbind(wrongVersionMsg_S,icd10SWrongVer)
wrongVersion_S <- rbind(wrongVersion_S,icd10SNA[!is.na(Decimal),-"Decimal"])
}
}else if(nrow(icd10SWrongVer) > 0){
wrongVersionMsg_S <- icd10SWrongVer[,IcdVersionInFile:="ICD 10"]
wrongVersion_S <- icd10SNA[!is.na(Decimal),-"Decimal"]
}else{
wrongVersionMsg_S <-NA
wrongVersion_S <- NA
}
}else{
wrongFormatMsg_S<-NA
wrongFormat_S <- NA
wrongVersionMsg_S <-NA
wrongVersion_S <- NA
}
if(!is.null(nrow(wrongFormat_D))){
allWrongFormat <- wrongFormat_D
allWrongFormatMsg <- wrongFormatMsg_D[,WrongType:="Wrong format"][order(count,decreasing = T),]
if(!is.null(nrow(wrongFormat_S))){
allWrongFormat <- rbind(allWrongFormat,wrongFormat_S)
wrongFormatMsg_S <- wrongFormatMsg_S[,WrongType:="Wrong format"]
allWrongFormatMsg<- rbind(allWrongFormatMsg,wrongFormatMsg_S)[order(count,decreasing = T),]
}
}else if(!is.null(nrow(wrongFormat_S))){
allWrongFormat <- wrongFormat_S
allWrongFormatMsg<- wrongFormatMsg_S[,WrongType:="Wrong format"][order(count,decreasing = T),]
}else{
allWrongFormat <- NA
allWrongFormatMsg <- NA
}
if(!is.null(nrow(wrongVersion_D))){
allWrongVersion <- wrongVersion_D
allWrongVersionMsg <- wrongVersionMsg_D[,WrongType:="Wrong version"][order(count,decreasing = T),]
if(!is.null(nrow(wrongVersion_S))){
allWrongVersion <- rbind(allWrongVersion, wrongVersion_S)
wrongVersionMsg_S <- wrongVersionMsg_S[,WrongType:="Wrong version"]
allWrongVersionMsg<- rbind(allWrongVersionMsg, wrongVersionMsg_S)[order(count,decreasing = T),]
}
}else if(!is.null(nrow(wrongVersion_S))){
allWrongVersion <- wrongVersion_S
allWrongVersionMsg<- wrongVersionMsg_S[,WrongType:="Wrong version"][order(count,decreasing = T),]
}else{
allWrongVersion <- NA
allWrongVersionMsg <- NA
}
if(!is.null(nrow(allWrongFormat))){
allWrongICD <- allWrongFormat
allWrongICDMsg <- allWrongFormatMsg[order(count,decreasing = T),]
if(!is.null(nrow(allWrongVersion))){
allWrongICD <- rbind(allWrongFormat,allWrongVersion)
allWrongICDMsg <- rbind(allWrongFormatMsg,allWrongVersionMsg)[order(count,decreasing = T),]
}
}else if(!is.null(nrow(allWrongVersion))){
allWrongICD <- allWrongVersion
allWrongICDMsg <- allWrongVersionMsg[order(count,decreasing = T),]
}else{
allWrongICD <- NA
allWrongICDMsg <- NA
}
if(!anyNA(wrongFormatMsg_S) | !anyNA(wrongFormatMsg_D)){
ICD9wrongFormatMsg <- allWrongICDMsg[grepl("format",allWrongICDMsg$WrongType) & grepl("9",allWrongICDMsg$IcdVersionInFile),]
ICD9wrongFormatMsg <- ICD9wrongFormatMsg[,Suggestion :=paste0(ICD9wrongFormatMsg[,ICD],"9")]
ICD9wrongFormatSuggested <- rbind(merge(ICD9wrongFormatMsg[grepl("[.]",ICD9wrongFormatMsg$Suggestion),],
ICD9DxwithTwoFormat,by.x = "Suggestion",by.y = "Decimal",nomatch = T)[,-"Short"],
merge(ICD9wrongFormatMsg[!grepl("[.]",ICD9wrongFormatMsg$Suggestion),],
ICD9DxwithTwoFormat,by.x = "Suggestion",by.y = "Short",nomatch = T)[,-"Decimal"])
noSuggestedWrongFormat <- allWrongICDMsg[!ICD9wrongFormatSuggested,on = c("ICD","IcdVersionInFile")][,Suggestion :=""]
allWrongICDMsg <- rbind(noSuggestedWrongFormat,ICD9wrongFormatSuggested)[order(count,decreasing = TRUE)]
}
DtoS <- rbind(icd9D[!is.na(Short),-"ICD"], icd10D[!is.na(Short),-"ICD"])
setnames(DtoS,"Short","ICD")
StoS <- rbind(icd9S[!is.na(Decimal),-"Decimal"],icd10S[!is.na(Decimal),-"Decimal"])
allShortFormat <- rbind(StoS, DtoS)
if(nrow(allShortFormat) < nrow(DxDataFile)){
if(!is.null(nrow(allWrongFormat))){
message(paste0("Wrong ICD format: total ",nrow(allWrongFormatMsg)," ICD codes (the number of occurrences is in brackets)"))
message(head(allWrongFormatMsg[,list(wrongFormat= paste0(ICD," (",count,")","")),],10))
message(("\t"))
}
if(!is.null(nrow(allWrongVersion))){
message(paste0("Wrong ICD version: total ",nrow(allWrongVersionMsg)," ICD codes (the number of occurrences is in brackets)"))
message(head(allWrongVersionMsg[,list(wrongFormat= paste0(ICD," (",count,")","")),], 10))
message(("\t"))
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"Wrong format" means the ICD has wrong format', call. = F)
warning('"Wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
combine_with_error <- rbind(allWrongICD, allShortFormat)[order(Number),"ICD"]
return(list(ICD = combine_with_error,
Error = allWrongICDMsg))
}else{
return(list(ICD = allShortFormat[order(Number),"ICD"]))
}
}
#' @export
#' @source ICD-9-CM CCS (2015)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#' head(sampleDxFile)
#' IcdDxToCCS(sampleDxFile, ID, ICD, Date, "2015-10-01", TRUE)
#'
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isDescription = TRUE){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile[,"Date"] <- as.Date(DxDataFile[,Date])
DxDataFile[,Number:=1:nrow(DxDataFile)]
Conversion <- IcdDxDecimalToShort(DxDataFile,ICD,Date,icd10usingDate)
DxDataFile[,Short:= Conversion$ICD]
if (isDescription == T) {
ccs_col <- "CCS_CATEGORY_DESCRIPTION"
}else {
ccs_col <- "CCS_CATEGORY"
}
IcdToCCS <- rbind(merge(DxDataFile[Date <icd10usingDate],ccsDxICD9[,c("ICD",ccs_col), with = F],by.x ="Short",by.y = "ICD",all.x = T),
merge(DxDataFile[Date >=icd10usingDate],ccsDxICD10[,c("ICD",ccs_col), with = F],by.x ="Short",by.y = "ICD",all.x = T))
IcdToCCS <- IcdToCCS[order(Number),-"Number"]
IcdToCCSLong <- IcdToCCS[!is.na(eval(parse(text = paste(ccs_col)))),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = c("ID",ccs_col)][,period := (endCaseDate - firstCaseDate),]
return(list(groupedDT = IcdToCCS,
groupedData_Long = IcdToCCSLong,
Error = Conversion$Error))
}
head(sampleDxFile)
IcdDxToCCS(sampleDxFile, ID, ICD, Date, "2015-10-01", TRUE)
CCS <- IcdDxToCCS(sampleDxFile, ID, ICD, Date, "2015-10-01", TRUE)
CCS$groupedData_Long
CCS$groupedData_Long
CCS$groupedData_Long$CCS_CATEGORY_DESCRIPTION %>% unique
x <- matrix(ncol = 3,dimnames = list(CCS$groupedData_Long$CCS_CATEGORY_DESCRIPTION %>% unique,LETTERS[1:3]))
x <- matrix(36,ncol = 3,dimnames = list(CCS$groupedData_Long$CCS_CATEGORY_DESCRIPTION %>% unique,LETTERS[1:3]))
matrix
x <- matrix(nrow = 12,ncol = 3,dimnames = list(CCS$groupedData_Long$CCS_CATEGORY_DESCRIPTION %>% unique,LETTERS[1:3]))
x
x[1]
x$A
x
x[A]
x[1]<-1
x
x[1]<-1:3
x[1:3]<-1:3
x
x[1:12]<-1:2
x
x[25:36]<-5:6
x[13:24]<-3:4
graphics::pairs(x)
x[1:12]<-1:5
x[1:12]<-1:12
graphics::pairs(x)
x[13:24]<-200:202
graphics::pairs(x)
x
groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl3,
numericOrBinary = N)
CCSlvl<- groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl3,
numericOrBinary = N)
DxDataFile
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date,
#'                                 icd10usingDate = "2015/10/01",
#'                                 groupDataType = ccslvl2,
#'                                 caseCondition = "Diseases of the heart",
#'                                 ICDNumber = 5)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
#'                       icd10usingDate = "2015/10/01",
#'                       groupDataType = ccslvl3,
#'                       numericOrBinary = N)
#'
DxDataFile <- sampleDxFile
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType
groupDataType = "ccslvl3"
isDescription = TRUE
selectedCaseFile = NULL
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
icd10usingDate = "2015/10/01"
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType != "icd"){
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[2]
}
groupDataType
groupedData
groupedData
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt
CCSlvl<- groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl3,
numericOrBinary = N)
melt(CCSlvl)
View(y)
View(x)
CCSlvl
graphics::pairs(CCSlvl)
as.matrix(CCSlvl)
graphics::pairs(CCSlvl)
graphics::pairs(as.matrix(CCSlvl))
CCSlvl
graphics::barplot(CCSlvl)
graphics::barplot(1:10)
graphics::barplot(x)
graphics::barplot(as.matrix(CCSlvl))
graphics::barplot(as.matrix(CCSlvl),legend(CCSlvl$ID))
graphics::barplot(as.matrix(CCSlvl),legend = CCSlvl$ID)
graphics::barplot(as.matrix(CCSlvl),legend = CCSlvl$ID)
load("C:/Users/makiz/Documents/data/DeliveryCCSDataLong.rda")
View(DeliveryCCSDataLong)
load("C:/Users/makiz/Documents/data/FactIcdMomCCS.rda")
View(DeliveryCCSDataLong)
View(FactIcdMomCCS)
View(ICD10DxwithTwoFormat)
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readxl)
X11116 <- read_excel("C:/Users/makiz/Desktop/11116.xlsx")
View(X11116)
View(X11116)
