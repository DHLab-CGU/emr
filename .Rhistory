groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable[Group %in% "Undifferentiated connective tissue disease",], # 僅使用一列
caseCondition = "Undifferentiated connective tissue disease",                              # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
groupedData
groupMethodSelect <- function(dxDataFile, idColName, icdColName, dateColName, icdVerColName = NULL, icd10usingDate = NULL, groupMethod = ccs, customGroupingTable, isDescription){
dxDataFile <- as.data.table(dxDataFile)
if(deparse(substitute(icdVerColName)) != "NULL"){
dataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)), deparse(substitute(icdVerColName)))
dxDataFile <- dxDataFile[, dataCol, with = FALSE]
names(dxDataFile) <- c("ID", "ICD", "Date", "Version")
}else{
dataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
dxDataFile <- dxDataFile[, dataCol, with = FALSE]
names(dxDataFile) <- c("ID", "ICD", "Date")
}
dxDataFile[,"Date"] <- as.Date(dxDataFile[,Date])
if(groupMethod == "CCS"){
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- icdDxToCCS(dxDataFile, ID, ICD, Date, Version, NULL, isDescription)
}else{
groupedData <- icdDxToCCS(dxDataFile, ID, ICD, Date, NULL, icd10usingDate, isDescription)
}
}else if(grepl("CCSLVL" ,groupMethod)){
CCSLevel <- as.numeric(sub("[A-Za-z]+","",groupMethod))
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- icdDxToCCSLvl(dxDataFile, ID, ICD, Date, Version, NULL, CCSLevel, isDescription)
}else{
groupedData <- icdDxToCCSLvl(dxDataFile, ID, ICD, Date, NULL, icd10usingDate, CCSLevel, isDescription)
}
}else if(groupMethod == "PHEWAS"){
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- icdDxToPheWAS(dxDataFile, ID, ICD, Date, Version, NULL, isDescription)
}else{
groupedData <- icdDxToPheWAS(dxDataFile, ID, ICD, Date, NULL, icd10usingDate, isDescription)
}
}else if(groupMethod == "AHRQ"){
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- icdDxToComorbid(dxDataFile, ID, ICD, Date, Version, NULL, ahrq, isDescription)
}else{
groupedData <- icdDxToComorbid(dxDataFile, ID, ICD, Date, NULL, icd10usingDate, ahrq, isDescription)
}
}else if(groupMethod == "CHARLSON"){
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- icdDxToComorbid(dxDataFile, ID, ICD, Date, Version, NULL, charlson, isDescription)
}else{
groupedData <- icdDxToComorbid(dxDataFile, ID, ICD, Date, NULL, icd10usingDate, charlson, isDescription)
}
}else if(groupMethod == "ELIX"){
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- icdDxToComorbid(dxDataFile, ID, ICD, Date, Version, NULL, elix, isDescription)
}else{
groupedData <- icdDxToComorbid(dxDataFile, ID, ICD, Date, NULL, icd10usingDate, elix, isDescription)
}
}else if(groupMethod == "CUSTOMGREPICDGROUP"){
groupedData <- icdDxToCustomGrep(dxDataFile, ID, ICD, Date, customGroupingTable)
}else if(groupMethod == "CUSTOMICDGROUP"){
groupedData <- icdDxToCustom(dxDataFile, ID, ICD, Date, customGroupingTable)
}else if(groupMethod == "ICD"){
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- dxDataFile[, Short :=icdDxDecimalToShort(dxDataFile, ICD, Date, icdVerColName = Version)$ICD]
}else{
groupedData <- dxDataFile[, Short :=icdDxDecimalToShort(dxDataFile, ICD, Date, icd10usingDate = icd10usingDate)$ICD]
}
}else{
stop("'please enter `ccs`,`ccslvl`, `PheWAS`, `ahrq`, `charlson`, `elix` `customgrepicdgroup`, `customicdgroup` for 'groupMethod'", call. = FALSE)
}
groupedData
}
icdDxToCustomGrep <- function(dxDataFile, idColName, icdColName, dateColName, customGroupingTable){
GrepedIcd <- as.data.table(dxDataFile)
customGroupingTable <- as.data.table(customGroupingTable)
dataCol  <-c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
GrepedIcd <- GrepedIcd[,dataCol,with = FALSE]
names(GrepedIcd) <- c("ID", "ICD", "Date")
GrepedIcd[,c("Date", "Number", "Group") := list(as.Date(Date), 1:nrow(GrepedIcd), NA)]
ifelse(is.na(GrepedIcd$Date), stop("NA is detected. Please make sure all values in ICD column are non-null and in the correct date format."),GrepedIcd$Date)
ifelse(is.na(GrepedIcd$ICD), stop("NA is detected. Please make sure all values in ICD column are non-null."),GrepedIcd$ICD)
for (rule in 1:nrow(customGroupingTable)){
GrepedIcd$Group<-ifelse(grepl(customGroupingTable[rule,"grepIcd"],GrepedIcd$ICD), customGroupingTable[rule,Group], GrepedIcd$Group)
}
if(sum(!is.na(GrepedIcd$Group)) > 0){
summarisedGrepedIcd <- GrepedIcd[nchar(Group)>0,
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = list(ID,Group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = GrepedIcd[order(Number),-"Number"],
summarised_groupedDT = summarisedGrepedIcd))
}else{
warning("There is no match diagnostic code with the grepTable")
return(groupedDT = GrepedIcd[order(Number),-"Number"])
}
}
test_Partial <-
selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable[Group %in% "Undifferentiated connective tissue disease",], # 僅使用一列
caseCondition = "Undifferentiated connective tissue disease",                              # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
View(test_Partial)
test_Whole <-
selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable,                              # 使用整個表格
caseCondition = "Undifferentiated connective tissue disease", # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
View(test_Whole)
View(test_Partial)
View(test_Whole)
selectCases <- function(dxDataFile, idColName, icdColName, dateColName, icdVerColName = NULL, icd10usingDate = NULL, groupDataType = CCS, customGroupingTable, isDescription = TRUE, caseCondition, caseCount = 2, periodRange = c(30, 365), caseName = "Selected"){
dxDataFile <- as.data.table(dxDataFile)
if(deparse(substitute(icdVerColName)) != "NULL"){
dataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)), deparse(substitute(icdVerColName)))
dxDataFile <- dxDataFile[,dataCol, with = FALSE]
names(dxDataFile) <- c("ID", "ICD", "Date", "Version")
}else{
dataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
dxDataFile <- dxDataFile[,dataCol, with = FALSE]
names(dxDataFile) <- c("ID", "ICD", "Date")
}
dxDataFile[,"Date"] <- as.Date(format(dxDataFile[,Date]))
nonCaseName <- paste0("non-",caseName)
semiCaseName <- paste0(caseName,"*")
groupDataType <- toupper(deparse(substitute(groupDataType)))
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- groupMethodSelect(dxDataFile, idColName = ID, icdColName = ICD, dateColName = Date,
icdVerColName = Version, groupMethod = groupDataType, customGroupingTable = customGroupingTable, isDescription = isDescription)
}else{
groupedData <- groupMethodSelect(dxDataFile, idColName = ID, icdColName = ICD, dateColName = Date,
icd10usingDate = icd10usingDate, groupMethod = groupDataType, customGroupingTable = customGroupingTable, isDescription = isDescription)
}
if(groupDataType != "ICD"){
groupedData <- groupedData$groupedDT
names(groupedData) <- gsub("Short|Decimal", "UNIICD", names(groupedData))
}else{
names(groupedData) <- gsub("Short|Decimal", "UNIICD", names(groupedData))
}
groupDataType <- names(groupedData)[ncol(groupedData)]
groupByCol <- c("ID",groupDataType)
if (groupDataType == "UNIICD"){
Case <- unique(groupedData[grepl(caseCondition, groupedData[,eval(parse(text = paste(groupDataType)))])|grepl(caseCondition, groupedData[,ICD]),][order(ID, Date)]) # EVERY ICD IS UNIQUEs
}else{
Case <- unique(groupedData[grepl(toupper(caseCondition), toupper(groupedData[,eval(parse(text = paste(groupDataType)))])),][order(ID, Date)]) # EVERY ICD only ONCE at ONE DAY
}
if(nrow(Case) > 0){
CaseMostICD <- Case[,list(MostCommonICDCount = .N),by = list(ID,ICD)][order(MostCommonICDCount, decreasing = TRUE),][!duplicated(ID),]
setnames(CaseMostICD, "ICD", "MostCommonICD")
if(caseCount > 1){
chosenCase <- Case[, endCaseDate := shift(Date, caseCount -1 , type = "lead"), by = "ID"][is.na(endCaseDate), endCaseDate := Date][, period := endCaseDate - Date, by = "ID"][,mark := ifelse(between(period, periodRange[1], periodRange[2], incbounds = TRUE), 1,0)][order(mark, decreasing = TRUE),][!duplicated(ID),]
chosenCase <- chosenCase[,selectedCase := ifelse(mark == 1, caseName, semiCaseName)][,c("ID", "selectedCase"),with=FALSE]
}else{
chosenCase <- Case[,selectedCase := caseName][,c("ID", "selectedCase"),with=FALSE][!duplicated(ID),]
}
chosenCase
# CaseCount <- Case[, c("firstCaseDate","endCaseDate") := list(min(Date), max(Date)), by = "ID"][,period := endCaseDate - firstCaseDate,]
# CaseCount <- unique(CaseCount, by = c('ID', 'Date'))
# CaseCount <- CaseCount[,count := .N, by = ID][,-"Date"][!duplicated(ID), c("ID", "firstCaseDate", "endCaseDate", "count", "period")]
}else{
nonSelectedCase <- dxDataFile[,list(ID)][,selectedCase := nonCaseName][!duplicated(ID),][order(ID),]
message("No matching Case")
return(nonSelectedCase)
}
CaseCount
#
#   selectedCase <- merge(CaseCount, CaseMostICD, "ID") # allow.cartesian = TRUE
#   selectedCase <- merge(selectedCase, chosenCase, "ID")  # allow.cartesian = TRUE
#   nonSelectedCase <- dxDataFile[!Case, on = "ID", list(ID)][,selectedCase := nonCaseName][!duplicated(ID),]
#
#   allData <- rbindlist(list(nonSelectedCase, selectedCase),fill = TRUE, use.names = TRUE)[order(MostCommonICDCount,decreasing = TRUE),]
#   allData <- allData[,c("ID","selectedCase","count","firstCaseDate","endCaseDate","period","MostCommonICD","MostCommonICDCount")]
#   allData <- unique(allData)
#   allData
}
test_part <- icdDxToCustomGrep(test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
customGroupingTable)
test_whole <- icdDxToCustomGrep(test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
grepTable)
View(test_Partial)
test_Partial <-
selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable[Group %in% "Undifferentiated connective tissue disease",], # 僅使用一列
caseCondition = "Undifferentiated connective tissue disease",                              # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
test_Whole <-
selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable,                              # 使用整個表格
caseCondition = "Undifferentiated connective tissue disease", # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
selectCases <- function(dxDataFile, idColName, icdColName, dateColName, icdVerColName = NULL, icd10usingDate = NULL, groupDataType = CCS, customGroupingTable, isDescription = TRUE, caseCondition, caseCount = 2, periodRange = c(30, 365), caseName = "Selected"){
dxDataFile <- as.data.table(dxDataFile)
if(deparse(substitute(icdVerColName)) != "NULL"){
dataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)), deparse(substitute(icdVerColName)))
dxDataFile <- dxDataFile[,dataCol, with = FALSE]
names(dxDataFile) <- c("ID", "ICD", "Date", "Version")
}else{
dataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
dxDataFile <- dxDataFile[,dataCol, with = FALSE]
names(dxDataFile) <- c("ID", "ICD", "Date")
}
dxDataFile[,"Date"] <- as.Date(format(dxDataFile[,Date]))
nonCaseName <- paste0("non-",caseName)
semiCaseName <- paste0(caseName,"*")
groupDataType <- toupper(deparse(substitute(groupDataType)))
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- groupMethodSelect(dxDataFile, idColName = ID, icdColName = ICD, dateColName = Date,
icdVerColName = Version, groupMethod = groupDataType, customGroupingTable = customGroupingTable, isDescription = isDescription)
}else{
groupedData <- groupMethodSelect(dxDataFile, idColName = ID, icdColName = ICD, dateColName = Date,
icd10usingDate = icd10usingDate, groupMethod = groupDataType, customGroupingTable = customGroupingTable, isDescription = isDescription)
}
if(groupDataType != "ICD"){
groupedData <- groupedData$groupedDT
names(groupedData) <- gsub("Short|Decimal", "UNIICD", names(groupedData))
}else{
names(groupedData) <- gsub("Short|Decimal", "UNIICD", names(groupedData))
}
groupDataType <- names(groupedData)[ncol(groupedData)]
groupByCol <- c("ID",groupDataType)
if (groupDataType == "UNIICD"){
Case <- unique(groupedData[grepl(caseCondition, groupedData[,eval(parse(text = paste(groupDataType)))])|grepl(caseCondition, groupedData[,ICD]),][order(ID, Date)]) # EVERY ICD IS UNIQUEs
}else{
Case <- unique(groupedData[grepl(toupper(caseCondition), toupper(groupedData[,eval(parse(text = paste(groupDataType)))])),][order(ID, Date)]) # EVERY ICD only ONCE at ONE DAY
}
if(nrow(Case) > 0){
CaseMostICD <- Case[,list(MostCommonICDCount = .N),by = list(ID,ICD)][order(MostCommonICDCount, decreasing = TRUE),][!duplicated(ID),]
setnames(CaseMostICD, "ICD", "MostCommonICD")
if(caseCount > 1){
chosenCase <- Case[, endCaseDate := shift(Date, caseCount -1 , type = "lead"), by = "ID"][is.na(endCaseDate), endCaseDate := Date][, period := endCaseDate - Date, by = "ID"][,mark := ifelse(between(period, periodRange[1], periodRange[2], incbounds = TRUE), 1,0)][order(mark, decreasing = TRUE),][!duplicated(ID),]
chosenCase <- chosenCase[,selectedCase := ifelse(mark == 1, caseName, semiCaseName)][,c("ID", "selectedCase"),with=FALSE]
}else{
chosenCase <- Case[,selectedCase := caseName][,c("ID", "selectedCase"),with=FALSE][!duplicated(ID),]
}
chosenCase
# CaseCount <- Case[, c("firstCaseDate","endCaseDate") := list(min(Date), max(Date)), by = "ID"][,period := endCaseDate - firstCaseDate,]
# CaseCount <- unique(CaseCount, by = c('ID', 'Date'))
# CaseCount <- CaseCount[,count := .N, by = ID][,-"Date"][!duplicated(ID), c("ID", "firstCaseDate", "endCaseDate", "count", "period")]
}else{
nonSelectedCase <- dxDataFile[,list(ID)][,selectedCase := nonCaseName][!duplicated(ID),][order(ID),]
message("No matching Case")
return(nonSelectedCase)
}
#  CaseCount
#
#   selectedCase <- merge(CaseCount, CaseMostICD, "ID") # allow.cartesian = TRUE
#   selectedCase <- merge(selectedCase, chosenCase, "ID")  # allow.cartesian = TRUE
#   nonSelectedCase <- dxDataFile[!Case, on = "ID", list(ID)][,selectedCase := nonCaseName][!duplicated(ID),]
#
#   allData <- rbindlist(list(nonSelectedCase, selectedCase),fill = TRUE, use.names = TRUE)[order(MostCommonICDCount,decreasing = TRUE),]
#   allData <- allData[,c("ID","selectedCase","count","firstCaseDate","endCaseDate","period","MostCommonICD","MostCommonICDCount")]
#   allData <- unique(allData)
#   allData
}
test_Partial <-
selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable[Group %in% "Undifferentiated connective tissue disease",], # 僅使用一列
caseCondition = "Undifferentiated connective tissue disease",                              # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
test_Whole <-
selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable,                              # 使用整個表格
caseCondition = "Undifferentiated connective tissue disease", # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
View(test_Whole)
View(test_Partial)
#' @rdname selectCases
#' @export
#'
selectCases <- function(dxDataFile, idColName, icdColName, dateColName, icdVerColName = NULL, icd10usingDate = NULL, groupDataType = CCS, customGroupingTable, isDescription = TRUE, caseCondition, caseCount = 2, periodRange = c(30, 365), caseName = "Selected"){
dxDataFile <- as.data.table(dxDataFile)
if(deparse(substitute(icdVerColName)) != "NULL"){
dataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)), deparse(substitute(icdVerColName)))
dxDataFile <- dxDataFile[,dataCol, with = FALSE]
names(dxDataFile) <- c("ID", "ICD", "Date", "Version")
}else{
dataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
dxDataFile <- dxDataFile[,dataCol, with = FALSE]
names(dxDataFile) <- c("ID", "ICD", "Date")
}
dxDataFile[,"Date"] <- as.Date(format(dxDataFile[,Date]))
nonCaseName <- paste0("non-",caseName)
semiCaseName <- paste0(caseName,"*")
groupDataType <- toupper(deparse(substitute(groupDataType)))
if(deparse(substitute(icdVerColName)) != "NULL"){
groupedData <- groupMethodSelect(dxDataFile, idColName = ID, icdColName = ICD, dateColName = Date,
icdVerColName = Version, groupMethod = groupDataType, customGroupingTable = customGroupingTable, isDescription = isDescription)
}else{
groupedData <- groupMethodSelect(dxDataFile, idColName = ID, icdColName = ICD, dateColName = Date,
icd10usingDate = icd10usingDate, groupMethod = groupDataType, customGroupingTable = customGroupingTable, isDescription = isDescription)
}
if(groupDataType != "ICD"){
groupedData <- groupedData$groupedDT
names(groupedData) <- gsub("Short|Decimal", "UNIICD", names(groupedData))
}else{
names(groupedData) <- gsub("Short|Decimal", "UNIICD", names(groupedData))
}
groupDataType <- names(groupedData)[ncol(groupedData)]
groupByCol <- c("ID",groupDataType)
if (groupDataType == "UNIICD"){
Case <- unique(groupedData[grepl(caseCondition, groupedData[,eval(parse(text = paste(groupDataType)))])|grepl(caseCondition, groupedData[,ICD]),][order(ID, Date)]) # EVERY ICD IS UNIQUEs
}else{
Case <- unique(groupedData[grepl(toupper(caseCondition), toupper(groupedData[,eval(parse(text = paste(groupDataType)))])),][order(ID, Date)]) # EVERY ICD only ONCE at ONE DAY
}
if(nrow(Case) > 0){
CaseMostICD <- Case[,list(MostCommonICDCount = .N),by = list(ID,ICD)][order(MostCommonICDCount, decreasing = TRUE),][!duplicated(ID),]
setnames(CaseMostICD, "ICD", "MostCommonICD")
if(caseCount > 1){
chosenCase <- Case[, endCaseDate := shift(Date, caseCount -1 , type = "lead"), by = "ID"][is.na(endCaseDate), endCaseDate := Date][, period := endCaseDate - Date, by = "ID"][,mark := ifelse(between(period, periodRange[1], periodRange[2], incbounds = TRUE), 1,0)][order(mark, decreasing = TRUE),][!duplicated(ID),]
chosenCase <- chosenCase[,selectedCase := ifelse(mark == 1, caseName, semiCaseName)][,c("ID", "selectedCase"),with=FALSE]
}else{
chosenCase <- Case[,selectedCase := caseName][,c("ID", "selectedCase"),with=FALSE][!duplicated(ID),]
}
CaseCount <- Case[, c("firstCaseDate","endCaseDate") := list(min(Date), max(Date)), by = "ID"][,period := endCaseDate - firstCaseDate,]
CaseCount <- unique(CaseCount, by = c('ID', 'Date'))
CaseCount <- CaseCount[,count := .N, by = ID][,-"Date"][!duplicated(ID), c("ID", "firstCaseDate", "endCaseDate", "count", "period")]
}else{
nonSelectedCase <- dxDataFile[,list(ID)][,selectedCase := nonCaseName][!duplicated(ID),][order(ID),]
message("No matching Case")
return(nonSelectedCase)
}
selectedCase <- merge(CaseCount, CaseMostICD, "ID") # allow.cartesian = TRUE
selectedCase <- merge(selectedCase, chosenCase, "ID")  # allow.cartesian = TRUE
# nonSelectedCase <- dxDataFile[!Case, on = "ID", list(ID)][,selectedCase := nonCaseName][!duplicated(ID),]
#
# allData <- rbindlist(list(nonSelectedCase, selectedCase),fill = TRUE, use.names = TRUE)[order(MostCommonICDCount,decreasing = TRUE),]
# allData <- allData[,c("ID","selectedCase","count","firstCaseDate","endCaseDate","period","MostCommonICD","MostCommonICDCount")]
# allData <- unique(allData)
# allData
}
test_Partial <-
selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable[Group %in% "Undifferentiated connective tissue disease",], # 僅使用一列
caseCondition = "Undifferentiated connective tissue disease",                              # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
test_Whole <-
selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable,                              # 使用整個表格
caseCondition = "Undifferentiated connective tissue disease", # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
test_Partial <-
dxpr::selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable[Group %in% "Undifferentiated connective tissue disease",], # 僅使用一列
caseCondition = "Undifferentiated connective tissue disease",                              # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
test_Whole <-
dxpr::selectCases(dxDataFile = test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
icd10usingDate = ICD10_implt_date,
groupDataType = customGrepIcdGroup,
customGroupingTable = grepTable,                              # 使用整個表格
caseCondition = "Undifferentiated connective tissue disease", # 指定特定疾病的ICD-code Group
caseCount = 2,
periodRange = c(30,365),
isDescription = FALSE,
caseName = "Selected")
View(test_whole)
View(test_Whole)
View(test_Partial)
View(test_PartialTable)
View(test_WholeTable)
test <- dataset[IDCODE == "A289E81CFBCC4CA7DB7249EA3E9D7071C7D08AB1",]
View(test)
test_part <- icdDxToCustomGrep(test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
customGroupingTable)
test_whole <- icdDxToCustomGrep(test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
grepTable)
View(test_part$groupedDT)
View(test_whole$groupedDT)
View(grepTable)
grep("^M359","M359")
grep("^M350","M359")
grep("^M350*","M359")
stringVector<-c("a","abc","ac","abbc","abbbc","abbbbc")
grep("ab*",stringVector,value=T)
grep("ab*",stringVector,value=T)
grep("ab*",stringVector)
load("~/emr-master/data/ccsDxICD10.rda")
View(ccsDxICD10)
View(test)
View(test)
View(icdDxToCustomGrep)
#' @rdname dxCustom
#' @export
#'
icdDxToCustomGrep <- function(dxDataFile, idColName, icdColName, dateColName, customGroupingTable){
GrepedIcd <- as.data.table(dxDataFile)
customGroupingTable <- as.data.table(customGroupingTable)
dataCol  <-c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
GrepedIcd <- GrepedIcd[,dataCol,with = FALSE]
names(GrepedIcd) <- c("ID", "ICD", "Date")
GrepedIcd[,c("Date", "Number", "Group") := list(as.Date(Date), 1:nrow(GrepedIcd), NA)]
ifelse(is.na(GrepedIcd$Date), stop("NA is detected. Please make sure all values in ICD column are non-null and in the correct date format."),GrepedIcd$Date)
ifelse(is.na(GrepedIcd$ICD), stop("NA is detected. Please make sure all values in ICD column are non-null."),GrepedIcd$ICD)
for (rule in 1:nrow(customGroupingTable)){
GrepedIcd <- GrepedIcd[,Group := ifelse(grepl(customGroupingTable[rule,"grepIcd"],GrepedIcd$ICD), customGroupingTable[rule,Group], GrepedIcd$Group)]
}
if(sum(!is.na(GrepedIcd$Group)) > 0){
summarisedGrepedIcd <- GrepedIcd[nchar(Group)>0,
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = list(ID,Group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = GrepedIcd[order(Number),-"Number"],
summarised_groupedDT = summarisedGrepedIcd))
}else{
warning("There is no match diagnostic code with the grepTable")
return(groupedDT = GrepedIcd[order(Number),-"Number"])
}
}
test_whole <- icdDxToCustomGrep(test,
idColName = IDCODE,
icdColName = DSSID,
dateColName = IPDAT,
grepTable)
View(test_whole$groupedDT)
View(test_whole$groupedDT)
demo <- data.frame(ID = c("A","A"), ICD = c("M359", "M359"), Group = c("Sjorgren's syndrome","Undifferentiated connective tissue disease"))
View(demo)
View(demo)
load("~/emr-master/data/icd9_ahrq.rda")
load("~/emr-master/data/icd9_elix.rda")
load("~/emr-master/data/icd9_charlson.rda")
View(icd9_ahrq)
icd9_ahrq[duplicated(icd_ahrq$ICD),]
icd9_ahrq[duplicated(icd9_ahrq$ICD),]
View(grepTable)
grep("^M34*","M300")
