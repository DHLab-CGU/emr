if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
# if(!is.null(selectedCaseFile)){
#   if(numericOrBinary == "B"){
#     wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
#   }else{
#     wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
#   }
#   return(wideDt_selected)
# }else{
if(numericOrBinary == "B"){
return(wideDt_N)
}else{
return(wideDt)
# }
}
}
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, )#selectedCaseFile)
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N)#, selectedCaseFile)
wideDt_N <- groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N)#, selectedCaseFile)
merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = N,selectedCaseFile = NULL){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
if(!is.null(selectedCaseFile)){
print(numericOrBinary)
if(numericOrBinary == "B"){
wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}else{
wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
return(wideDt_selected)
}else{
if(numericOrBinary == "B"){
print("hi")
return(wideDt_N)
}else{
return(wideDt)
}
}
}
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N, selectedCaseFile)
groupedDataLongToWide(sampleDxFile, ID, ICD, Date, "2015-10-01", ccs, N,selectedCaseFile =  selectedCaseFile)
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = N,selectedCaseFile = NULL){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[ncol(groupedData)]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
if(!is.null(selectedCaseFile)){
if(numericOrBinary == "B"){
wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}else{
wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
return(wideDt_selected)
}else{
if(numericOrBinary == "B"){
return(wideDt_N)
}else{
return(wideDt)
}
}
}
groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
stringsAsFactors = FALSE)
#' @param selectCaseType Aggregation  of selected cases name. By default it is set to \code{"selected"}.
#' @export
#' @examples
#' head(sampleDxFile)
#' selectCases(sampleDxFile, ID, ICD, Date,
#'             groupDataType = ccslvl2,
#'             icd10usingDate = "2015/10/01",
#'             caseCondition = "Diseases of the heart",
#'             ICDNumber = 2)
#'
selectCases <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ICD, CustomGroupingTable, isDescription = TRUE, caseCondition, ICDNumber, INRofDayRange = c(30, 365), selectCaseType = "Selected"){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile[,"Date"] <- as.Date(DxDataFile[,Date])
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType == "ICD"){
groupDataType <- "ICD"
}else{
groupedData <- groupedData$groupedDf
groupDataType <- names(groupedData)[ncol(groupedData)]
}
Case <- groupedData[grepl(caseCondition, groupedData[,eval(parse(text = paste(groupDataType)))]),][order(ID,Date)]
Case <- Case[!duplicated(Case)][,NextDate := c(Date[-1],NA),by = "ID"][is.na(NextDate),NextDate := Date][,diffDay := NextDate-Date][,Out := FALSE][diffDay > INRofDayRange[2],Out := TRUE][,OutCount:=cumsum(Out),by = "ID"][!Out == TRUE,]
if(nrow(Case) > 0){
CaseCount <- Case[,Gap := cumsum(as.integer(diffDay)),by = c("ID","OutCount")][,InTimeINR := Gap >= INRofDayRange[1] & Gap < INRofDayRange[2],][is.na(InTimeINR),InTimeINR := FALSE][,list(count = cumsum(InTimeINR), firstCaseDate = min(Date), endCaseDate = max(NextDate),period = Gap),by = c("ID","OutCount")][order(ID, count, decreasing = T)][!duplicated(ID),][count >= ICDNumber,][,selectedCase := "selected"][,-"OutCount"]
CaseMostICDCount <- Case[InTimeINR ==TRUE,list(MostCommonICDCount = .N),by = list(ID,ICD)][order(MostCommonICDCount,decreasing = T),]
selectedCase <- merge(CaseCount,CaseMostICDCount,"ID")[!duplicated(ID),]
setnames(selectedCase,"ICD","MostCommonICD")
}else{
nonSelectedCase <- DxDataFile[,list(ID)][,selectedCase := "nonSelected"][!duplicated(ID),][order(ID),]
return(nonSelectedCase)
}
nonSelectedCase <- DxDataFile[!Case, on = "ID", list(ID)][,selectedCase := "nonSelected"][!duplicated(ID),]
if(length(unique(Case$ID))>length(unique(selectedCase$ID))){
semiCase <- Case[!selectedCase, on = "ID", list(ID)][,selectedCase := "selected*"]
nonSelectedCase <- rbind(nonSelectedCase,semiCase)
}
allData <- merge(selectedCase,nonSelectedCase,by = names(nonSelectedCase),all=T)[order(MostCommonICDCount,decreasing = T),]
allData
}
#' @export
#' @source ICD-9-CM CCS (2012)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#' head(sampleDxFile)
#' IcdDxToCCSLvl(sampleDxFile, ID, ICD, Date, "2015-10-01", 2, TRUE)
#'
IcdDxToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, isDescription = TRUE){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile[,"Date"] <- as.Date(DxDataFile[,Date])
DxDataFile[,Number:=1:nrow(DxDataFile)]
Conversion <- IcdDxDecimalToShort(DxDataFile,ICD,Date,icd10usingDate)
DxDataFile[,Short:= Conversion$ICD]
if(isDescription == T){
CCSLvlCol <- paste0("CCS_LVL_", CCSLevel, "_LABEL")
}else{
CCSLvlCol <- paste0("CCS_LVL_", CCSLevel)
}
if(CCSLevel <= 2){
IcdToCCSLvl <- rbind(merge(DxDataFile[Date < icd10usingDate],ccsDxICD9[,c("ICD", CCSLvlCol), with = F],by.x ="Short",by.y = "ICD",all.x = T),
merge(DxDataFile[Date >= icd10usingDate],ccsDxICD10[,c("ICD", CCSLvlCol), with = F],by.x ="Short",by.y = "ICD",all.x = T))
}else{
IcdToCCSLvl <- merge(merge(DxDataFile[Date < icd10usingDate],ccsDxICD9[,c("ICD", CCSLvlCol), with = F],by.x ="Short",by.y = "ICD",all.x = T),
DxDataFile[Date >= icd10usingDate], by = names(DxDataFile), all = T)
}
IcdToCCSLvl <- IcdToCCSLvl[order(Number),-"Number"]
IcdToCCSLvlLong <- IcdToCCSLvl[!is.na(eval(parse(text = paste(CCSLvlCol)))),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = c("ID",CCSLvlCol)][,period := (endCaseDate - firstCaseDate),]
return(list(groupedDf = IcdToCCSLvl,
groupedData_Long = IcdToCCSLvlLong,
Error = Conversion$Error))
}
#' @param icd10usingDate icd 10 using date
#' @source \url{https://www.findacode.com/search/search.php}
#' @source \url{https://www.cms.gov/Medicare/Quality-Initiatives-Patient-Assessment-Instruments/HospitalQualityInits/Downloads/HospitalAppendix_F.pdf}
#' @source \url{https://www.cms.gov/Medicare/Coding/ICD9ProviderDiagnosticCodes/codes.html}
#' @source \url{https://www.cms.gov/Medicare/Coding/ICD10/2019-ICD-10-CM.html}
#' @export
#' @examples
#' head(sampleDxFile)
#' IcdDxDecimalToShort(sampleDxFile,ICD,Date, "2015/10/01")
#'
IcdDxDecimalToShort<-function(DxDataFile, icdColName, dateColName, icd10usingDate){
DataCol <- c(deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ICD", "Date")
DxDataFile[,"Date"] <- as.Date(DxDataFile[,Date])
DxDataFile[,Number:=1:nrow(DxDataFile)]
icd_Decimal <- DxDataFile[grepl("[.]",DxDataFile$ICD),]
icd9D <- merge(icd_Decimal[Date < icd10usingDate], ICD9DxwithTwoFormat, by.x = "ICD", by.y = "Decimal", all.x = T)
icd10D <- merge(icd_Decimal[Date >= icd10usingDate], ICD10DxwithTwoFormat, by.x = "ICD", by.y = "Decimal", all.x = T)
if(nrow(icd9D[is.na(Short),-"Short"]) > 0 | nrow(icd10D[is.na(Short),-"Short"])>0){
icd9DNA <- merge(icd9D[is.na(Short),-"Short"],ICD10DxwithTwoFormat,by.x = "ICD",by.y = "Decimal",all.x = T)
icd10DNA <- merge(icd10D[is.na(Short),-"Short"],ICD9DxwithTwoFormat,by.x = "ICD",by.y = "Decimal",all.x = T)
icd9DwrongFormat <- icd9DNA[is.na(Short), list(count = .N),by = ICD]
icd10DwrongFormat <- icd10DNA[is.na(Short), list(count = .N),by = ICD]
icd9DWrongVer <- icd9DNA[!is.na(Short), list(count = .N),by = ICD]
icd10DWrongVer <- icd10DNA[!is.na(Short), list(count = .N),by = ICD]
if(nrow(icd9DwrongFormat) > 0){
wrongFormatMsg_D <- icd9DwrongFormat[,IcdVersionInFile:="ICD 9"]
wrongFormat_D <- icd9DNA[is.na(Short),-"Short"]
if(nrow(icd10DwrongFormat) > 0){
icd10DwrongFormat <- icd10DwrongFormat[,IcdVersionInFile:="ICD 10"]
wrongFormatMsg_D <- rbind(wrongFormatMsg_D,icd10DwrongFormat)
wrongFormat_D <- rbind(wrongFormat_D, icd10DNA[is.na(Short),-"Short"])
}
}else if(nrow(icd10DwrongFormat) > 0){
wrongFormatMsg_D <- icd10DwrongFormat[,IcdVersionInFile:="ICD 10"]
wrongFormat_D <- icd10DNA[is.na(Short),-"Short"]
}else{
wrongFormatMsg_D <- NA
wrongFormat_D <- NA
}
if(nrow(icd9DWrongVer) > 0){
wrongVersionMsg_D <- icd9DWrongVer[,IcdVersionInFile:="ICD 9"]
wrongVersion_D <- icd9DNA[!is.na(Short),-"Short"]
if(nrow(icd10DWrongVer) > 0){
icd10DWrongVer <- icd10DWrongVer[,IcdVersionInFile:="ICD 10"]
wrongVersionMsg_D <- rbind(wrongVersionMsg_D,icd10DWrongVer)
wrongVersion_D <- rbind(wrongVersion_D,icd10DNA[!is.na(Short),-"Short"])
}
}else if(nrow(icd10DWrongVer) > 0){
wrongVersionMsg_D <- icd10DWrongVer[,IcdVersionInFile:="ICD 10"]
wrongVersion_D <- icd10DNA[!is.na(Short),-"Short"]
}else{
wrongVersionMsg_D <-NA
wrongVersion_D <- NA
}
}else{
wrongFormatMsg_D <- NA
wrongFormat_D <- NA
wrongVersionMsg_D <-NA
wrongVersion_D <- NA
}
icd_Short <- DxDataFile[!icd_Decimal, on = "Number"]
icd9S <- merge(icd_Short[Date < icd10usingDate], ICD9DxwithTwoFormat, by.x = "ICD", by.y = "Short", all.x = T)
icd10S <- merge(icd_Short[Date >= icd10usingDate], ICD10DxwithTwoFormat, by.x = "ICD", by.y = "Short", all.x = T)
if(nrow(icd9S[is.na(Decimal),-"Decimal"]) > 0 | nrow(icd10S[is.na(Decimal),-"Decimal"]) > 0){
icd9SNA <- merge(icd9S[is.na(Decimal),-"Decimal"], ICD10DxwithTwoFormat,by.x = "ICD",by.y = "Short",all.x = T)
icd10SNA <- merge(icd10S[is.na(Decimal),-"Decimal"], ICD9DxwithTwoFormat,by.x = "ICD",by.y = "Short",all.x = T)
icd9SwrongFormat <- icd9SNA[is.na(Decimal), list(count = .N),by = ICD]
icd10SwrongFormat <- icd10SNA[is.na(Decimal), list(count = .N),by = ICD]
icd9SWrongVer <- icd9SNA[!is.na(Decimal), list(count = .N),by = ICD]
icd10SWrongVer <- icd10SNA[!is.na(Decimal), list(count = .N),by = ICD]
if(nrow(icd9SwrongFormat) > 0){
wrongFormatMsg_S <- icd9SwrongFormat[,IcdVersionInFile:="ICD 9"]
wrongFormat_S <- icd9SNA[is.na(Decimal),-"Decimal"]
if(nrow(icd10SwrongFormat) > 0){
icd10SwrongFormat<- icd10SwrongFormat[,IcdVersionInFile:="ICD 10"]
wrongFormatMsg_S<- rbind(wrongFormatMsg_S,icd10SwrongFormat)
wrongFormat_S <- rbind(wrongFormat_S,icd10SNA[is.na(Decimal),-"Decimal"])
}
}else if(nrow(icd10SwrongFormat) > 0){
wrongFormatMsg_S<- icd10SwrongFormat[,IcdVersionInFile:="ICD 10"]
wrongFormat_S <- icd10SNA[is.na(Decimal),-"Decimal"]
}else{
wrongFormatMsg_S<-NA
wrongFormat_S <- NA
}
if(nrow(icd9SWrongVer) > 0){
wrongVersionMsg_S <-icd9SWrongVer[,IcdVersionInFile:="ICD 9"]
wrongVersion_S <- icd9SNA[!is.na(Decimal),-"Decimal"]
if(nrow(icd10SWrongVer) > 0){
icd10SWrongVer <- icd10SWrongVer[,IcdVersionInFile:="ICD 10"]
wrongVersionMsg_S <- rbind(wrongVersionMsg_S,icd10SWrongVer)
wrongVersion_S <- rbind(wrongVersion_S,icd10SNA[!is.na(Decimal),-"Decimal"])
}
}else if(nrow(icd10SWrongVer) > 0){
wrongVersionMsg_S <- icd10SWrongVer[,IcdVersionInFile:="ICD 10"]
wrongVersion_S <- icd10SNA[!is.na(Decimal),-"Decimal"]
}else{
wrongVersionMsg_S <-NA
wrongVersion_S <- NA
}
}else{
wrongFormatMsg_S<-NA
wrongFormat_S <- NA
wrongVersionMsg_S <-NA
wrongVersion_S <- NA
}
if(!is.null(nrow(wrongFormat_D))){
allWrongFormat <- wrongFormat_D
allWrongFormatMsg <- wrongFormatMsg_D[,WrongType:="Wrong format"][order(count,decreasing = T),]
if(!is.null(nrow(wrongFormat_S))){
allWrongFormat <- rbind(allWrongFormat,wrongFormat_S)
wrongFormatMsg_S <- wrongFormatMsg_S[,WrongType:="Wrong format"]
allWrongFormatMsg<- rbind(allWrongFormatMsg,wrongFormatMsg_S)[order(count,decreasing = T),]
}
}else if(!is.null(nrow(wrongFormat_S))){
allWrongFormat <- wrongFormat_S
allWrongFormatMsg<- wrongFormatMsg_S[,WrongType:="Wrong format"][order(count,decreasing = T),]
}else{
allWrongFormat <- NA
allWrongFormatMsg <- NA
}
if(!is.null(nrow(wrongVersion_D))){
allWrongVersion <- wrongVersion_D
allWrongVersionMsg <- wrongVersionMsg_D[,WrongType:="Wrong version"][order(count,decreasing = T),]
if(!is.null(nrow(wrongVersion_S))){
allWrongVersion <- rbind(allWrongVersion, wrongVersion_S)
wrongVersionMsg_S <- wrongVersionMsg_S[,WrongType:="Wrong version"]
allWrongVersionMsg<- rbind(allWrongVersionMsg, wrongVersionMsg_S)[order(count,decreasing = T),]
}
}else if(!is.null(nrow(wrongVersion_S))){
allWrongVersion <- wrongVersion_S
allWrongVersionMsg<- wrongVersionMsg_S[,WrongType:="Wrong version"][order(count,decreasing = T),]
}else{
allWrongVersion <- NA
allWrongVersionMsg <- NA
}
if(!is.null(nrow(allWrongFormat))){
allWrongICD <- allWrongFormat
allWrongICDMsg <- allWrongFormatMsg[order(count,decreasing = T),]
if(!is.null(nrow(allWrongVersion))){
allWrongICD <- rbind(allWrongFormat,allWrongVersion)
allWrongICDMsg <- rbind(allWrongFormatMsg,allWrongVersionMsg)[order(count,decreasing = T),]
}
}else if(!is.null(nrow(allWrongVersion))){
allWrongICD <- allWrongVersion
allWrongICDMsg <- allWrongVersionMsg[order(count,decreasing = T),]
}else{
allWrongICD <- NA
allWrongICDMsg <- NA
}
if(!anyNA(wrongFormatMsg_S) | !anyNA(wrongFormatMsg_D)){
ICD9wrongFormatMsg <- allWrongICDMsg[grepl("format",allWrongICDMsg$WrongType) & grepl("9",allWrongICDMsg$IcdVersionInFile),]
ICD9wrongFormatMsg <- ICD9wrongFormatMsg[,Suggestion :=paste0(ICD9wrongFormatMsg[,ICD],"9")]
ICD9wrongFormatSuggested <- rbind(merge(ICD9wrongFormatMsg[grepl("[.]",ICD9wrongFormatMsg$Suggestion),],
ICD9DxwithTwoFormat,by.x = "Suggestion",by.y = "Decimal",nomatch = T)[,-"Short"],
merge(ICD9wrongFormatMsg[!grepl("[.]",ICD9wrongFormatMsg$Suggestion),],
ICD9DxwithTwoFormat,by.x = "Suggestion",by.y = "Short",nomatch = T)[,-"Decimal"])
noSuggestedWrongFormat <- allWrongICDMsg[!ICD9wrongFormatSuggested,on = c("ICD","IcdVersionInFile")][,Suggestion :=""]
allWrongICDMsg <- rbind(noSuggestedWrongFormat,ICD9wrongFormatSuggested)[order(count,decreasing = TRUE)]
}
DtoS <- rbind(icd9D[!is.na(Short),-"ICD"], icd10D[!is.na(Short),-"ICD"])
setnames(DtoS,"Short","ICD")
StoS <- rbind(icd9S[!is.na(Decimal),-"Decimal"],icd10S[!is.na(Decimal),-"Decimal"])
allShortFormat <- rbind(StoS, DtoS)
if(nrow(allShortFormat) < nrow(DxDataFile)){
if(!is.null(nrow(allWrongFormat))){
message(paste0("Wrong ICD format: total ",nrow(allWrongFormatMsg)," ICD codes (the number of occurrences is in brackets)"))
message(head(allWrongFormatMsg[,list(wrongFormat= paste0(ICD," (",count,")","")),],10))
message(("\t"))
}
if(!is.null(nrow(allWrongVersion))){
message(paste0("Wrong ICD version: total ",nrow(allWrongVersionMsg)," ICD codes (the number of occurrences is in brackets)"))
message(head(allWrongVersionMsg[,list(wrongFormat= paste0(ICD," (",count,")","")),], 10))
message(("\t"))
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"Wrong format" means the ICD has wrong format', call. = F)
warning('"Wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
combine_with_error <- rbind(allWrongICD, allShortFormat)[order(Number),"ICD"]
return(list(ICD = combine_with_error,
Error = allWrongICDMsg))
}else{
return(list(ICD = allShortFormat[order(Number),"ICD"]))
}
}
library("data.table", lib.loc="~/R/win-library/3.4")
load("~/emr/data/ccsDxICD10.rda")
load("~/emr/data/ccsDxICD9.rda")
load("~/emr/data/ICD10DxwithTwoFormat.rda")
load("~/emr/data/ICD9DxwithTwoFormat.rda")
#'                       customIcdGroup,
#'                       CustomGroupingTable = groupingTable)
#' selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date,
#'                                 icd10usingDate = "2015/10/01",
#'                                 groupDataType = ccslvl2,
#'                                 caseCondition = "Diseases of the heart",
#'                                 ICDNumber = 2)
#' groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
#'                       "2015-10-01", ccslvl2, N)#,selectedCaseFile =  selectedCaseFile)
#'
groupedDataLongToWide <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, groupDataType = ccs, CustomGroupingTable, isDescription = TRUE, numericOrBinary = B,selectedCaseFile = NULL){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
groupDataType <- tolower(deparse(substitute(groupDataType)))
groupedData <- groupMethodSelect(DxDataFile, ID, ICD, Date,
icd10usingDate, groupDataType, CustomGroupingTable, isDescription)
if(groupDataType != "icd"){
groupedData <- groupedData$groupedData_Long
groupDataType <- names(groupedData)[2]
}
wideDt <- dcast(groupedData, ID~eval(parse(text = paste(names(groupedData)[2]))), value.var = c("count"))
if(length(wideDt$ID) != length(DxDataFile$ID)){
wideDt <- merge(wideDt, DxDataFile[!duplicated(ID),"ID"], all = T)
}
wideDt[is.na(wideDt)] <- 0L
numericOrBinary <- toupper(deparse(substitute(numericOrBinary)))
if(numericOrBinary == "B"){
wideDt_N <-as.data.frame(wideDt >= 1L)
wideDt_N$ID <- wideDt$ID
}else if(numericOrBinary != "B" && numericOrBinary != "N"){
stop("'please enter N or B for 'numericOrBinary'", call. = FALSE)
}
if(!is.null(selectedCaseFile)){
if(numericOrBinary == "B"){
wideDt_selected <- merge(wideDt_N, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}else{
wideDt_selected <- merge(wideDt, selectedCaseFile[,list(ID, selectedCase)], all.x = T)
}
return(wideDt_selected)
}else{
if(numericOrBinary == "B"){
return(wideDt_N)
}else{
return(wideDt)
}
}
}
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl2,
caseCondition = "Diseases of the heart",
ICDNumber = 2)
load("~/emr/data/sampleDxFile.rda")
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl2,
caseCondition = "Diseases of the heart",
ICDNumber = 2)
#' @import data.table
#' @param DxDataFile A file of clinical diagnostic data with at least 3 columns: "MemberID","ICD", "Date"
#' @param idColName A column for MemberID of DxDataFile
#' @param icdColName A column for ICD of DxDataFile
#' @param dateColName A column for Date of DxDataFile
#' @param icd10usingDate Icd 10 using date
#' @param groupMethod  Four Stratified methods can be chosen: CCS (\code{'ccs'}), CCS levels (\code{'ccslvl1'}, \code{'ccslvl2'}, \code{'ccslvl3'}, \code{'ccslvl4'}), phecode (\code{'phecode'}), comorbidities (\code{'ahrq'},\code{'charlson'}, \code{'elix'}), grepICD or customICD (\code{'customGrepIcdGroup'}, \code{'customIcdGroup'}). Change it to any of the other possible variables.
#' @param CustomGroupingTable Table is for groupDataType
#' @param isDescription  CCS/Phecode categories or description for ICD-CM codes, default is \code{'TRUE'}.
#'
groupMethodSelect <- function(DxDataFile,idColName, icdColName, dateColName, icd10usingDate, groupMethod, CustomGroupingTable, isDescription){
DxDataFile <- as.data.table(DxDataFile)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
DxDataFile <- DxDataFile[,DataCol,with = FALSE]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile[,"Date"] <- as.Date(DxDataFile[,Date])
if(groupMethod == "ccs"){
groupedData <- IcdDxToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isDescription)
}else if(grepl("ccslvl" ,groupMethod)){
CCSLevel <- as.numeric(sub("[A-Za-z]+","",groupMethod))
groupedData <- IcdDxToCCSLvl(DxDataFile, ID, ICD, Date, icd10usingDate, CCSLevel, isDescription)
}else if(groupMethod == "phecode"){
groupedData <- IcdDxToPhecode(DxDataFile, ID, ICD, Date, icd10usingDate, isDescription)
}else if(groupMethod == "ahrq"){
groupedData <- IcdDxToComorbid(DxDataFile, ID, ICD, Date, icd10usingDate, ahrq)
}else if(groupMethod == "charlson"){
groupedData <- IcdDxToComorbid(DxDataFile, ID, ICD, Date, icd10usingDate, charlson)
}else if(groupMethod == "elix"){
groupedData <- IcdDxToComorbid(DxDataFile, ID, ICD, Date, icd10usingDate, elix)
}else if(groupMethod == "customgrepicdgroup"){
groupedData <- IcdDxToCustomGrep(DxDataFile, ID, ICD, Date, CustomGroupingTable)
}else if(groupMethod == "customicdgroup"){
groupedData <- IcdDxToCustom(DxDataFile, ID, ICD, Date, CustomGroupingTable)
}else if(groupMethod == "icd"){
groupedData <- DxDataFile[, Short :=IcdDxDecimalToShort(DxDataFile, ICD, Date, icd10usingDate)$ICD]
}else{
stop("'please enter `ccs`,`ccslvl`, `phecode`, `ahrq`, `charlson`, `elix` `customgrepicdgroup`, `customicdgroup` for 'groupMethod'", call. = FALSE)
}
groupedData
}
selectedCaseFile <- selectCases(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl2,
caseCondition = "Diseases of the heart",
ICDNumber = 2)
groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
"2015-10-01", ccslvl2, N)#,selectedCaseFile =  selectedCaseFile)
groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
"2015-10-01", ccslvl2, N, selectedCaseFile =  selectedCaseFile)
setwd("~/emr")
devtools::document()
devtools::check()
pkgdown::build_site()
View(selectedCaseFile)
devtools::document()
devtools::check()
pkgdown::build_site()
