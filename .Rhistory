Comorbidity_Table$ID <- DxDataFile$ID
combine <- right_join(Comorbidity_Table, comorbidDf_combine, by=c(names(comorbidDf_combine),"ID"))
combine <- combine[, c(31, 1:30)]
combine[is.na(combine)] <- 0L
if(toupper(deparse (substitute (NumericOrBinary))) == "B"){
combine <-as.data.frame(combine >=1)
combine$ID <- unique(DxDataFile$ID)
}else if(toupper(deparse (substitute (NumericOrBinary))) == "N"){
combine[is.na(combine)] <- 0L
}
combine
}
groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", comorbidMethod=ahrq, B)
groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", comorbidMethod=ahrq, N)
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", comorbidMethod=ahrq, N)
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
comorbidMethod <- tolower(deparse(substitute(comorbidMethod)))
if (grepl("ahrq", comorbidMethod)){
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
}else if(grepl("charlson", comorbidMethod)){
comorbidMap9 <- `icd9_charlson`
comorbidMap10 <- `icd10_charlson`
}else if(grepl("elix", comorbidMethod)){
comorbidMap9 <- `icd9_elix`
comorbidMap10 <- `icd9_elix`
}
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate, ])
icd10 <- data.frame(DxDataFile[DxDataFile$Date >= icd10usingDate, ])
comorbidDf9 <- left_join(icd9,comorbidMap9,by="ICD")
comorbidDf10 <- left_join(icd10,comorbidMap10,by="ICD")
comorbidDf_combine <- full_join(comorbidDf9, comorbidDf10, by = c(names(comorbidMap10), "ID", "ICD", "Date","Comorbidity","Value"))
# comorbidDf_combine_wide <- dcast(setDT(comorbidDf_combine), ID~Comorbidity, value.var = c("Comorbidity"))
# all_comorbidity_name <- data.table(matrix(c(0L), nrow=nrow(DxDataFile), ncol=length(unique(comorbidMap9$Comorbidity))))
# names(all_comorbidity_name) <- unique(comorbidMap9$Comorbidity)
# all_comorbidity_name$ID <- DxDataFile$ID
# combine <- right_join(all_comorbidity_name, comorbidDf_combine_wide, by=c(names(comorbidDf_combine),"ID"))
#
# combine <- combine[, c(31, 1:30)]
# combine[is.na(combine)] <- 0L
# if(toupper(deparse (substitute (NumericOrBinary))) == "B"){
#   combine <-as.data.frame(combine >=1)
#   combine$ID <- unique(DxDataFile$ID)
# }else if(toupper(deparse (substitute (NumericOrBinary))) == "N"){
#   combine[is.na(combine)] <- 0L
# }
comorbidDf_combine
}
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
comorbidMethod <- tolower(deparse(substitute(comorbidMethod)))
if (grepl("ahrq", comorbidMethod)){
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
}else if(grepl("charlson", comorbidMethod)){
comorbidMap9 <- `icd9_charlson`
comorbidMap10 <- `icd10_charlson`
}else if(grepl("elix", comorbidMethod)){
comorbidMap9 <- `icd9_elix`
comorbidMap10 <- `icd9_elix`
}
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate, ])
icd10 <- data.frame(DxDataFile[DxDataFile$Date >= icd10usingDate, ])
comorbidDf9 <- left_join(icd9,comorbidMap9,by="ICD")
comorbidDf10 <- left_join(icd10,comorbidMap10,by="ICD")
comorbidDf_combine <- full_join(comorbidDf9, comorbidDf10, by = c(names(comorbidMap10), "ID", "ICD", "Date","Comorbidity","Value"))
comorbidDf_combine_wide <- dcast(setDT(comorbidDf_combine), ID~Comorbidity, value.var = c("Comorbidity"))
all_comorbidity_name <- data.table(matrix(c(0L), nrow=nrow(DxDataFile), ncol=length(unique(comorbidMap9$Comorbidity))))
names(all_comorbidity_name) <- unique(comorbidMap9$Comorbidity)
all_comorbidity_name$ID <- DxDataFile$ID
combine <- right_join(all_comorbidity_name, comorbidDf_combine_wide, by=c(names(comorbidDf_combine),"ID"))
combine <- combine[, c(31, 1:30)]
combine[is.na(combine)] <- 0L
if(toupper(deparse (substitute (NumericOrBinary))) == "B"){
combine <-as.data.frame(combine >=1)
combine$ID <- unique(DxDataFile$ID)
}else if(toupper(deparse (substitute (NumericOrBinary))) == "N"){
combine[is.na(combine)] <- 0L
}
comorbidDf_combine
}
groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", comorbidMethod=ahrq, N)
#   summarise(CHF  =  NumOrBin(CHF), Valvular = NumOrBin(Valvular), PHTN = NumOrBin(PHTN), PVD = NumOrBin(PVD), HTN = NumOrBin(HTN),
#             HTNcx = NumOrBin(HTNcx), Paralysis = NumOrBin(Paralysis), NeuroOther = NumOrBin(NeuroOther), Pulmonary = NumOrBin(Pulmonary),
#             DM = NumOrBin(DM), DMcx = NumOrBin(DMcx), Hypothyroid = NumOrBin(Hypothyroid), Renal = NumOrBin(Renal), Liver = NumOrBin(Liver),
#             PUD = NumOrBin(PUD), HIV = NumOrBin(HIV), Lymphoma = NumOrBin(Lymphoma), Mets = NumOrBin(Mets), Tumor = NumOrBin(Tumor),
#             Rheumatic = NumOrBin(Rheumatic), Coagulopathy = NumOrBin(Coagulopathy), Obesity = NumOrBin(Obesity), WeightLoss = NumOrBin(WeightLoss),
#             FluidsLytes = NumOrBin(FluidsLytes), BloodLoss = NumOrBin(BloodLoss), Anemia = NumOrBin(Anemia), Alcohol = NumOrBin(Alcohol),
#             Drugs = NumOrBin(Drugs), Psychoses = NumOrBin(Psychoses), Depression = NumOrBin(Depression))
# comorbidDf_combine
# }
#####
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
comorbidMethod <- tolower(deparse(substitute(comorbidMethod)))
if (grepl("ahrq", comorbidMethod)){
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
}else if(grepl("charlson", comorbidMethod)){
comorbidMap9 <- `icd9_charlson`
comorbidMap10 <- `icd10_charlson`
}else if(grepl("elix", comorbidMethod)){
comorbidMap9 <- `icd9_elix`
comorbidMap10 <- `icd9_elix`
}
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate, ])
icd10 <- data.frame(DxDataFile[DxDataFile$Date >= icd10usingDate, ])
comorbidDf9 <- left_join(icd9,comorbidMap9,by="ICD")
comorbidDf10 <- left_join(icd10,comorbidMap10,by="ICD")
comorbidDf_combine <- full_join(comorbidDf9, comorbidDf10, by = c(names(comorbidMap10), "ID", "ICD", "Date","Comorbidity","Value"))
comorbidDf_combine_wide <- dcast(setDT(comorbidDf_combine), ID~Comorbidity, value.var = c("Comorbidity"))
all_comorbidity_name <- data.table(matrix(c(0L), nrow=nrow(DxDataFile), ncol=length(unique(comorbidMap9$Comorbidity))))
names(all_comorbidity_name) <- unique(comorbidMap9$Comorbidity)
all_comorbidity_name$ID <- DxDataFile$ID
combine <- right_join(all_comorbidity_name, comorbidDf_combine_wide, by=c(names(comorbidDf_combine),"ID"))
# combine <- combine[, c(31, 1:30)]
# combine[is.na(combine)] <- 0L
# if(toupper(deparse (substitute (NumericOrBinary))) == "B"){
#   combine <-as.data.frame(combine >=1)
#   combine$ID <- unique(DxDataFile$ID)
# }else if(toupper(deparse (substitute (NumericOrBinary))) == "N"){
#   combine[is.na(combine)] <- 0L
# }
comorbidDf_combine
}
groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", comorbidMethod=ahrq, N)
View(DxDataFile)
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B){#, groupByDate = T){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
comorbidMethod <- tolower(deparse(substitute(comorbidMethod)))
if (grepl("ahrq", comorbidMethod)){
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
}else if(grepl("charlson", comorbidMethod)){
comorbidMap9 <- `icd9_charlson`
comorbidMap10 <- `icd10_charlson`
}else if(grepl("elix", comorbidMethod)){
comorbidMap9 <- `icd9_elix`
comorbidMap10 <- `icd9_elix`
}
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate, ])
icd10 <- data.frame(DxDataFile[DxDataFile$Date >= icd10usingDate, ])
comorbidDf9 <- left_join(icd9,comorbidMap9,by="ICD")
comorbidDf10 <- left_join(icd10,comorbidMap10,by="ICD")
comorbidDf_combine <- full_join(comorbidDf9, comorbidDf10, by = c(names(comorbidMap10), "ID", "ICD", "Date","Comorbidity","Value"))
comorbidDf_combine_wide <- dcast(setDT(comorbidDf_combine), ID~Comorbidity, value.var = c("Comorbidity"))
all_comorbidity_name <- data.table(matrix(c(0L), nrow=nrow(DxDataFile), ncol=length(unique(comorbidMap9$Comorbidity))))
names(all_comorbidity_name) <- unique(comorbidMap9$Comorbidity)
all_comorbidity_name$ID <- DxDataFile$ID
combine <- right_join(all_comorbidity_name, comorbidDf_combine_wide, by=c(names(comorbidDf_combine),"ID"))
# combine <- combine[, c(31, 1:30)]
# combine[is.na(combine)] <- 0L
# if(toupper(deparse (substitute (NumericOrBinary))) == "B"){
#   combine <-as.data.frame(combine >=1)
#   combine$ID <- unique(DxDataFile$ID)
# }else if(toupper(deparse (substitute (NumericOrBinary))) == "N"){
#   combine[is.na(combine)] <- 0L
# }
comorbidDf_combine
}
DxDataFile <- data.frame(ID=c("A","A","B","B"),
ICD=c("40201","V433","I350","I350"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10","2016-03-10")),
stringsAsFactors = F)
load("~/emr/data/phecode_icd9_2.rda")
load("~/test/data/phecode_icd9_1.rda")
names(phecode_icd9_2)
phecode_icd9_2 %>% pull(PheCode) %>% unique()
library("dplyr", lib.loc="~/R/win-library/3.4")
phecode_icd9_2 %>% pull(PheCode) %>% unique() %>% length
phecode_icd9_1 %>% pull(PheCode) %>% unique() %>% length
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = FALSE)
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","E538"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = FALSE)
convertIcdDecimaltoShort("E538")
#' Convert ICD Codes From Decimal To Short Forms
#'
#' Convert codes between short and decimal forms
#'
#' @import icd
#'
#' @param icdList ICD codes
#'
convertIcdDecimaltoShort<-function(icdList){
newicdList <- ifelse(grepl("[.]",icdList), icd_decimal_to_short(icdList), icdList)
return(newicdList)
}
convertIcdDecimaltoShort("E538")
convertIcdDecimaltoShort("E53.8")
library("icd", lib.loc="~/R/win-library/3.4")
convertIcdDecimaltoShort("E53.8")
load("~/emr/data/ccsDxICD10.rda")
View(ccsDxICD10)
icd_is_valid("E53.8")
icd_is_valid("6929")
icd_is_valid.icd10("6929")
icd_is_valid.icd10("E53.8")
icd_is_valid.icd10("6929")
devtools::install_github("DHLab-CGU/emr")
library(emr)
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = FALSE)
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = FALSE)
getConditionEra(DxDataFile, ID, ICD, Date, "2016-01-01", 30, ccs, FALSE)
getConditionEra(DxDataFile, ID, ICD, Date, "2016-01-01", 30, ICD, FALSE)
groupIcdToCCSLvl(DxDataFile, ID, ICD, Date, "2016-01-01", 2, TRUE)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, TRUE)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", charlson, B, TRUE)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", elix, N, TRUE)
DxDataFile <- data.frame(ID=c("A","A","B"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = FALSE)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, TRUE)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", charlson, B, TRUE)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", elix, N, TRUE)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", charlson, B, F)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, F)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", elix, N, F)
groupIcdToComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, T)
groupIcdToPhecode(DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)
#' @examples
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = FALSE)
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#' @examples
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2013-03-31","2016-01-29","2016-03-10")),
stringsAsFactors = FALSE)
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#' @param icd10usingDate ICD-10 using date
#' @param isCCSCategoryDescription  Clinical Classifications Software (CCS) single level categories/ description for ICD-9 or ICD-10, default is True
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
groupIcdToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9ToCCS <- left_join(data.frame(ICD = icd9$ICD, stringsAsFactors = F),
select(ccsDxICD9, ICD,CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>%
mutate(ID = icd9$ID) %>% mutate(Date = icd9$Date) %>% unique()
icd10ToCCS <- left_join(data.frame(ICD = icd10$ICD, stringsAsFactors = F),
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>%
mutate(ID = icd10$ID) %>% mutate(Date = icd10$Date) %>% unique()
DxDataFile_combine <- full_join(icd9ToCCS, icd10ToCCS, by = c("ID", "ICD", "Date", "CCS_CATEGORY", "CCS_CATEGORY_DESCRIPTION"))
DxDataFile_combine_with_originalFile <- left_join(DxDataFile, DxDataFile_combine, by = c("ID", "ICD", "Date"))
if (isCCSCategoryDescription == T) {
IcdToCCS <- DxDataFile_combine_with_originalFile$CCS_CATEGORY_DESCRIPTION
} else {
IcdToCCS <- DxDataFile_combine_with_originalFile$CCS_CATEGORY
}
errorID <- is.na(IcdToCCS)
if(sum(errorID)>=1){
message(paste0("warning ICD: ", unique(DxDataFile_combine_with_originalFile$ICD[is.na(IcdToCCS)]), sep = "\t\n"))
warning("'NA' means the data does not match the format",call. = F)
}
DxDataFile_combine_with_originalFile
}
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#' Convert ICD Codes From Decimal To Short Forms
#'
#' Convert codes between short and decimal forms
#'
#' @import icd
#'
#' @param icdList ICD codes
#'
convertIcdDecimaltoShort<-function(icdList){
newicdList <- ifelse(grepl("[.]",icdList), icd_decimal_to_short(icdList), icdList)
return(newicdList)
}
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
library("dplyr", lib.loc="~/R/win-library/3.4")
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
test<-groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
test
is.na(test$CCS_CATEGORY)
anyNA(test$CCS_CATEGORY)
#' @param icd10usingDate ICD-10 using date
#' @param isCCSCategoryDescription  Clinical Classifications Software (CCS) single level categories/ description for ICD-9 or ICD-10, default is True
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
groupIcdToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9ToCCS <- left_join(data.frame(ICD = icd9$ICD, stringsAsFactors = F),
select(ccsDxICD9, ICD,CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>%
mutate(ID = icd9$ID) %>% mutate(Date = icd9$Date) %>% unique()
icd10ToCCS <- left_join(data.frame(ICD = icd10$ICD, stringsAsFactors = F),
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = "ICD") %>%
mutate(ID = icd10$ID) %>% mutate(Date = icd10$Date) %>% unique()
DxDataFile_combine <- full_join(icd9ToCCS, icd10ToCCS, by = c("ID", "ICD", "Date", "CCS_CATEGORY", "CCS_CATEGORY_DESCRIPTION"))
DxDataFile_combine_with_originalFile <- left_join(DxDataFile, DxDataFile_combine, by = c("ID", "ICD", "Date"))
if (isCCSCategoryDescription == T) {
IcdToCCS <- DxDataFile_combine_with_originalFile$CCS_CATEGORY_DESCRIPTION
} else {
IcdToCCS <- DxDataFile_combine_with_originalFile$CCS_CATEGORY
}
if(anyNA(IcdToCCS)){
message(paste0("warning ICD: ", unique(DxDataFile_combine_with_originalFile$ICD[is.na(IcdToCCS)]), sep = "\t\n"))
warning("'NA' means the data does not match the format",call. = F)
}
IcdToCCS
}
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2013-03-31","2016-01-29","2016-03-10")),
stringsAsFactors = FALSE)
test<-groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = FALSE)
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", TRUE)
#' @param CCSLevel Clinical Classifications Software (CCS) multiple level
#' @param CCSLvlLabel Clinical Classifications Software (CCS) multiple level categories/ description for icd9/ 10, default is True
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToCCSLvl(DxDataFile, ID, ICD, Date, "2016-01-01", 2, TRUE)
#'
groupIcdToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, CCSLvlLabel = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate,]
icd9ToCCSLvl <- left_join(data.frame(ICD = icd9$ICD, stringsAsFactors = F),
select(ccsDxICD9, ICD, CCS_LVL_1, CCS_LVL_1_LABEL, CCS_LVL_2, CCS_LVL_2_LABEL, CCS_LVL_3, CCS_LVL_3_LABEL, CCS_LVL_4, CCS_LVL_4_LABEL),
by = "ICD") %>% mutate(ID = icd9$ID) %>% mutate(Date = icd9$Date) %>% unique()
if(CCSLevel < 3){
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate,]
icd10ToCCSLvl <- left_join(data.frame(ICD = icd10$ICD, stringsAsFactors = F),
select(ccsDxICD10, ICD, CCS_LVL_1, CCS_LVL_1_LABEL, CCS_LVL_2, CCS_LVL_2_LABEL),
by = "ICD") %>% mutate(ID = icd10$ID) %>% mutate(Date = icd10$Date) %>% unique()
DxDataFile_combine <- full_join(icd9ToCCSLvl, icd10ToCCSLvl, by = c("ID", "ICD", "Date", "CCS_LVL_1", "CCS_LVL_1_LABEL", "CCS_LVL_2", "CCS_LVL_2_LABEL"))
}else{
DxDataFile_combine <- icd9ToCCSLvl
}
DxDataFile_combine_with_originalFile <- left_join(DxDataFile,DxDataFile_combine, by = c("ID", "ICD", "Date"))
if(CCSLvlLabel == T){
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
}else{
CCSLevelcol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
}
IcdToCCSLevel <- DxDataFile_combine_with_originalFile[, CCSLevelcol]
errorID <- is.na(IcdToCCSLevel)
if(anyNA(IcdToCCSLevel)){
message(paste0("warning ICD: ", unique(DxDataFile_combine_with_originalFile$ICD[is.na(IcdToCCSLevel)]), sep = "\t\n"))
warning("'NA' means icd10 CCS multiple levels are 1~2 or the data does not match the format", call. = F)
}
IcdToCCSLevel
}
groupIcdToCCSLvl(DxDataFile, ID, ICD, Date, "2016-01-01", 2, TRUE)
devtools::document()
devtools::load_all()
setwd("~/emr")
devtools::document()
devtools::load_all()
devtools::check()
