icd10usingDate <-"2016-01-01"
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
mutate(CCS = groupIcdToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isCCSDescription)) %>%
arrange(ID, CCS, Date) %>%
group_by(ID, CCS) %>%
mutate(Gap = Date - lag(Date))
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
arrange(ID, ICD, Date) %>%
group_by(ID, ICD) %>%
mutate(Gap = Date - lag(Date))
}else{
stop("'please enter icd or ccs for 'icdorCCS'", call. = FALSE)
}
isCCSDescription<-F
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
mutate(CCS = groupIcdToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isCCSDescription)) %>%
arrange(ID, CCS, Date) %>%
group_by(ID, CCS) %>%
mutate(Gap = Date - lag(Date))
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
arrange(ID, ICD, Date) %>%
group_by(ID, ICD) %>%
mutate(Gap = Date - lag(Date))
}else{
stop("'please enter icd or ccs for 'icdorCCS'", call. = FALSE)
}
DxDataFile$episode <- DxDataFile$Gap > gapDate
gapDate <-30
DxDataFile$episode <- DxDataFile$Gap > gapDate
DxDataFile[is.na(DxDataFile$episode)]$episode <- T
is.na(DxDataFile$episode)
DxDataFile <- DxDataFile %>%
group_by(ID, CCS) %>%
mutate(Era = cumsum(episode))
DxDataFile[is.na(DxDataFile$episode)]
DxDataFile[is.na(DxDataFile$episode),]$episode <- T
DxDataFile[is.na(DxDataFile$episode),] <- T
DxDataFile[is.na(DxDataFile$episode)] <- T
DxDataFile$episode <- DxDataFile$Gap > gapDate
DxDataFile[is.na(DxDataFile$episode)] <- T
DxDataFile$episode <- DxDataFile$Gap > gapDate
View(DxDataFile)
DxDataFile <- test
View(test)
View(DxDataFile)
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
errorID <- 0
icdorCCS <- toupper(deparse(substitute(icdorCCS)))
icdorCCS <- toupper(deparse(substitute(ccs)))
icd10usingDate <-"2016-01-01"
isCCSDescription<-F
gapDate <-30
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
mutate(CCS = groupIcdToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isCCSDescription)) %>%
arrange(ID, CCS, Date) %>%
group_by(ID, CCS) %>%
mutate(Gap = Date - lag(Date))
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
arrange(ID, ICD, Date) %>%
group_by(ID, ICD) %>%
mutate(Gap = Date - lag(Date))
}else{
stop("'please enter icd or ccs for 'icdorCCS'", call. = FALSE)
}
DxDataFile$episode <- DxDataFile$Gap > gapDate
DxDataFile[is.na(DxDataFile$episode)] <- T
DxDataFile <- test
DxDataFile <- DxDataFile %>%
mutate(CCS = groupIcdToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isCCSDescription)) %>%
arrange(ID, CCS, Date) %>%
group_by(ID, CCS) %>%
mutate(Gap = Date - lag(Date))
DxDataFile[is.na(DxDataFile$episode),] <- T
DxDataFile$episode <- DxDataFile$Gap > gapDate
DxDataFile$episode[is.na(DxDataFile$episode)] <- T
i
DxDataFile <- DxDataFile %>%
group_by(ID, CCS) %>%
mutate(Era = cumsum(episode))
errorID <- is.na(DxDataFile$CCS)
DxDataFile <- select(DxDataFile, c(-"Gap", -"episode"))
getConditionEra <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, gapDate = 30, icdorCCS = CCS, isCCSDescription = F){
DxDataFile <- DxDataFile[ ,c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
errorID <- 0
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
mutate(CCS = groupIcdToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isCCSDescription)) %>%
arrange(ID, CCS, Date) %>%
group_by(ID, CCS) %>%
mutate(Gap = Date - lag(Date))
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
arrange(ID, ICD, Date) %>%
group_by(ID, ICD) %>%
mutate(Gap = Date - lag(Date))
}else{
stop("'please enter icd or ccs for 'icdorCCS'", call. = FALSE)
}
DxDataFile$episode <- DxDataFile$Gap > gapDate
DxDataFile$episode[is.na(DxDataFile$episode)] <- T
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
group_by(ID, CCS) %>%
mutate(Era = cumsum(episode))
errorID <- is.na(DxDataFile$CCS)
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
group_by(ID, ICD) %>%
mutate(Era = cumsum(episode))
}
DxDataFile <- select(DxDataFile, c(-"Gap", -"episode"))
if(sum(errorID) >= 1){
message(paste0("wrong format: ", DxDataFile$ICD[is.na(DxDataFile$CCS)], sep = "\t\n"))
}
DxDataFile
}
getConditionEra(DxDataFile, ID, ICD, Date, "2016-01-01", 30, ccs, F)
getConditionEra <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, gapDate = 30, icdorCCS = CCS, isCCSDescription = F){
DxDataFile <- DxDataFile[ ,c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
errorID <- 0
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
mutate(CCS = groupIcdToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isCCSDescription)) %>%
arrange(ID, CCS, Date) %>%
group_by(ID, CCS) %>%
mutate(Gap = Date - lag(Date))
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
arrange(ID, ICD, Date) %>%
group_by(ID, ICD) %>%
mutate(Gap = Date - lag(Date))
}else{
stop("'please enter icd or ccs for 'icdorCCS'", call. = FALSE)
}
DxDataFile$episode <- DxDataFile$Gap > gapDate
DxDataFile$episode[is.na(DxDataFile$episode)] <- T
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
group_by(ID, CCS) %>%
mutate(Era = cumsum(episode))
errorID <- is.na(DxDataFile$CCS)
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
group_by(ID, ICD) %>%
mutate(Era = cumsum(episode))
}
DxDataFile <- select(DxDataFile, c(-"Gap", -"episode"))
if(sum(errorID) >= 1){
message(paste0("wrong format: ", DxDataFile$ICD[is.na(DxDataFile$CCS)], sep = "\t\n"))
}
DxDataFile
}
getConditionEra <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, gapDate = 30, icdorCCS = CCS, isCCSDescription = F){
DxDataFile <- DxDataFile[ ,c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
errorID <- 0
icdorCCS <- toupper(deparse(substitute(icdorCCS)))
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
mutate(CCS = groupIcdToCCS(DxDataFile, ID, ICD, Date, icd10usingDate, isCCSDescription)) %>%
arrange(ID, CCS, Date) %>%
group_by(ID, CCS) %>%
mutate(Gap = Date - lag(Date))
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
arrange(ID, ICD, Date) %>%
group_by(ID, ICD) %>%
mutate(Gap = Date - lag(Date))
}else{
stop("'please enter icd or ccs for 'icdorCCS'", call. = FALSE)
}
DxDataFile$episode <- DxDataFile$Gap > gapDate
DxDataFile$episode[is.na(DxDataFile$episode)] <- T
if(icdorCCS == "CCS"){
DxDataFile <- DxDataFile %>%
group_by(ID, CCS) %>%
mutate(Era = cumsum(episode))
errorID <- is.na(DxDataFile$CCS)
}else if(icdorCCS == "ICD"){
DxDataFile <- DxDataFile %>%
group_by(ID, ICD) %>%
mutate(Era = cumsum(episode))
}
DxDataFile <- select(DxDataFile, c(-"Gap", -"episode"))
if(sum(errorID) >= 1){
message(paste0("wrong format: ", DxDataFile$ICD[is.na(DxDataFile$CCS)], sep = "\t\n"))
}
DxDataFile
}
getConditionEra(DxDataFile, ID, ICD, Date, "2016-01-01", 30, ccs, F)
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = F)
getConditionEra(DxDataFile, ID, ICD, Date, "2016-01-01", 30, ccs, F)
DxDataFile <- data.frame(ID=c("A","A","A"),
ICD=c("6929","V433","I350"),
Date=as.Date(c("2016-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = F)
getConditionEra(DxDataFile, ID, ICD, Date, "2016-01-01", 30, ccs, F)
setwd("~/emr")
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
load("~/DHAnalysis-master/DHAnalysis-master/data/ccsICD9.rda")
View(ccsICD9)
setwd("~/DHAnalysis-master")
devtools::check()
setwd("~/DHAnalysis-master/DHAnalysis-master")
devtools::check()
save(ccsDxICD10, file = "ccsDxICD10.rda")
setwd("~/emr")
save(ccsDxICD10, file = "ccsDxICD10.rda")
save(ccsDxICD10, file = "ccsDxICD10.rda")
save(ccsDxICD9_fullLabel, file = "ccsDxICD9_fullLabel.rda")
save(icd10_ahrq, file = "icd10_ahrq.rda")
save(icd10_charlson, file = "icd10_charlson.rda")
save(icd9_ahrq, file = "icd9_ahrq.rda")
save(icd9_charlson, file = "icd9_charlson.rda")
save(icd9_elix, file = "icd9_elix.rda")
save(icd10_elix, file = "icd10_elix.rda")
save(phecode_icd9_2, file = "phecode_icd9_2.rda")
ccsDxICD10 <- readRDS("~/emr/data/ccsDxICD10.rds")
ccsDxICD9 <- readRDS("~/emr/data/ccsDxICD9.rds")
ccsDxICD9_fullLabel <- readRDS("~/emr/data/ccsDxICD9_fullLabel.rds")
icd10_ahrq <- readRDS("~/emr/data/icd10_ahrq.rds")
icd10_charlson <- readRDS("~/emr/data/icd10_charlson.rds")
icd10_elix <- readRDS("~/emr/data/icd10_elix.rds")
icd9_ahrq <- readRDS("~/emr/data/icd9_ahrq.rds")
icd9_charlson <- readRDS("~/emr/data/icd9_charlson.rds")
icd9_elix <- readRDS("~/emr/data/icd9_elix.rds")
phecode_icd9_2 <- readRDS("~/emr/data/phecode_icd9_2.rds")
save(ccsDxICD10, file = "ccsDxICD10.rda")
save(ccsDxICD9, file = "ccsDxICD9.rda")
save(icd10_ahrq, file = "icd10_ahrq.rda")
save(icd10_charlson, file = "icd10_charlson.rda")
save(icd9_ahrq, file = "icd9_ahrq.rda")
save(icd9_charlson, file = "icd9_charlson.rda")
save(icd9_elix, file = "icd9_elix.rda")
save(icd10_elix, file = "icd10_elix.rda")
save(phecode_icd9_2, file = "phecode_icd9_2.rda")
load("~/emr/data/ccsDxICD9.rda")
View(ccsDxICD9)
View(ccsDxICD9_fullLabel)
View(ccsDxICD9)
View(ccsDxICD10)
View(ccsDxICD9)
View(ccsDxICD9_fullLabel)
devtools::document()
devtools::load_all()
View(ccsDxICD9_fullLabel)
View(ccsDxICD9)
View(ccsDxICD10)
View(ccsDxICD9)
####CCS category ,lv1, lv2, lv3 ----
# ccsDxICD9$CCS_CATEGORY %>% unique()
#
# ccsDxICD9 %>%  pull(CCS_LVL_1_LABEL) %>% unique()
#
# ccsDxICD10 %>% arrange(CCS_LVL_2) %>% pull(CCS_LVL_2) %>% unique()
#
# ccsPrICD9$CCS_LVL_3 %>% unique
######
# ccs dx full label description
ccsDxICD9<-ccsDxICD9[,-3]
convertLabel<-left_join(select(ccsDxICD9,CCS_CATEGORY),select(ccsDxICD10,CCS_CATEGORY,CCS_CATEGORY_DESCRIPTION),by="CCS_CATEGORY") %>% unique
View(convertLabel)
ccsDxICD9_fullLabel<-left_join(ccsDxICD9,convertLabel,by="CCS_CATEGORY")
View(ccsDxICD9_fullLabel)
ccsDxICD9_fullLabel<-ccsDxICD9_fullLabe[,c(1,2,12,3:11)]
ccsDxICD9_fullLabel<-ccsDxICD9_fullLabe[,c(1,2,12,3:11)]
ccsDxICD9_fullLabel<-ccsDxICD9_fullLabel[,c(1,2,12,3:11)]
View(ccsDxICD10)
ccsDxICD9_fullLabel<-left_join(ccsDxICD9,convertLabel,by="CCS_CATEGORY")
ccsDxICD9_fullLabel<-ccsDxICD9_fullLabel[,c(1:3,12,4:11)]
save(ccsDxICD9_fullLabel,'~/data/ccsDxICD9.rda')
setwd("~/")
dir
dir()
setwd("~/test")
dir()
save(ccsDxICD9_fullLabel,'~/data/ccsDxICD9.rda')
ccsDxICD9<-ccsDxICD9_fullLabel
View(ccsDxICD9)
save(ccsDxICD9,'~/data/ccsDxICD9.rda')
save(ccsDxICD9,'ccsDxICD9.rda')
save(ccsDxICD9,"ccsDxICD9.rda")
save(ccsDxICD9,file="ccsDxICD9.rda")
ccsICD10 <- readRDS("C:/Users/makiz/Documents/test/data/ccsICD10.rds")
View(ccsICD10)
load("~/emr/data/ccsDxICD10.rda")
load("~/emr/data/ccsDxICD9.rda")
load("~/emr/data/ccsDxICD9_fullLabel.rda")
load("~/emr/data/icd10_ahrq.rda")
load("~/emr/data/icd10_charlson.rda")
load("~/emr/data/icd10_elix.rda")
load("~/emr/data/icd9_ahrq.rda")
load("~/emr/data/icd9_charlson.rda")
load("~/emr/data/icd9_elix.rda")
View(ccsDxICD10)
View(ccsDxICD9)
View(ccsDxICD9_fullLabel)
View(ccsDxICD9)
View(icd10_ahrq)
View(icd10_charlson)
View(icd10_elix)
View(icd9_ahrq)
View(icd9_charlson)
View(icd9_elix)
phecode_icd9_2 <- readRDS("C:/Users/makiz/Documents/test/data/phecode_icd9_2.rds")
phecode_icd9_1 <- readRDS("C:/Users/makiz/Documents/test/data/phecode_icd9_1.rds")
> save(phecode_icd9_1, file = "phecode_icd9_1.rda")
save(phecode_icd9_1, file = "phecode_icd9_1.rda")
setwd("~/emr")
devtools::document()
devtools::load_all()
devtools::check()
setDT
??setDT
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","B","B"),
#'                          ICD=c("40201","V433","I350","I050"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#'
#' groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, T)
#' groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", charlson, B, T)
#' groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", elix, N, T)
#'
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B, groupByDate = T){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
comorbidMethod <- tolower(deparse(substitute(comorbidMethod)))
if (grepl("ahrq", comorbidMethod)){
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
}else if(grepl("charlson", comorbidMethod)){
comorbidMap9 <- `icd9_charlson`
comorbidMap10 <- `icd10_charlson`
}else if(grepl("elix", comorbidMethod)){
comorbidMap9 <- `icd9_elix`
comorbidMap10 <- `icd9_elix`
}
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate,])
icd10 <- data.frame(DxDataFile[DxDataFile$Date >= icd10usingDate,])
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
comorbidDf10 <- left_join(icd10, comorbidMap10, by = "ICD")
comorbidDf_combine <- full_join(comorbidDf9, comorbidDf10, by = c(names(comorbidMap10), "ID", "ICD", "Date", "Comorbidity", "Value"))
comorbidDf_combine$ICD <- NULL
if(groupByDate ==T){
comorbidDf_combine<-comorbidDf_combine %>% group_by(ID,Date,Comorbidity) %>% unique()
}
comorbidDf_combine_wide <- dcast(comorbidDf_combine, ID~Comorbidity, value.var = c("Value"), sum)
all_comorbidity_name <- data.frame(matrix(c(0L), nrow = nrow(DxDataFile), ncol = length(unique(comorbidMap9$Comorbidity))))
names(all_comorbidity_name) <- unique(comorbidMap9$Comorbidity)
all_comorbidity_name <- mutate(all_comorbidity_name, ID = DxDataFile$ID)
combine <- right_join(all_comorbidity_name, comorbidDf_combine_wide, by = c(names(comorbidDf_combine_wide), "ID"))
combine_Numeric <- combine[, c(31, 1:30)]
combine_Numeric[is.na(combine_Numeric)] <- 0L
if(toupper(deparse(substitute(NumericOrBinary))) == "B"){
combine_Binary <-as.data.frame(combine_Numeric >= 1L)
combine_Binary$ID <- unique(DxDataFile$ID)
return(combine_Binary)
}else if(toupper(deparse(substitute(NumericOrBinary))) == "N"){
return(combine_Numeric)
}else{
stop("'please enter N or B for 'comorbidMethod'", call. = FALSE)
}
}
DxDataFile <- data.frame(ID=c("A","A","B","B"),
ICD=c("40201","V433","I350","I050"),
Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10","2016-03-10")),
stringsAsFactors = FALSE)
groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, T)
groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, F)
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","B","B"),
#'                          ICD=c("40201","V433","I350","I050"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#'
#' groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, N, T)
#' groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", charlson, B, T)
#' groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", elix, N, T)
#'
groupIcdBasedOnComorbid <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, comorbidMethod, NumericOrBinary = B, groupByDate = T){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
comorbidMethod <- tolower(deparse(substitute(comorbidMethod)))
if (grepl("ahrq", comorbidMethod)){
comorbidMap9 <- `icd9_ahrq`
comorbidMap10 <- `icd10_ahrq`
}else if(grepl("charlson", comorbidMethod)){
comorbidMap9 <- `icd9_charlson`
comorbidMap10 <- `icd10_charlson`
}else if(grepl("elix", comorbidMethod)){
comorbidMap9 <- `icd9_elix`
comorbidMap10 <- `icd9_elix`
}
icd9 <- data.frame(DxDataFile[DxDataFile$Date < icd10usingDate,])
icd10 <- data.frame(DxDataFile[DxDataFile$Date >= icd10usingDate,])
comorbidDf9 <- left_join(icd9, comorbidMap9,by = "ICD")
comorbidDf10 <- left_join(icd10, comorbidMap10, by = "ICD")
comorbidDf_combine <- full_join(comorbidDf9, comorbidDf10, by = c(names(comorbidMap10), "ID", "ICD", "Date", "Comorbidity", "Value"))
comorbidDf_combine$ICD <- NULL
if(groupByDate ==T){
comorbidDf_combine<-comorbidDf_combine %>% group_by(ID,Date,Comorbidity) %>% unique()
}
comorbidDf_combine_wide <- dcast(comorbidDf_combine, ID~Comorbidity, value.var = c("Value"), sum)
all_comorbidity_name <- data.frame(matrix(c(0L), nrow = nrow(DxDataFile), ncol = length(unique(comorbidMap9$Comorbidity))))
names(all_comorbidity_name) <- unique(comorbidMap9$Comorbidity)
all_comorbidity_name <- mutate(all_comorbidity_name, ID = DxDataFile$ID)
combine <- right_join(all_comorbidity_name, comorbidDf_combine_wide, by = c(names(comorbidDf_combine_wide), "ID"))
combine_Numeric <- combine[, c(31, 1:30)]
combine_Numeric[is.na(combine_Numeric)] <- 0L
if(toupper(deparse(substitute(NumericOrBinary))) == "B"){
combine_Binary <-as.data.frame(combine_Numeric >= 1L)
combine_Binary$ID <- unique(DxDataFile$ID)
return(combine_Binary)
}else if(toupper(deparse(substitute(NumericOrBinary))) == "N"){
return(combine_Numeric)
}else{
stop("'please enter N or B for 'comorbidMethod'", call. = FALSE)
}
}
groupIcdBasedOnComorbid(DxDataFile, ID, ICD, Date, "2016-01-01", ahrq, B, F)
library(emr)
library("emr", lib.loc="~/R/win-library/3.4")
devtools::load_all(emr)
devtools::load_all(emr,"package")
devtools::load_all("emr","package")
devtools::check()
na.omit
#' @param icd10usingDate ICD-10 using date
#' @param isCCSCategoryDescription  Clinical Classifications Software (CCS) single level categories/ description for ICD-9 or ICD-10, default is True
#' @export
#' @examples
#' DxDataFile <- data.frame(ID=c("A","A","A"),
#'                          ICD=c("6929","V433","I350"),
#'                          Date=as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
#'                          stringsAsFactors = FALSE)
#' groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", T)
#'
groupIcdToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription=TRUE){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$ICD <- convertIcdDecimaltoShort(DxDataFile$ICD)
icd10 <- DxDataFile[DxDataFile$Date >= icd10usingDate, "ICD"]
icd9 <- DxDataFile[DxDataFile$Date < icd10usingDate, "ICD"]
icd9 <- left_join(data.frame(ICD = icd9, stringsAsFactors = F), select(ccsDxICD9, ICD,CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by="ICD") %>% unique()
icd10 <- left_join(data.frame(ICD = icd10, stringsAsFactors = F), select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by="ICD") %>% unique()
DxDataFile_combine <- full_join(icd9, icd10, by = c("ICD","CCS_CATEGORY", "CCS_CATEGORY_DESCRIPTION"))
DxDataFile_combine<-DxDataFile_combine[complete.cases(DxDataFile_combine),]
DxDataFile_combine_with_originalFile <- left_join(DxDataFile, DxDataFile_combine, by="ICD")
if (isCCSCategoryDescription == T) {
DxDataFile_combine_with_originalFile <- DxDataFile_combine_with_originalFile$CCS_CATEGORY_DESCRIPTION
} else {
DxDataFile_combine_with_originalFile <- DxDataFile_combine_with_originalFile$CCS_CATEGORY
}
errorID<-is.na(DxDataFile_combine_with_originalFile[is.na(DxDataFile_combine_with_originalFile)])
if(sum(errorID)>=1){
warning("NA means icd code does not match the format.",call. = F)
}
DxDataFile_combine_with_originalFile
}
groupIcdToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", T)
library("roxygen2", lib.loc="~/R/win-library/3.4")
library("devtools", lib.loc="~/R/win-library/3.4")
devtools::document()
globalVariables
globalVariables(CCS,emr,add=TRUE)
globalVariables(CCS,"emr",add=TRUE)
globalVariables("CCS","emr",add=TRUE)
devtools::check()
names(ccsDxICD10)
names(ccsDxICD9)
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
devtools::document()
devtools::check("emr")
devtools::check()
devtools::check()
library(emr)
library(emr)
devtools::check()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
devtools::document()
setwd("~/emr")
devtools::document()
