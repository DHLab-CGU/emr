idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
CustomGroup
IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
#' @param CustomGroupingTable Grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group" and "ICD"
#' @export
#' @examples
#' head(sampleDxFile)
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' IcdDxToCustom(sampleDxFile, ID, ICD, Date,
#'               CustomGroupingTable = groupingTable)
#'
IcdDxToCustom <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
customICD <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
customICD <- customICD[,DataCol,with = FALSE]
names(customICD) <- c("ID", "ICD", "Date")
customICD[,c("Date", "Number") := list(as.Date(Date), 1:nrow(customICD))]
groupedICD <- merge(customICD, CustomGroupingTable, by = "ICD", all.x = T)
groupedICD <- groupedICD[order(Number),-"Number"]
if(sum(!is.na(groupedICD$group)) > 0){
groupedICDLong <- groupedICD[!is.na(group),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = list(ID, group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = groupedICD,
summarised_groupedDT = groupedICDLong))
}else{
return(warning("There is no match diagnostic code with the groupingTable"))
}
}
IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
CustomGroup
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
#' @param CustomGroupingTable Grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group" and "ICD"
#' @export
#' @examples
#' head(sampleDxFile)
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' IcdDxToCustom(sampleDxFile, ID, ICD, Date,
#'               CustomGroupingTable = groupingTable)
#'
IcdDxToCustom <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
customICD <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
customICD <- customICD[,DataCol,with = FALSE]
names(customICD) <- c("ID", "ICD", "Date")
customICD[,c("Date", "Number") := list(as.Date(Date), 1:nrow(customICD))]
groupedICD <- merge(customICD, CustomGroupingTable, by = "ICD", all.x = T)
groupedICD <- groupedICD[order(Number),-"Number"]
if(sum(!is.na(groupedICD$group)) > 0){
groupedICDLong <- groupedICD[!is.na(group),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = list(ID, group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = groupedICD,
summarised_groupedDT = groupedICDLong))
}else{
warning("There is no match diagnostic code with the groupingTable")
}
}
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
#' @param CustomGroupingTable Grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group" and "ICD"
#' @export
#' @examples
#' head(sampleDxFile)
#' groupingTable <- data.frame(group = rep("Cardiac dysrhythmias",6),
#'                             ICD = c("427.1","427.2","427.31","427.61","427.81","427.89"),
#'                             stringsAsFactors = FALSE)
#' IcdDxToCustom(sampleDxFile, ID, ICD, Date,
#'               CustomGroupingTable = groupingTable)
#'
IcdDxToCustom <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
customICD <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol <- c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
customICD <- customICD[,DataCol,with = FALSE]
names(customICD) <- c("ID", "ICD", "Date")
customICD[,c("Date", "Number") := list(as.Date(Date), 1:nrow(customICD))]
groupedICD <- merge(customICD, CustomGroupingTable, by = "ICD", all.x = T)
groupedICD <- groupedICD[order(Number),-"Number"]
if(sum(!is.na(groupedICD$group)) > 0){
groupedICDLong <- groupedICD[!is.na(group),
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),
by = list(ID, group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = groupedICD,
summarised_groupedDT = groupedICDLong))
}else{
warning("There is no match diagnostic code with the groupingTable")
return(groupedICD)
}
}
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = groupingTable)
View(CustomGroup)
grepTable <- data.frame(group = "Heart failure",
grepIcd  = "^428",
stringsAsFactors = FALSE)
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = grepTable)
DxDataFile
GrepedIcd <- as.data.table(DxDataFile)
CustomGroupingTable = grepTable
CustomGroupingTable <- as.data.table(CustomGroupingTable)
GrepedIcd[,c("Date", "Number", "group") := list(as.Date(Date), 1:nrow(GrepedIcd), "")]
GrepedIcd
for (rule in 1:nrow(CustomGroupingTable)){
GrepedIcd$group<-ifelse(grepl(CustomGroupingTable[rule,"grepIcd"],GrepedIcd[,ICD]), CustomGroupingTable[rule,group], GrepedIcd[,group])
}
GrepedIcd
GrepedIcd <- GrepedIcd[order(Number),-"Number"]
GrepedIcd
GrepedIcd$group
nchar(GrepedIcd$group)
nchar(GrepedIcd$group) > 0
sum(nchar(GrepedIcd$group) > 0)>0
#' @param CustomGroupingTable grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group", "grepIcd"
#' @export
#' @examples
#' head(sampleDxFile)
#' grepTable <- data.frame(group = "Cardiac dysrhythmias",
#'                         grepIcd = "^427|^I48",
#'                         stringsAsFactors = FALSE)
#' IcdDxToCustomGrep(sampleDxFile, ID, ICD, Date,
#'                   CustomGroupingTable = grepTable)
#'
IcdDxToCustomGrep <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
GrepedIcd <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol  <-c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
GrepedIcd <- GrepedIcd[,DataCol,with = FALSE]
names(GrepedIcd) <- c("ID", "ICD", "Date")
GrepedIcd[,c("Date", "Number", "group") := list(as.Date(Date), 1:nrow(GrepedIcd), "")]
for (rule in 1:nrow(CustomGroupingTable)){
GrepedIcd$group<-ifelse(grepl(CustomGroupingTable[rule,"grepIcd"],GrepedIcd[,ICD]), CustomGroupingTable[rule,group], GrepedIcd[,group])
}
if(sum(nchar(GrepedIcd$group) > 0) > 0){
GrepedIcdLong <- GrepedIcd[nchar(group)>0,
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = list(ID,group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = GrepedIcd[order(Number),-"Number"],
summarised_groupedDT = GrepedIcdLong))
}else{
warning("There is no match diagnostic code with the grepTable")
return(GrepedIcd[order(Number),-"Number"])
}
}
#' @param CustomGroupingTable grouping rules of clustering the ICD is based on yourself! There are two column in the dataframe/datatable: "group", "grepIcd"
#' @export
#' @examples
#' head(sampleDxFile)
#' grepTable <- data.frame(group = "Cardiac dysrhythmias",
#'                         grepIcd = "^427|^I48",
#'                         stringsAsFactors = FALSE)
#' IcdDxToCustomGrep(sampleDxFile, ID, ICD, Date,
#'                   CustomGroupingTable = grepTable)
#'
IcdDxToCustomGrep <- function(DxDataFile, idColName, icdColName, dateColName, CustomGroupingTable){
GrepedIcd <- as.data.table(DxDataFile)
CustomGroupingTable <- as.data.table(CustomGroupingTable)
DataCol  <-c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))
GrepedIcd <- GrepedIcd[,DataCol,with = FALSE]
names(GrepedIcd) <- c("ID", "ICD", "Date")
GrepedIcd[,c("Date", "Number", "group") := list(as.Date(Date), 1:nrow(GrepedIcd), "")]
for (rule in 1:nrow(CustomGroupingTable)){
GrepedIcd$group<-ifelse(grepl(CustomGroupingTable[rule,"grepIcd"],GrepedIcd[,ICD]), CustomGroupingTable[rule,group], GrepedIcd[,group])
}
if(sum(nchar(GrepedIcd$group) > 0) > 0){
GrepedIcdLong <- GrepedIcd[nchar(group)>0,
list(firstCaseDate = min(Date),
endCaseDate = max(Date),
count = .N),by = list(ID,group)][,period := (endCaseDate - firstCaseDate),][order(ID),]
return(list(groupedDT = GrepedIcd[order(Number),-"Number"],
summarised_groupedDT = GrepedIcdLong))
}else{
warning("There is no match diagnostic code with the grepTable")
return(GrepedIcd[order(Number),-"Number"])
}
}
CustomGroup <- IcdDxToCustomGrep(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = grepTable)
CustomGroup <- IcdDxToCustom(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
CustomGroupingTable = grepTable)
load("~/emr/data/dxICD10.rda")
View(dxICD10)
load("~/emr/data/ccsDxICD10.rda")
View(ccsDxICD10)
setwd("~/emr")
devtools::document()
devtools::check()
pkgdown::build_site()
groupedDataWide <- groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015-10-01",
groupDataType = elix,
numericOrBinary = B,
selectedCaseFile = selectedCaseFile)
plot_groupedData(groupedDataWide = groupedDataWide,
TopN = 10,
limitPercentage = 0.01,
pvalue = 0.005)
selectedCaseFile <- selectCases(DxDataFile = sampleDxFile,
idColName = ID,
icdColName = ICD,
dateColName = Date,
icd10usingDate = "2015/10/01",
groupDataType = ccslvl2,
caseCondition = "Diseases of the urinary system",
caseCount = 1)
groupedDataWide <- groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015-10-01",
groupDataType = elix,
numericOrBinary = B,
selectedCaseFile = selectedCaseFile)
plot_groupedData(groupedDataWide = groupedDataWide,
TopN = 10,
limitPercentage = 0.01,
pvalue = 0.005)
plot2
plot2 <- plot_groupedData(groupedDataWide = groupedDataWide,
TopN = 10,
limitPercentage = 0.01,
pvalue = 0.005)
plot2
groupedDataWide
#'                                          groupDataType = elix,
#'                                          numericOrBinary = B,
#'                                          selectedCaseFile = selectedCaseFile)
#' plot2 <- plot_groupedData(groupedDataWide = groupedDataWide,
#'                           TopN = 10,
#'                           limitPercentage = 0.01,
#'                           pvalue = 0.005)
#' plot1
#' plot2
#'
groupedDataWide <- groupedDataWide[,-ncol(groupedDataWide)]
groupedDataWide
plot_groupedData(groupedDataWide = groupedDataWide,
TopN = 10,
limitPercentage = 0.01,
pvalue = 0.005)
groupedDataWide <- groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015-10-01",
groupDataType = elix,
numericOrBinary = B,
selectedCaseFile = selectedCaseFile)
plot2 <- plot_groupedData(groupedDataWide = groupedDataWide,
TopN = 10,
limitPercentage = 0.01,
pvalue = 0.05)
plot2
TopN
TopN = 10
limitPercentage = 0.01
pvalue = 0.05
Test_pvalue <- c()
ggtitle <- "Diagnostic category"
if(names(groupedDataWide)[ncol(groupedDataWide)] == "selectedCase"){
groupedDataWide <- cbind(groupedDataWide[, -c(1, ncol(groupedDataWide))]*1,
group = groupedDataWide[, "selectedCase"])
groupedDataLong <- melt(groupedDataWide, id.vars = "group",variable.name = "category", value.name = "value")
groupedDataLong <- as.data.table(groupedDataLong)[,list(count = sum(value)), by = list(group, category)]
caseNum <- sum(!grepl("non|[*]",groupedDataWide$group))
controlNum <- sum(grepl("non",groupedDataWide$group))
caseDataLong <- groupedDataLong[!grepl("non|[*]",groupedDataLong$group),][,catePerc := round((count/caseNum)*100,2)]
controlDataLong <- groupedDataLong[grepl("non",groupedDataLong$group),][,catePerc := round((count/controlNum)*100,2)]
for(cat in 1:nrow(caseDataLong)){
if(caseDataLong$catePerc[cat] >= limitPercentage | controlDataLong$catePerc[cat] >= limitPercentage){
Table <- matrix(c(caseDataLong$count[cat], controlDataLong$count[cat],
caseNum - caseDataLong$count[cat], controlNum - controlDataLong$count[cat]), 2, 2)
if(sum(Table < 5) < 1){
Test_pvalue[[length(Test_pvalue)+1]] <- chisq.test(Table)$p.value < pvalue
}else{
Test_pvalue[[length(Test_pvalue)+1]] <- fisher.test(Table, alternative = "greater")$p.value < pvalue
}
}else{
Test_pvalue[[length(Test_pvalue)+1]] <- FALSE
}
}
if(sum(Test_pvalue) == 0){
return(message("There is no significant category between case and control"))
}else{
groupedDataLong <- groupedDataLong[,list(sum = sum(count)),by = category][order(sum,decreasing = T)]
groupedDataLong <- groupedDataLong[1:TopN,][order(sum),"category"]
groupedDataLong[,"category" := factor(category, levels = groupedDataLong$category),]
dignosticCate <- merge(groupedDataLong, rbind(caseDataLong[Test_pvalue,],controlDataLong[Test_pvalue,]),all.x = T)[!is.na(group),]
dignosticCate[,"group" := factor(group, levels = unique(dignosticCate$group)),]
g <- ggplot(dignosticCate, aes(fill =  group, y = count, x = category, group = group)) +
geom_text(aes(label = paste0(catePerc,"%")), hjust = -.2, size = 2.5, position = position_dodge(width = 1)) +
geom_bar(position="dodge", stat="identity")
}
}else{
groupedDataWide[,-1] <- groupedDataWide[,-1]*1
groupedDataWide$group <- "noGroup"
groupedDataLong <- melt(groupedDataWide[,-1], id.vars = "group",variable.name = "category", value.name = "value")
groupedDataLong <- as.data.table(groupedDataLong)[,list(count = sum(value)), by = list(group, category)][order(count)][,catePerc := round(count/nrow(groupedDataWide)*100,2)][,-"group"][catePerc >= limitPercentage,]
groupedDataLong <- groupedDataLong[][,c("category","Number","catePerc") :=
list(factor(category, levels = category),
nrow(groupedDataLong):1,
paste0(catePerc,"%")),][Number <= TopN,]
dignosticCate <- groupedDataLong[,-"Number"]
Max <- dignosticCate[,max(count)]
g <- ggplot(groupedDataLong, aes(y = count, x = category)) +
geom_bar(position="dodge", stat="identity") +
geom_text(aes(label = catePerc), hjust = -.2, size = 2.5, position = position_dodge(width = 1)) +
annotate("rect", xmin = nrow(groupedDataLong) + .55, xmax =  nrow(groupedDataLong) + 1,
ymin = -.02 * Max, ymax = Max * 1.02, fill = "white")
dignosticCate <- groupedDataLong[,-"Number"]
}
Test_pvalue
Test_pvalue <- c()
ggtitle <- "Diagnostic category"
Test_pvalue
if(names(groupedDataWide)[ncol(groupedDataWide)] == "selectedCase"){
groupedDataWide <- cbind(groupedDataWide[, -c(1, ncol(groupedDataWide))]*1,
group = groupedDataWide[, "selectedCase"])
groupedDataLong <- melt(groupedDataWide, id.vars = "group",variable.name = "category", value.name = "value")
groupedDataLong <- as.data.table(groupedDataLong)[,list(count = sum(value)), by = list(group, category)]
caseNum <- sum(!grepl("non|[*]",groupedDataWide$group))
controlNum <- sum(grepl("non",groupedDataWide$group))
caseDataLong <- groupedDataLong[!grepl("non|[*]",groupedDataLong$group),][,catePerc := round((count/caseNum)*100,2)]
controlDataLong <- groupedDataLong[grepl("non",groupedDataLong$group),][,catePerc := round((count/controlNum)*100,2)]
for(cat in 1:nrow(caseDataLong)){
if(caseDataLong$catePerc[cat] >= limitPercentage | controlDataLong$catePerc[cat] >= limitPercentage){
Table <- matrix(c(caseDataLong$count[cat], controlDataLong$count[cat],
caseNum - caseDataLong$count[cat], controlNum - controlDataLong$count[cat]), 2, 2)
if(sum(Table < 5) < 1){
Test_pvalue[[length(Test_pvalue)+1]] <- chisq.test(Table)$p.value < pvalue
}else{
Test_pvalue[[length(Test_pvalue)+1]] <- fisher.test(Table, alternative = "greater")$p.value < pvalue
}
}else{
Test_pvalue[[length(Test_pvalue)+1]] <- FALSE
}
}
if(sum(Test_pvalue) == 0){
return(message("There is no significant category between case and control"))
}else{
groupedDataLong <- groupedDataLong[,list(sum = sum(count)),by = category][order(sum,decreasing = T)]
groupedDataLong <- groupedDataLong[1:TopN,][order(sum),"category"]
groupedDataLong[,"category" := factor(category, levels = groupedDataLong$category),]
dignosticCate <- merge(groupedDataLong, rbind(caseDataLong[Test_pvalue,],controlDataLong[Test_pvalue,]),all.x = T)[!is.na(group),]
dignosticCate[,"group" := factor(group, levels = unique(dignosticCate$group)),]
g <- ggplot(dignosticCate, aes(fill =  group, y = count, x = category, group = group)) +
geom_text(aes(label = paste0(catePerc,"%")), hjust = -.2, size = 2.5, position = position_dodge(width = 1)) +
geom_bar(position="dodge", stat="identity")
}
}else{
groupedDataWide[,-1] <- groupedDataWide[,-1]*1
groupedDataWide$group <- "noGroup"
groupedDataLong <- melt(groupedDataWide[,-1], id.vars = "group",variable.name = "category", value.name = "value")
groupedDataLong <- as.data.table(groupedDataLong)[,list(count = sum(value)), by = list(group, category)][order(count)][,catePerc := round(count/nrow(groupedDataWide)*100,2)][,-"group"][catePerc >= limitPercentage,]
groupedDataLong <- groupedDataLong[][,c("category","Number","catePerc") :=
list(factor(category, levels = category),
nrow(groupedDataLong):1,
paste0(catePerc,"%")),][Number <= TopN,]
dignosticCate <- groupedDataLong[,-"Number"]
g <- ggplot(groupedDataLong, aes(y = count, x = category)) +
geom_bar(position="dodge", stat="identity") +
geom_text(aes(label = catePerc), hjust = -.2, size = 2.5, position = position_dodge(width = 1))
dignosticCate <- groupedDataLong[,-"Number"]
}
Test_pvalue
names(groupedDataWide)[ncol(groupedDataWide)] == "selectedCase"
groupedDataWide
groupedDataWide <- groupedDataLongToWide(sampleDxFile, ID, ICD, Date,
icd10usingDate = "2015-10-01",
groupDataType = elix,
numericOrBinary = B,
selectedCaseFile = selectedCaseFile)
if(names(groupedDataWide)[ncol(groupedDataWide)] == "selectedCase"){
groupedDataWide <- cbind(groupedDataWide[, -c(1, ncol(groupedDataWide))]*1,
group = groupedDataWide[, "selectedCase"])
groupedDataLong <- melt(groupedDataWide, id.vars = "group",variable.name = "category", value.name = "value")
groupedDataLong <- as.data.table(groupedDataLong)[,list(count = sum(value)), by = list(group, category)]
caseNum <- sum(!grepl("non|[*]",groupedDataWide$group))
controlNum <- sum(grepl("non",groupedDataWide$group))
caseDataLong <- groupedDataLong[!grepl("non|[*]",groupedDataLong$group),][,catePerc := round((count/caseNum)*100,2)]
controlDataLong <- groupedDataLong[grepl("non",groupedDataLong$group),][,catePerc := round((count/controlNum)*100,2)]
for(cat in 1:nrow(caseDataLong)){
if(caseDataLong$catePerc[cat] >= limitPercentage | controlDataLong$catePerc[cat] >= limitPercentage){
Table <- matrix(c(caseDataLong$count[cat], controlDataLong$count[cat],
caseNum - caseDataLong$count[cat], controlNum - controlDataLong$count[cat]), 2, 2)
if(sum(Table < 5) < 1){
Test_pvalue[[length(Test_pvalue)+1]] <- chisq.test(Table)$p.value < pvalue
}else{
Test_pvalue[[length(Test_pvalue)+1]] <- fisher.test(Table, alternative = "greater")$p.value < pvalue
}
}else{
Test_pvalue[[length(Test_pvalue)+1]] <- FALSE
}
}
if(sum(Test_pvalue) == 0){
return(message("There is no significant category between case and control"))
}else{
groupedDataLong <- groupedDataLong[,list(sum = sum(count)),by = category][order(sum,decreasing = T)]
groupedDataLong <- groupedDataLong[1:TopN,][order(sum),"category"]
groupedDataLong[,"category" := factor(category, levels = groupedDataLong$category),]
dignosticCate <- merge(groupedDataLong, rbind(caseDataLong[Test_pvalue,],controlDataLong[Test_pvalue,]),all.x = T)[!is.na(group),]
dignosticCate[,"group" := factor(group, levels = unique(dignosticCate$group)),]
g <- ggplot(dignosticCate, aes(fill =  group, y = count, x = category, group = group)) +
geom_text(aes(label = paste0(catePerc,"%")), hjust = -.2, size = 2.5, position = position_dodge(width = 1)) +
geom_bar(position="dodge", stat="identity")
}
}else{
groupedDataWide[,-1] <- groupedDataWide[,-1]*1
groupedDataWide$group <- "noGroup"
groupedDataLong <- melt(groupedDataWide[,-1], id.vars = "group",variable.name = "category", value.name = "value")
groupedDataLong <- as.data.table(groupedDataLong)[,list(count = sum(value)), by = list(group, category)][order(count)][,catePerc := round(count/nrow(groupedDataWide)*100,2)][,-"group"][catePerc >= limitPercentage,]
groupedDataLong <- groupedDataLong[][,c("category","Number","catePerc") :=
list(factor(category, levels = category),
nrow(groupedDataLong):1,
paste0(catePerc,"%")),][Number <= TopN,]
dignosticCate <- groupedDataLong[,-"Number"]
g <- ggplot(groupedDataLong, aes(y = count, x = category)) +
geom_bar(position="dodge", stat="identity") +
geom_text(aes(label = catePerc), hjust = -.2, size = 2.5, position = position_dodge(width = 1))
dignosticCate <- groupedDataLong[,-"Number"]
}
dignosticCate
dignosticCate
g <- ggplot(groupedDataLong, aes(y = count, x = category)) +
geom_bar(position="dodge", stat="identity") +
geom_text(aes(label = catePerc), hjust = -.2, size = 2.5, position = position_dodge(width = 1))
g <- ggplot(dignosticCate, aes(fill =  group, y = count, x = category, group = group)) +
geom_text(aes(label = paste0(catePerc,"%")), hjust = -.2, size = 2.5, position = position_dodge(width = 1)) +
geom_bar(position="dodge", stat="identity")
ggtitle <- paste0(ggtitle,": Top ", TopN)
Max <- dignosticCate[,max(count)]
dignosticCate_graph <- g + coord_flip() +
xlab("Diagnostic category") + ylab("Diagnostic category, n") + ggtitle(ggtitle) +
annotate("rect", xmin = nrow(groupedDataLong) + .55, xmax =  nrow(groupedDataLong) + 1,
ymin = -.02 * Max, ymax = Max * 1.02, fill = "white") +
theme_bw() +
theme(axis.text.y = element_text(size = 10,face = "bold"),
axis.text.x = element_text(size = 10,face = "bold"))
dignosticCate_graph
dignosticCate
max(dignosticCate$count)
nrow(groupedDataLong)
dignosticCate_graph <- g + coord_flip() +
xlab("Diagnostic category") + ylab("Diagnostic category, n") + ggtitle(ggtitle) +
annotate("rect", xmin = nrow(groupedDataLong) + .55, xmax =  nrow(groupedDataLong) + 1,
ymin = -.02 * 1, ymax = 1 * 1.02, fill = "white") +
theme_bw() +
theme(axis.text.y = element_text(size = 10,face = "bold"),
axis.text.x = element_text(size = 10,face = "bold"))
dignosticCate_graph
dignosticCate_graph <- g + coord_flip() +
xlab("Diagnostic category") + ylab("Diagnostic category, n") + ggtitle(ggtitle) +
# annotate("rect", xmin = nrow(groupedDataLong) + .55, xmax =  nrow(groupedDataLong) + 1,
#          ymin = -.02 * Max, ymax = Max * 1.02, fill = "white") +
annotate("rect", xmin = 1 + .55, xmax =  1 + 1,
ymin = -.02 * Max, ymax = Max * 1.02, fill = "white") +
theme_bw() +
theme(axis.text.y = element_text(size = 10,face = "bold"),
axis.text.x = element_text(size = 10,face = "bold"))
dignosticCate_graph
dignosticCate_graph <- g + coord_flip() +
xlab("Diagnostic category") + ylab("Diagnostic category, n") + ggtitle(ggtitle) +
# annotate("rect", xmin = nrow(groupedDataLong) + .55, xmax =  nrow(groupedDataLong) + 1,
#          ymin = -.02 * Max, ymax = Max * 1.02, fill = "white") +
annotate("rect", ymin = -.02 * Max, ymax = Max * 1.02, fill = "white") +
theme_bw() +
theme(axis.text.y = element_text(size = 10,face = "bold"),
axis.text.x = element_text(size = 10,face = "bold"))
dignosticCate_graph
