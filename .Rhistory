CCS_wide<- groupedDatalongToWide(test,N) #0.98 secs (238976 obs)
View(ccsDxICD10)
View(CCS_wide)
View(ccs_Long)
Long <- test$GroupedData_Long
test <- IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 3, T)
#' @export
#' @source ICD-9-CM CCS (2012)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#'
#' IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 2, TRUE)
#'
IcdDxToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, CCSLvlLabel = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimalToShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
if(CCSLvlLabel == T){
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
}else{
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
}
if(CCSLevel <= 2){
IcdToCCSLvl <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLvlCol), by = c("Short"="ICD"))) %>% arrange(Number)
}else{
IcdToCCSLvl <- left_join(DxDataFile,
left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
by = names(DxDataFile))
}
IcdToCCSLvlLong <- IcdToCCSLvl[!is.na(IcdToCCSLvl[,CCSLvlCol]),] %>%
group_by_("ID",CCSLvlCol) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCS[,ccs_col])],stringsAsFactors = F), WrongFormat, "ICD")
return(list(GroupedIcd = IcdToCCSLvl[, CCSLvlCol],
GroupedData_Long = IcdToCCSLvlLong,
wrongICD = WrongFormat,
errorICD = error_ICD))
}
test <- IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 3, T)
#' @export
#' @source ICD-9-CM CCS (2012)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#'
#' IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 2, TRUE)
#'
IcdDxToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, CCSLvlLabel = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimalToShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
if(CCSLvlLabel == T){
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
}else{
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
}
if(CCSLevel <= 2){
IcdToCCSLvl <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLvlCol), by = c("Short"="ICD"))) %>% arrange(Number)
}else{
IcdToCCSLvl <- left_join(DxDataFile,
left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
by = names(DxDataFile))
}
IcdToCCSLvlLong <- IcdToCCSLvl[!is.na(IcdToCCSLvl[,CCSLvlCol]),] %>%
group_by_("ID",CCSLvlCol) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCSLvl[,CCSLvlCol])],stringsAsFactors = F), WrongFormat, "ICD")
return(list(GroupedIcd = IcdToCCSLvl[, CCSLvlCol],
GroupedData_Long = IcdToCCSLvlLong,
wrongICD = WrongFormat,
errorICD = error_ICD))
}
#' @export
#' @source ICD-9-CM CCS (2012)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#'
#' IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 2, TRUE)
#'
IcdDxToCCSLvl <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, CCSLevel = 1, CCSLvlLabel = TRUE){
DxDataFile <- DxDataFile[ , c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimalToShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
if(CCSLvlLabel == T){
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
}else{
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
}
if(CCSLevel <= 2){
IcdToCCSLvl <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLvlCol), by = c("Short"="ICD"))) %>% arrange(Number)
}else{
IcdToCCSLvl <- left_join(DxDataFile,
left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
by = names(DxDataFile))
}
IcdToCCSLvlLong <- IcdToCCSLvl[!is.na(IcdToCCSLvl[,CCSLvlCol]),] %>%
group_by_("ID",CCSLvlCol) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCSLvl[,CCSLvlCol])],stringsAsFactors = F), WrongFormat, "ICD")
return(list(GroupedIcd = IcdToCCSLvl[, CCSLvlCol],
GroupedData_Long = IcdToCCSLvlLong,
wrongICD = WrongFormat,
errorICD = error_ICD))
}
test <- IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 3, T)
Long <- test$GroupedData_Long
View(Long)
ICD <- test$GroupedIcd
head(ICD)
GroupedData <- test
GroupedData$ICD <- test$GroupedIcd
head(GroupedData)
View(GroupedData)
GroupedData$ICD <- test$GroupedIcd
View(test)
CCS <- IcdDxToCCS(testDxFile,ID,ICD,Date,"2015/10/01",T)
CCSLvl <- IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 3, T)
CCS$GroupedIcd
CCS$ccs <- CCS$GroupedIcd
CCStest <- testDxFile
CCS <- IcdDxToCCS(testDxFile,ID,ICD,Date,"2015/10/01",T)
CCStest$ccs <- CCS$GroupedIcd
View(CCStest)
CCSlvltest <- testDxFile
CCSlvltest$ccslvl <- CCSLvl$GroupedIcd
View(CCSlvltest)
View(ccsDxICD9)
CCSLvl <- IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 3, T)
GroupedData <- CCSLvl
LongFormat <- as.data.table(GroupedData$GroupedData_Long)
LongFormat
wideNumericDt <- dcast.data.table(LongFormat, ID~eval(parse(text = paste(names(LongFormat)[2]))), value.var = c("Count"))
wideNumericDt
View(wideNumericDt)
View(LongFormat)
CCSlvl_wide<- groupedDatalongToWide(test,N)
CCSlvl_wide<- groupedDatalongToWide(CCSLvl, N)
CCSlvl_wide<- groupedDatalongToWide(CCSLvl, N)
groupedDatalongToWide <- function(GroupedData, NumericOrBinary){
LongFormat <- as.data.table(GroupedData$GroupedData_Long)
wideNumericDt <- dcast.data.table(LongFormat, ID~eval(parse(text = paste(names(LongFormat)[2]))), value.var = c("Count"))
wideNumericDt[is.na(wideNumericDt)] <- 0L
WrongFormat <- GroupedData$wrongICD
error_ICD <- GroupedData$errorICD
GroupedIcd <- GroupedData$GroupedIcd
if(anyNA(GroupedIcd)){
if(nrow(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
}
if(sum(is.na(GroupedIcd[[1]])) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
if(toupper(deparse(substitute(NumericOrBinary))) == "B"){
wideBinaryDt <-data.table(wideNumericDt >= 1L)
wideBinaryDt$ID <- wideNumericDt$ID
return(wideBinaryDt)
}else if(toupper(deparse(substitute(NumericOrBinary))) == "N"){
return(wideNumericDt)
}else{
stop("'please enter N or B for 'comorbidMethod'", call. = FALSE)
}
}
CCSlvl_wide<- groupedDatalongToWide(CCSLvl, N)
View(testDxFile)
groupedDatalongToWide <- function(GroupedData, NumericOrBinary){
LongFormat <- as.data.table(GroupedData$GroupedData_Long)
wideNumericDt <- dcast.data.table(LongFormat, ID~eval(parse(text = paste(names(LongFormat)[2]))), value.var = c("Count"))
wideNumericDt[is.na(wideNumericDt)] <- 0L
WrongFormat <- GroupedData$wrongICD
error_ICD <- GroupedData$errorICD
GroupedIcd <- GroupedData$GroupedIcd
if(anyNA(GroupedIcd)){
if(nrow(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
}
if(sum(is.na(GroupedIcd)) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
if(toupper(deparse(substitute(NumericOrBinary))) == "B"){
wideBinaryDt <-data.table(wideNumericDt >= 1L)
wideBinaryDt$ID <- wideNumericDt$ID
return(wideBinaryDt)
}else if(toupper(deparse(substitute(NumericOrBinary))) == "N"){
return(wideNumericDt)
}else{
stop("'please enter N or B for 'comorbidMethod'", call. = FALSE)
}
}
groupedDatalongToWide <- function(GroupedData, NumericOrBinary){
LongFormat <- as.data.table(GroupedData$GroupedData_Long)
wideNumericDt <- dcast.data.table(LongFormat, ID~eval(parse(text = paste(names(LongFormat)[2]))), value.var = c("Count"))
wideNumericDt[is.na(wideNumericDt)] <- 0L
WrongFormat <- GroupedData$wrongICD
error_ICD <- GroupedData$errorICD
GroupedIcd <- GroupedData$GroupedIcd
if(anyNA(GroupedIcd)){
if(nrow(WrongFormat) > 0){
message(paste0("wrong Format: ", unique(WrongFormat$ICD), sep = "\t\n"))
}
if(sum(is.na(GroupedIcd)) > nrow(WrongFormat)){
message(paste0("wrong ICD version: ", unique(error_ICD$ICD), sep = "\t\n"))
message("\n")
}
warning('The ICD mentioned above matches to "NA" due to the format or other issues.', call. = F)
warning('"wrong Format" means the ICD has wrong format', call. = F)
warning('"wrong ICD version" means the ICD classify to wrong ICD version (cause the "icd10usingDate" or other issues)', call. = F)
}
if(toupper(deparse(substitute(NumericOrBinary))) == "B"){
wideBinaryDt <-data.table(wideNumericDt >= 1L)
wideBinaryDt$ID <- wideNumericDt$ID
return(wideBinaryDt)
}else if(toupper(deparse(substitute(NumericOrBinary))) == "N"){
return(wideNumericDt)
}else{
stop("'please enter N or B for 'NumericOrBinary'", call. = FALSE)
}
}
CCSlvl_wide<- groupedDatalongToWide(CCSLvl, N)
View(testDxFile)
View(Long)
CCslvl_test <- testDxFile
CCslvl_test$ccslvl <- CCSLvl$GroupedIcd
View(CCslvl_test)
CCSLvl$wrongICD
View(ICD10DxwithTwoFormat)
CCSLvl$errorICD
CCSLvl$errorICD %>% unique
error <- CCSLvl$errorICD %>% unique
View(error)
CCSlvl_wide<- groupedDatalongToWide(CCSLvl, N)
View(testDxFile)
View(ccsDxICD10)
#' return comorbidity meseaures based on ICD diagnosis codes
#'
#' @import data.table
#' @param DxDataFile A file of clinical diagnostic data with at least 3 columns: "MemberID","ICD", "Date"
#' @param comorbidMethod  Three comorbidity method: AHRQ, Charlson and Elixhauser Comorbidity, type `ahrq`,`charlson`, or`elix`
#' @param NumericOrBinary  Member have one (or more) diagnostic comorbidities, type `N` or `B`, default is `B` (Binary)
#' @export
#' @examples
#'
#'
CCS <- IcdDxToCCS(testDxFile,ID,ICD,Date,"2015/10/01",T)
CCS_wide<- groupedDatalongToWide(CCS, N)
CCS_test <- testDxFile
CCS_test$CCS <- CCS$GroupedIcd
errorCCS <- CCS$errorICD %>% unique
View(errorCCS)
View(CCS_wide)
View(ccsDxICD9)
View(ICD9DxwithTwoFormat)
#' @export
#' @source ICD-9-CM CCS (2012)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#'
#' IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 2, TRUE)
#'
DxDataFile <- testDxFile
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
DxDataFile <- DxDataFile %>% mutate(Number =  1:nrow(DxDataFile))
Conversion <- IcdDxDecimalToShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
CCSLevel = 1
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
CCSLevel = 3
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, sep = "")))
IcdToCCSLvl <- left_join(DxDataFile,
left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
by = names(DxDataFile))
icd10usingDate <- "2015/10/01"
IcdToCCSLvl <- left_join(DxDataFile,
left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
by = names(DxDataFile))
View(IcdToCCSLvl)
CCSLevel = 2
IcdToCCSLvl <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLvlCol), by = c("Short"="ICD"))) #%>% arrange(Number)
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
IcdToCCSLvl <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLvlCol), by = c("Short"="ICD"))) #%>% arrange(Number)
DxDataFile$ICD[is.na(IcdToCCSLvl[,CCSLvlCol])]
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCSLvl[,CCSLvlCol])],stringsAsFactors = F), WrongFormat, "ICD")
View(error_ICD)
error_ICD %>% unique
DxDataFile[is.na(IcdToCCSLvl[,CCSLvlCol]),]
IcdToCCSLvl[is.na(IcdToCCSLvl[,CCSLvlCol]),]
error_ICD <- anti_join(data.frame(ICD = IcdToCCSLvl$ICD[is.na(IcdToCCSLvl[,CCSLvlCol])],stringsAsFactors = F), WrongFormat, "ICD")
error_ICD
IcdToCCSLvl <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLvlCol), by = c("Short"="ICD"))) #%>% arrange(Number)
icd9ToCCS <- left_join(DxDataFile[as.Date(DxDataFile$Date) < icd10usingDate,],
select(ccsDxICD9, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
icd10ToCCS <- left_join(DxDataFile[as.Date(DxDataFile$Date) >= icd10usingDate,],
select(ccsDxICD10, ICD, CCS_CATEGORY, CCS_CATEGORY_DESCRIPTION), by = c("Short"="ICD"))
CCS_combine <- rbind(icd9ToCCS, icd10ToCCS) %>% arrange(Number)
CCS_combine <- rbind(icd9ToCCS, icd10ToCCS) #%>% arrange(Number)
View(CCS_combine)
error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCS)],stringsAsFactors = F), WrongFormat, "ICD")
IcdToCCS <- CCS_combine$CCS_CATEGORY_DESCRIPTION
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = DxDataFile$ICD[is.na(IcdToCCS)],stringsAsFactors = F), WrongFormat, "ICD")
View(error_ICD)
error_ICD <- anti_join(data.frame(ICD = CCS_combine$ICD[is.na(IcdToCCS)],stringsAsFactors = F), WrongFormat, "ICD")
View(WrongFormat)
unique(WrongFormat$ICD)
#' @export
#' @source ICD-9-CM CCS (2012)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#'
#' IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 2, TRUE)
#'
DxDataFile <- testDxFile
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimalToShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
IcdToCCSLvl <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLvlCol), by = c("Short"="ICD")))
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = IcdToCCSLvl$ICD[is.na(IcdToCCSLvl[,CCSLvlCol])],stringsAsFactors = F), WrongFormat, "ICD")
View(error_ICD)
View(errorCCS)
View(DxDataFile)
#' @export
#' @source ICD-9-CM CCS (2012)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#'
#' IcdDxToCCSLvl(testDxFile, ID, ICD, Date, "2015-10-01", 2, TRUE)
#'
DxDataFile <- testDxFile
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimalToShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
CCSLvlCol <- as.character(parse(text = paste("CCS_LVL_", CCSLevel, "_LABEL", sep = "")))
IcdToCCSLvl <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", CCSLvlCol), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD", CCSLvlCol), by = c("Short"="ICD")))
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = IcdToCCSLvl$ICD[is.na(IcdToCCSLvl[,CCSLvlCol])],stringsAsFactors = F), WrongFormat, "ICD")
setwd("~/emr")
devtools::document()
devtools::check()
source('~/emr/R/emr.R')
View(testDxFile)
#' @export
#' @source ICD-9-CM CCS (2012)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#'
#' IcdDxToCCS(testDxFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = T){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimalToShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
if (isCCSCategoryDescription == T) {
ccs_col <- "CCS_CATEGORY_DESCRIPTION"
}else {
ccs_col <- "CCS_CATEGORY"
}
IcdToCCS <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", ccs_col), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD",ccs_col), by = c("Short"="ICD"))) %>% arrange(Number)
IcdToCCSLong <- IcdToCCS[!is.na(IcdToCCS[,ccs_col]),] %>%
group_by_("ID",ccs_col) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = IcdToCCS$ICD[is.na(IcdToCCS[,ccs_col])],stringsAsFactors = F), WrongFormat, "ICD")
return(list(GroupedIcd = IcdToCCS[,ccs_col],
GroupedData_Long = IcdToCCSLong,
wrongICD = WrongFormat,
errorICD = error_ICD))
}
DxDataFile <- data.frame(ID = c("A","A","A"),
ICD = c("6929","V433","I350"),
Date = as.Date(c("2013-03-31","2013-01-29","2016-03-10")),
stringsAsFactors = FALSE)
IcdDxToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)$GroupedIcd
#' @export
#' @source ICD-9-CM CCS (2012)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Single_Level_CCS_2015.zip}
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs/Multi_Level_CCS_2015.zip}
#' @source ICD-10-CM CCS (2019)
#' @source \url{https://www.hcup-us.ahrq.gov/toolssoftware/ccs10/ccs_dx_icd10cm_2019_1.zip}
#' @examples
#'
#' IcdDxToCCS(testDxFile, ID, ICD, Date, "2016-01-01", TRUE)
#'
IcdDxToCCS <- function(DxDataFile, idColName, icdColName, dateColName, icd10usingDate, isCCSCategoryDescription = T){
DxDataFile <- DxDataFile[, c(deparse(substitute(idColName)), deparse(substitute(icdColName)), deparse(substitute(dateColName)))]
names(DxDataFile) <- c("ID", "ICD", "Date")
DxDataFile$Date <- as.Date(DxDataFile$Date)
Conversion <- IcdDxDecimalToShort(DxDataFile$ICD)
DxDataFile$Short <- Conversion$Short
if (isCCSCategoryDescription == T) {
ccs_col <- "CCS_CATEGORY_DESCRIPTION"
}else {
ccs_col <- "CCS_CATEGORY"
}
IcdToCCS <- rbind(left_join(DxDataFile[DxDataFile$Date < icd10usingDate,],
select_(ccsDxICD9, "ICD", ccs_col), by = c("Short"="ICD")),
left_join(DxDataFile[DxDataFile$Date >= icd10usingDate,],
select_(ccsDxICD10, "ICD",ccs_col), by = c("Short"="ICD")))
IcdToCCSLong <- IcdToCCS[!is.na(IcdToCCS[,ccs_col]),] %>%
group_by_("ID",ccs_col) %>%
summarise(firstCaseDate = min(Date),
endCaseDate = max(Date),
period = endCaseDate - firstCaseDate,
Count = n())
WrongFormat <- Conversion$Error
error_ICD <- anti_join(data.frame(ICD = IcdToCCS$ICD[is.na(IcdToCCS[,ccs_col])],stringsAsFactors = F), WrongFormat, "ICD")
return(list(GroupedIcd = IcdToCCS[,ccs_col],
GroupedData_Long = IcdToCCSLong,
wrongICD = WrongFormat,
errorICD = error_ICD))
}
IcdDxToCCS (DxDataFile, ID, ICD, Date, "2016-01-01", FALSE)$GroupedIcd
devtools::document()
devtools::check()
setwd("~/emr")
devtools::document()
devtools::check()
load("~/emr/data/ICD9DxwithTwoFormat.rda")
devtools::document()
